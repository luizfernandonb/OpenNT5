; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.2190 

	TITLE	..\codguts.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
PAGECONST	SEGMENT DWORD USE32 PUBLIC ''
PAGECONST	ENDS
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _InitializeListHead@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RemoveEntryList@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RemoveHeadList@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RemoveTailList@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InsertHeadList@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IoAllocateAdapterChannel@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IoFlushAdapterBuffers@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IoFreeMapRegisters@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IoMapTransfer@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateTurnInputOn@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateTurnInputOff@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateGetStateUnsafe@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateInitialize@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateRemoveOnInputFromAnd@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateRemoveOffInputFromAnd@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateRemoveOnInputFromOr@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateRemoveOffInputFromOr@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCDequeueAndStartStreamDataRequest@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCDequeueAndStartStreamControlRequest@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCDequeueAndStartDeviceRequest@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCBuildRequestPacket@16
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCProcessDmaDataBuffers@28
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCProcessPioDataBuffers@28
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCSetUpForDMA@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _StreamClassDmaCallback@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCStartMinidriverRequest@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _StreamClassDpc@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCStartRequestOnStream@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCGetInterruptState@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCProcessCompletedRequest@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCDequeueAndDeleteSrb@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCProcessCompletedDataRequest@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCMinidriverStreamTimerDpc@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCMinidriverDeviceTimerDpc@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCLogError@16
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCLogErrorWithString@20
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _StreamClassSynchronizeExecution@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCCompleteIrp@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCDummyMinidriverRoutine@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCOpenMinidriverInstance@16
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCSubmitRequest@44
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCSignalSRBEvent@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCProcessDataTransfer@12
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCErrorDataSRB@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCIssueRequestToDevice@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCCheckFilterInstanceStreamsForIrp@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCCheckRequestsForIrp@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCNotifyMinidriverCancel@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCCancelOutstandingIrp@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCMinidriverDevicePropertyHandler@16
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCMinidriverStreamPropertyHandler@16
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCProcessCompletedPropertyRequest@4
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCUpdateMinidriverProperties@12
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCUpdateMinidriverEvents@12
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCReadRegistryValues@8
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCGetRegistryValue@20
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCReferenceSwEnumDriver@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCDereferenceDriver@4
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCReferenceDriver@4
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCInsertStreamInFilter@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCInsertFiltersInDevice@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCInterlockedRemoveEntryList@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCProcessTimerRequest@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCProcessPriorityChangeRequest@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCBeginSynchronizedMinidriverCallin@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCBeginUnsynchronizedMinidriverCallin@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCEndSynchronizedMinidriverStreamCallin@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCEndSynchronizedMinidriverDeviceCallin@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCEndUnsynchronizedMinidriverDeviceCallin@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCEndUnsynchronizedMinidriverStreamCallin@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCCheckPoweredUp@4
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCCheckPowerDown@4
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCWaitForOutstandingIo@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCShowIoPending@8
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCCallNextDriver@8
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCMinidriverTimeFunction@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCGetStreamTime@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SCGetPhysicalTime@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SCGetSynchronizedTime@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCSendUnknownCommand@16
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCMapMemoryAddress@28
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCUpdatePersistedProperties@12
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCQueryCapabilities@8
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCEnableEventSynchronized@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCEnableDeviceEventSynchronized@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCFreeDeadEvents@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCGetDeadListSynchronized@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCRescanStreams@4
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCCheckIfStreamsRunning@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCCallBackSrb@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCCopyMinidriverProperties@8
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCCopyMinidriverEvents@8
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCCopyMinidriverMethods@8
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _SCUpdateMinidriverMethods@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCMinidriverDeviceMethodHandler@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCMinidriverStreamMethodHandler@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SCProcessCompletedMethodRequest@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

EXTRN	_StreamDispatchCreate@8:NEAR
PAGECONST	SEGMENT
_PageOutWhenUnopenedString DB 'P', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 'O', 00H
	DB	'u', 00H, 't', 00H, 'W', 00H, 'h', 00H, 'e', 00H, 'n', 00H, 'U'
	DB	00H, 'n', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'd', 00H, 00H, 00H
_PageOutWhenIdleString DB 'P', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 'O', 00H
	DB	'u', 00H, 't', 00H, 'W', 00H, 'h', 00H, 'e', 00H, 'n', 00H, 'I'
	DB	00H, 'd', 00H, 'l', 00H, 'e', 00H, 00H, 00H
_PowerDownWhenUnopenedString DB 'P', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r'
	DB	00H, 'D', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'W', 00H, 'h', 00H
	DB	'e', 00H, 'n', 00H, 'U', 00H, 'n', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H
_DontSuspendIfStreamsAreRunning DB 'D', 00H, 'o', 00H, 'n', 00H, 't', 00H
	DB	'S', 00H, 'u', 00H, 's', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'd'
	DB	00H, 'I', 00H, 'f', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 'm', 00H, 's', 00H, 'A', 00H, 'r', 00H, 'e', 00H, 'R'
	DB	00H, 'u', 00H, 'n', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	00H, 00H
	ORG $+2
_DriverUsesSWEnumToLoad DB 'D', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, 'U', 00H, 's', 00H, 'e', 00H, 's', 00H, 'S', 00H, 'W'
	DB	00H, 'E', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'T', 00H, 'o', 00H
	DB	'L', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 00H, 00H
	ORG $+2
_OkToHibernate DB 'O', 00H, 'k', 00H, 'T', 00H, 'o', 00H, 'H', 00H, 'i', 00H
	DB	'b', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 00H, 00H
_RegistrySettings DD FLAT:_PageOutWhenUnopenedString
	DD	028H
	DD	01H
	DD	FLAT:_PageOutWhenIdleString
	DD	020H
	DD	02H
	DD	FLAT:_PowerDownWhenUnopenedString
	DD	02cH
	DD	04H
	DD	FLAT:_DontSuspendIfStreamsAreRunning
	DD	03eH
	DD	08H
	DD	FLAT:_DriverUsesSWEnumToLoad
	DD	02eH
	DD	010H
	DD	FLAT:_OkToHibernate
	DD	01cH
	DD	020H
_PinTypeName DB	'{', 00H, '1', 00H, '4', 00H, '6', 00H, 'F', 00H, '1', 00H
	DB	'A', 00H, '8', 00H, '0', 00H, '-', 00H, '4', 00H, '7', 00H, '9'
	DB	00H, '1', 00H, '-', 00H, '1', 00H, '1', 00H, 'D', 00H, '0', 00H
	DB	'-', 00H, 'A', 00H, '5', 00H, 'D', 00H, '6', 00H, '-', 00H, '2'
	DB	00H, '8', 00H, 'D', 00H, 'B', 00H, '0', 00H, '4', 00H, 'C', 00H
	DB	'1', 00H, '0', 00H, '0', 00H, '0', 00H, '0', 00H, '}', 00H, 00H
	DB	00H
	ORG $+2
_CreateHandlers DD FLAT:_StreamDispatchCreate@8
	DD	00H
	DW	04cH
	DW	04eH
	DD	FLAT:_PinTypeName
	DD	00H
	DD	00H
PAGECONST	ENDS
PUBLIC	_InitializeListHead@4
; Function compile flags: /Ogsy
; File d:\srv03rtm\public\sdk\inc\wdm.h
;	COMDAT _InitializeListHead@4
_TEXT	SEGMENT
_ListHead$ = 8						; size = 4
_InitializeListHead@4 PROC NEAR				; COMDAT

; 1515 :     ListHead->Flink = ListHead->Blink = ListHead;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ListHead$[esp-4]
  00004	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00007	89 00		 mov	 DWORD PTR [eax], eax

; 1516 : }

  00009	c2 04 00	 ret	 4
_InitializeListHead@4 ENDP
_TEXT	ENDS
PUBLIC	_RemoveEntryList@4
; Function compile flags: /Ogsy
;	COMDAT _RemoveEntryList@4
_TEXT	SEGMENT
_Entry$ = 8						; size = 4
_RemoveEntryList@4 PROC NEAR				; COMDAT

; 1536 :     PLIST_ENTRY Blink;
; 1537 :     PLIST_ENTRY Flink;
; 1538 : 
; 1539 :     Flink = Entry->Flink;

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _Entry$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1540 :     Blink = Entry->Blink;

  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 1541 :     Blink->Flink = Flink;

  00009	89 01		 mov	 DWORD PTR [ecx], eax

; 1542 :     Flink->Blink = Blink;
; 1543 :     return (BOOLEAN)(Flink == Blink);

  0000b	3b c1		 cmp	 eax, ecx
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00010	0f 94 c0	 sete	 al

; 1544 : }

  00013	c2 04 00	 ret	 4
_RemoveEntryList@4 ENDP
_TEXT	ENDS
PUBLIC	_RemoveHeadList@4
; Function compile flags: /Ogsy
;	COMDAT _RemoveHeadList@4
_TEXT	SEGMENT
_ListHead$ = 8						; size = 4
_RemoveHeadList@4 PROC NEAR				; COMDAT

; 1552 :     PLIST_ENTRY Flink;
; 1553 :     PLIST_ENTRY Entry;
; 1554 : 
; 1555 :     Entry = ListHead->Flink;

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _ListHead$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1556 :     Flink = Entry->Flink;

  00006	8b 10		 mov	 edx, DWORD PTR [eax]

; 1557 :     ListHead->Flink = Flink;

  00008	89 11		 mov	 DWORD PTR [ecx], edx

; 1558 :     Flink->Blink = ListHead;

  0000a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 1559 :     return Entry;
; 1560 : }

  0000d	c2 04 00	 ret	 4
_RemoveHeadList@4 ENDP
_TEXT	ENDS
PUBLIC	_RemoveTailList@4
; Function compile flags: /Ogsy
;	COMDAT _RemoveTailList@4
_TEXT	SEGMENT
_ListHead$ = 8						; size = 4
_RemoveTailList@4 PROC NEAR				; COMDAT

; 1570 :     PLIST_ENTRY Blink;
; 1571 :     PLIST_ENTRY Entry;
; 1572 : 
; 1573 :     Entry = ListHead->Blink;

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _ListHead$[esp-4]
  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1574 :     Blink = Entry->Blink;

  00007	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1575 :     ListHead->Blink = Blink;

  0000a	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1576 :     Blink->Flink = ListHead;

  0000d	89 0a		 mov	 DWORD PTR [edx], ecx

; 1577 :     return Entry;
; 1578 : }

  0000f	c2 04 00	 ret	 4
_RemoveTailList@4 ENDP
_TEXT	ENDS
PUBLIC	_InsertHeadList@8
; Function compile flags: /Ogsy
;	COMDAT _InsertHeadList@8
_TEXT	SEGMENT
_ListHead$ = 8						; size = 4
_Entry$ = 12						; size = 4
_InsertHeadList@8 PROC NEAR				; COMDAT

; 1605 :     PLIST_ENTRY Flink;
; 1606 : 
; 1607 :     Flink = ListHead->Flink;

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _ListHead$[esp-4]
  00004	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1608 :     Entry->Flink = Flink;

  00006	8b 44 24 08	 mov	 eax, DWORD PTR _Entry$[esp-4]
  0000a	89 10		 mov	 DWORD PTR [eax], edx

; 1609 :     Entry->Blink = ListHead;

  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1610 :     Flink->Blink = Entry;

  0000f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1611 :     ListHead->Flink = Entry;

  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 1612 : }

  00014	c2 08 00	 ret	 8
_InsertHeadList@8 ENDP
_TEXT	ENDS
PUBLIC	_IoAllocateAdapterChannel@20
; Function compile flags: /Ogsy
;	COMDAT _IoAllocateAdapterChannel@20
_TEXT	SEGMENT
_DmaAdapter$ = 8					; size = 4
_DeviceObject$ = 12					; size = 4
_NumberOfMapRegisters$ = 16				; size = 4
_ExecutionRoutine$ = 20					; size = 4
_Context$ = 24						; size = 4
_IoAllocateAdapterChannel@20 PROC NEAR			; COMDAT

; 14258:     ){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 14259: 
; 14260:     PALLOCATE_ADAPTER_CHANNEL allocateAdapterChannel;
; 14261:     NTSTATUS status;
; 14262: 
; 14263:     allocateAdapterChannel =
; 14264:         *(DmaAdapter)->DmaOperations->AllocateAdapterChannel;
; 14265: 
; 14266:     ASSERT( allocateAdapterChannel != NULL );
; 14267: 
; 14268:     status = allocateAdapterChannel( DmaAdapter,
; 14269:                                      DeviceObject,
; 14270:                                      NumberOfMapRegisters,
; 14271:                                      ExecutionRoutine,
; 14272:                                      Context );

  00003	ff 75 18	 push	 DWORD PTR _Context$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _DmaAdapter$[ebp]
  00009	ff 75 14	 push	 DWORD PTR _ExecutionRoutine$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	ff 75 10	 push	 DWORD PTR _NumberOfMapRegisters$[ebp]
  00012	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00015	ff 75 0c	 push	 DWORD PTR _DeviceObject$[ebp]
  00018	50		 push	 eax
  00019	ff d1		 call	 ecx

; 14273: 
; 14274:     return status;
; 14275: }

  0001b	5d		 pop	 ebp
  0001c	c2 14 00	 ret	 20			; 00000014H
_IoAllocateAdapterChannel@20 ENDP
_TEXT	ENDS
PUBLIC	_IoFlushAdapterBuffers@24
; Function compile flags: /Ogsy
;	COMDAT _IoFlushAdapterBuffers@24
_TEXT	SEGMENT
_DmaAdapter$ = 8					; size = 4
_Mdl$ = 12						; size = 4
_MapRegisterBase$ = 16					; size = 4
_CurrentVa$ = 20					; size = 4
_Length$ = 24						; size = 4
_WriteToDevice$ = 28					; size = 1
_IoFlushAdapterBuffers@24 PROC NEAR			; COMDAT

; 14287:     ){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 14288: 
; 14289:     PFLUSH_ADAPTER_BUFFERS flushAdapterBuffers;
; 14290:     BOOLEAN result;
; 14291: 
; 14292:     flushAdapterBuffers = *(DmaAdapter)->DmaOperations->FlushAdapterBuffers;
; 14293:     ASSERT( flushAdapterBuffers != NULL );
; 14294: 
; 14295:     result = flushAdapterBuffers( DmaAdapter,
; 14296:                                   Mdl,
; 14297:                                   MapRegisterBase,
; 14298:                                   CurrentVa,
; 14299:                                   Length,
; 14300:                                   WriteToDevice );

  00003	ff 75 1c	 push	 DWORD PTR _WriteToDevice$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _DmaAdapter$[ebp]
  00009	ff 75 18	 push	 DWORD PTR _Length$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	ff 75 14	 push	 DWORD PTR _CurrentVa$[ebp]
  00012	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00015	ff 75 10	 push	 DWORD PTR _MapRegisterBase$[ebp]
  00018	ff 75 0c	 push	 DWORD PTR _Mdl$[ebp]
  0001b	50		 push	 eax
  0001c	ff d1		 call	 ecx

; 14301:     return result;
; 14302: }

  0001e	5d		 pop	 ebp
  0001f	c2 18 00	 ret	 24			; 00000018H
_IoFlushAdapterBuffers@24 ENDP
_TEXT	ENDS
PUBLIC	_IoFreeMapRegisters@12
; Function compile flags: /Ogsy
;	COMDAT _IoFreeMapRegisters@12
_TEXT	SEGMENT
_DmaAdapter$ = 8					; size = 4
_MapRegisterBase$ = 12					; size = 4
_NumberOfMapRegisters$ = 16				; size = 4
_IoFreeMapRegisters@12 PROC NEAR			; COMDAT

; 14327: 
; 14328:     PFREE_MAP_REGISTERS freeMapRegisters;
; 14329: 
; 14330:     freeMapRegisters = *(DmaAdapter)->DmaOperations->FreeMapRegisters;
; 14331:     ASSERT( freeMapRegisters != NULL );
; 14332: 
; 14333:     freeMapRegisters( DmaAdapter,
; 14334:                       MapRegisterBase,
; 14335:                       NumberOfMapRegisters );

  00000	ff 74 24 0c	 push	 DWORD PTR _NumberOfMapRegisters$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR _DmaAdapter$[esp]
  00008	ff 74 24 0c	 push	 DWORD PTR _MapRegisterBase$[esp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	50		 push	 eax
  00010	ff 51 1c	 call	 DWORD PTR [ecx+28]

; 14336: }

  00013	c2 0c 00	 ret	 12			; 0000000cH
_IoFreeMapRegisters@12 ENDP
_TEXT	ENDS
PUBLIC	_IoMapTransfer@24
; Function compile flags: /Ogsy
;	COMDAT _IoMapTransfer@24
_TEXT	SEGMENT
_DmaAdapter$ = 8					; size = 4
_Mdl$ = 12						; size = 4
_MapRegisterBase$ = 16					; size = 4
_CurrentVa$ = 20					; size = 4
_Length$ = 24						; size = 4
_WriteToDevice$ = 28					; size = 1
_IoMapTransfer@24 PROC NEAR				; COMDAT

; 14349:     ){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 14350: 
; 14351:     PHYSICAL_ADDRESS physicalAddress;
; 14352:     PMAP_TRANSFER mapTransfer;
; 14353: 
; 14354:     mapTransfer = *(DmaAdapter)->DmaOperations->MapTransfer;
; 14355:     ASSERT( mapTransfer != NULL );
; 14356: 
; 14357:     physicalAddress = mapTransfer( DmaAdapter,
; 14358:                                    Mdl,
; 14359:                                    MapRegisterBase,
; 14360:                                    CurrentVa,
; 14361:                                    Length,
; 14362:                                    WriteToDevice );

  00003	ff 75 1c	 push	 DWORD PTR _WriteToDevice$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _DmaAdapter$[ebp]
  00009	ff 75 18	 push	 DWORD PTR _Length$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	ff 75 14	 push	 DWORD PTR _CurrentVa$[ebp]
  00012	ff 75 10	 push	 DWORD PTR _MapRegisterBase$[ebp]
  00015	ff 75 0c	 push	 DWORD PTR _Mdl$[ebp]
  00018	50		 push	 eax
  00019	ff 51 20	 call	 DWORD PTR [ecx+32]

; 14363: 
; 14364:     return physicalAddress;
; 14365: }

  0001c	5d		 pop	 ebp
  0001d	c2 18 00	 ret	 24			; 00000018H
_IoMapTransfer@24 ENDP
_TEXT	ENDS
PUBLIC	_SCDequeueAndStartDeviceRequest@4
EXTRN	__imp_@KefReleaseSpinLockFromDpcLevel@4:NEAR
EXTRN	_StreamClassCancelOutstandingIrp@8:NEAR
EXTRN	__imp_@InterlockedExchange@8:NEAR
; Function compile flags: /Ogsy
; File d:\srv03rtm\drivers\wdm\dvd\class\codguts.c
;	COMDAT _SCDequeueAndStartDeviceRequest@4
_TEXT	SEGMENT
_DeviceExtension$ = 8					; size = 4
_SCDequeueAndStartDeviceRequest@4 PROC NEAR		; COMDAT

; 388  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 389  :     PIRP            Irp;
; 390  :     PLIST_ENTRY     Entry;
; 391  :     PSTREAM_REQUEST_BLOCK Request;
; 392  : 
; 393  :     Entry = RemoveTailList(&DeviceExtension->PendingQueue);

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR _DeviceExtension$[esp+4]
  00006	8d 86 f0 00 00
	00		 lea	 eax, DWORD PTR [esi+240]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00012	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00015	89 02		 mov	 DWORD PTR [edx], eax

; 394  :     Irp = CONTAINING_RECORD(Entry,
; 395  :                             IRP,
; 396  :                             Tail.Overlay.ListEntry);
; 397  : 
; 398  :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);
; 399  :     ASSERT(Irp);
; 400  : 
; 401  :     //
; 402  :     // clear the ready flag as we are going
; 403  :     // to send one down.
; 404  :     //
; 405  : 
; 406  :     ASSERT(DeviceExtension->ReadyForNextReq);
; 407  : 
; 408  :     DeviceExtension->ReadyForNextReq = FALSE;

  00017	c6 86 e4 01 00
	00 00		 mov	 BYTE PTR [esi+484], 0
  0001e	57		 push	 edi

; 409  : 
; 410  :     //
; 411  :     // get the request packet from the IRP
; 412  :     //
; 413  : 
; 414  :     Request = Irp->Tail.Overlay.DriverContext[0];

  0001f	8b 79 e8	 mov	 edi, DWORD PTR [ecx-24]

; 415  : 
; 416  :     ASSERT(Request);
; 417  : 
; 418  :     //
; 419  :     // show that the request is active.
; 420  :     //
; 421  : 
; 422  :     Request->Flags |= SRB_FLAGS_IS_ACTIVE;

  00022	83 4f 4c 01	 or	 DWORD PTR [edi+76], 1

; 423  : 
; 424  :     //
; 425  :     // place the request on the outstanding
; 426  :     // queue
; 427  :     //
; 428  : 
; 429  :     InsertHeadList(
; 430  :                    &DeviceExtension->OutstandingQueue,
; 431  :                    &Request->SRBListEntry);

  00026	8d 96 f8 00 00
	00		 lea	 edx, DWORD PTR [esi+248]
  0002c	8b 1a		 mov	 ebx, DWORD PTR [edx]
  0002e	8d 47 70	 lea	 eax, DWORD PTR [edi+112]
  00031	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00034	89 18		 mov	 DWORD PTR [eax], ebx
  00036	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00039	89 02		 mov	 DWORD PTR [edx], eax

; 432  : 
; 433  :     //
; 434  :     // set the cancel routine to outstanding
; 435  :     //
; 436  : 
; 437  :     IoSetCancelRoutine(Irp, StreamClassCancelOutstandingIrp);

  0003b	83 c1 e0	 add	 ecx, -32		; ffffffe0H
  0003e	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:_StreamClassCancelOutstandingIrp@8
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedExchange@8

; 438  : 
; 439  :     //
; 440  :     // send down the request to the
; 441  :     // minidriver.
; 442  :     //
; 443  : 
; 444  :     DebugPrint((DebugLevelTrace, "'SCDequeueStartDevice: starting Irp %x, SRB = %x, Command = %x\n",
; 445  :                 Request->HwSRB.Irp, Request, Request->HwSRB.Command));
; 446  : 
; 447  :     DeviceExtension->SynchronizeExecution(
; 448  :                                           DeviceExtension->InterruptObject,
; 449  :         (PVOID) DeviceExtension->MinidriverData->HwInitData.HwReceivePacket,
; 450  :                                           &Request->HwSRB);

  00049	8b 86 c0 00 00
	00		 mov	 eax, DWORD PTR [esi+192]
  0004f	57		 push	 edi
  00050	ff 70 08	 push	 DWORD PTR [eax+8]
  00053	ff b6 ac 00 00
	00		 push	 DWORD PTR [esi+172]
  00059	ff 96 d4 00 00
	00		 call	 DWORD PTR [esi+212]

; 451  : 
; 452  :     //
; 453  :     // release the spinlock.
; 454  :     //
; 455  : 
; 456  :     KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  0005f	8d 8e d8 00 00
	00		 lea	 ecx, DWORD PTR [esi+216]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi

; 457  : 
; 458  :     return (STATUS_PENDING);

  0006d	b8 03 01 00 00	 mov	 eax, 259		; 00000103H
  00072	5b		 pop	 ebx

; 459  : }

  00073	c2 04 00	 ret	 4
_SCDequeueAndStartDeviceRequest@4 ENDP
_TEXT	ENDS
PUBLIC	_SCBuildRequestPacket@16
EXTRN	__imp__MmBuildMdlForNonPagedPool@4:NEAR
EXTRN	__imp__IoAllocateMdl@20:NEAR
EXTRN	__imp__ExAllocatePoolWithTag@12:NEAR
EXTRN	__imp__ExFreePool@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCBuildRequestPacket@16
PAGE	SEGMENT
_BlockSize$ = 8						; size = 4
_DeviceExtension$ = 8					; size = 4
_Irp$ = 12						; size = 4
_AdditionalSize1$ = 16					; size = 4
_AdditionalSize2$ = 20					; size = 4
_SCBuildRequestPacket@16 PROC NEAR			; COMDAT

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 490  :     ULONG           BlockSize;
; 491  :     PSTREAM_REQUEST_BLOCK Request;
; 492  : 
; 493  :     PAGED_CODE();
; 494  : 
; 495  :     //
; 496  :     // compute the size of the block needed.
; 497  :     //
; 498  : 
; 499  :     BlockSize = sizeof(STREAM_REQUEST_BLOCK) +
; 500  :         DeviceExtension->
; 501  :         MinidriverData->HwInitData.PerRequestExtensionSize +
; 502  :         AdditionalSize1+
; 503  :         AdditionalSize2;

  00003	8b 4d 14	 mov	 ecx, DWORD PTR _AdditionalSize2$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _DeviceExtension$[ebp]
  0000a	8b 83 c0 00 00
	00		 mov	 eax, DWORD PTR [ebx+192]
  00010	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00013	03 45 10	 add	 eax, DWORD PTR _AdditionalSize1$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8d 84 08 a8 00
	00 00		 lea	 eax, DWORD PTR [eax+ecx+168]

; 504  : 
; 505  :     Request = ExAllocatePool(NonPagedPool, BlockSize);

  0001f	68 57 64 6d 20	 push	 544040023		; 206d6457H
  00024	50		 push	 eax
  00025	33 ff		 xor	 edi, edi
  00027	57		 push	 edi
  00028	89 45 08	 mov	 DWORD PTR _BlockSize$[ebp], eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  00031	8b f0		 mov	 esi, eax

; 506  : 
; 507  :     if (Request == NULL) {

  00033	3b f7		 cmp	 esi, edi

; 508  :         DebugPrint((DebugLevelError,
; 509  :                     "SCBuildRequestPacket: No pool for packet"));
; 510  :         ASSERT(0);
; 511  :         return (NULL);

  00035	74 1b		 je	 SHORT $L14807

; 512  :     }
; 513  :     //
; 514  :     // alloc MDL for the request.
; 515  :     //
; 516  :     // GUBGUB  This a marginal performace enhancment chance. 
; 517  :     // - should find a way to avoid allocating both an MDL and
; 518  :     // SRB per request.   Maybe have a list of MDL's around and allocate only
; 519  :     // if we run out.   Forrest won't like this.
; 520  :     //
; 521  :     //
; 522  : 
; 523  :     Request->Mdl = IoAllocateMdl(Request,
; 524  :                                  BlockSize,
; 525  :                                  FALSE,
; 526  :                                  FALSE,
; 527  :                                  NULL
; 528  :         );

  00037	57		 push	 edi
  00038	57		 push	 edi
  00039	57		 push	 edi
  0003a	ff 75 08	 push	 DWORD PTR _BlockSize$[ebp]
  0003d	56		 push	 esi
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoAllocateMdl@20

; 529  : 
; 530  :     if (Request->Mdl == NULL) {

  00044	3b c7		 cmp	 eax, edi
  00046	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00049	75 0b		 jne	 SHORT $L13155

; 531  :         ExFreePool(Request);

  0004b	56		 push	 esi
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4
$L14807:

; 532  :         DebugPrint((DebugLevelError,
; 533  :                     "SCBuildRequestPacket: can't get MDL"));
; 534  :         return (NULL);

  00052	33 c0		 xor	 eax, eax
  00054	eb 6b		 jmp	 SHORT $L13145
$L13155:

; 535  :     }
; 536  :     MmBuildMdlForNonPagedPool(Request->Mdl);

  00056	50		 push	 eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmBuildMdlForNonPagedPool@4

; 537  : 
; 538  :     //
; 539  :     // fill in the various SRB fields
; 540  :     // generically
; 541  :     //
; 542  : 
; 543  :     Request->Length = BlockSize;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _BlockSize$[ebp]

; 544  :     Request->HwSRB.SizeOfThisPacket = sizeof(HW_STREAM_REQUEST_BLOCK);
; 545  : 
; 546  :     Request->HwSRB.Status = STATUS_PENDING;
; 547  :     Request->HwSRB.StreamObject = NULL;
; 548  :     Request->HwSRB.HwInstanceExtension = NULL;
; 549  :     Request->HwSRB.NextSRB = (PHW_STREAM_REQUEST_BLOCK) NULL;
; 550  :     Request->HwSRB.SRBExtension = Request + 1;
; 551  :     Request->HwSRB.Irp = Irp;

  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00063	89 46 68	 mov	 DWORD PTR [esi+104], eax
  00066	8d 86 a8 00 00
	00		 lea	 eax, DWORD PTR [esi+168]
  0006c	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0006f	c7 06 4c 00 00
	00		 mov	 DWORD PTR [esi], 76	; 0000004cH
  00075	c7 46 08 03 01
	00 00		 mov	 DWORD PTR [esi+8], 259	; 00000103H
  0007c	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  0007f	89 7e 34	 mov	 DWORD PTR [esi+52], edi
  00082	89 7e 28	 mov	 DWORD PTR [esi+40], edi
  00085	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx

; 552  :     Request->Flags = 0;

  00088	89 7e 4c	 mov	 DWORD PTR [esi+76], edi

; 553  :     Request->MapRegisterBase = 0;

  0008b	89 7e 5c	 mov	 DWORD PTR [esi+92], edi

; 554  :     Request->HwSRB.Flags = 0;

  0008e	89 7e 30	 mov	 DWORD PTR [esi+48], edi

; 555  :     Request->HwSRB.TimeoutCounter = 15;

  00091	6a 0f		 push	 15			; 0000000fH
  00093	5a		 pop	 edx
  00094	89 56 20	 mov	 DWORD PTR [esi+32], edx

; 556  :     Request->HwSRB.TimeoutOriginal = 15;

  00097	89 56 24	 mov	 DWORD PTR [esi+36], edx

; 557  :     Request->HwSRB.ScatterGatherBuffer =
; 558  :         (PKSSCATTER_GATHER) ((ULONG_PTR) Request->HwSRB.SRBExtension +
; 559  :                              (ULONG_PTR) DeviceExtension->
; 560  :                         MinidriverData->HwInitData.PerRequestExtensionSize);

  0009a	8b 93 c0 00 00
	00		 mov	 edx, DWORD PTR [ebx+192]
  000a0	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  000a3	03 d0		 add	 edx, eax
  000a5	89 56 3c	 mov	 DWORD PTR [esi+60], edx

; 561  : 
; 562  :     Request->pMemPtrArray = (PVOID) (((ULONG_PTR) Request->HwSRB.SRBExtension +
; 563  :                             (ULONG_PTR) DeviceExtension->
; 564  :                             MinidriverData->HwInitData.PerRequestExtensionSize) +
; 565  :                             AdditionalSize1);

  000a8	8b 93 c0 00 00
	00		 mov	 edx, DWORD PTR [ebx+192]
  000ae	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  000b1	03 d0		 add	 edx, eax
  000b3	03 55 10	 add	 edx, DWORD PTR _AdditionalSize1$[ebp]

; 566  :     //
; 567  :     // point the IRP workspace to the request
; 568  :     // packet
; 569  :     //
; 570  : 
; 571  :     Irp->Tail.Overlay.DriverContext[0] = Request;
; 572  : 
; 573  :     return (Request);

  000b6	8b c6		 mov	 eax, esi
  000b8	89 96 a4 00 00
	00		 mov	 DWORD PTR [esi+164], edx
  000be	89 71 40	 mov	 DWORD PTR [ecx+64], esi
$L13145:
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx

; 574  : 
; 575  : }                               // end SCBuildRequestPacket()

  000c4	5d		 pop	 ebp
  000c5	c2 10 00	 ret	 16			; 00000010H
_SCBuildRequestPacket@16 ENDP
PAGE	ENDS
PUBLIC	_SCProcessDmaDataBuffers@28
; Function compile flags: /Ogsy
;	COMDAT _SCProcessDmaDataBuffers@28
PAGE	SEGMENT
_FirstHeader$ = 8					; size = 4
_NumberOfHeaders$ = 12					; size = 4
_StreamObject$ = 16					; size = 4
_FirstMdl$ = 20						; size = 4
_NumberOfPages$ = 24					; size = 4
_StreamHeaderSize$ = 28					; size = 4
_Write$ = 32						; size = 1
_SCProcessDmaDataBuffers@28 PROC NEAR			; COMDAT

; 604  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 605  :     PKSSTREAM_HEADER CurrentHeader;
; 606  :     PMDL            CurrentMdl;
; 607  :     ULONG           i;
; 608  :     ULONG           DataBytes;
; 609  :     
; 610  :     PAGED_CODE();
; 611  : 
; 612  :     //
; 613  :     // loop through each scatter/gather elements
; 614  :     //
; 615  : 
; 616  :     CurrentHeader = FirstHeader;
; 617  :     CurrentMdl = FirstMdl;

  00003	8b 45 14	 mov	 eax, DWORD PTR _FirstMdl$[ebp]
  00006	57		 push	 edi

; 618  : 
; 619  :     for (i = 0; i < NumberOfHeaders; i++) {

  00007	8b 7d 0c	 mov	 edi, DWORD PTR _NumberOfHeaders$[ebp]
  0000a	85 ff		 test	 edi, edi
  0000c	76 3e		 jbe	 SHORT $L13190
  0000e	8b 55 08	 mov	 edx, DWORD PTR _FirstHeader$[ebp]
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	8b 75 18	 mov	 esi, DWORD PTR _NumberOfPages$[ebp]
  00016	83 c2 20	 add	 edx, 32			; 00000020H
$L14812:

; 620  : 
; 621  :         //
; 622  :         // pick up the correct data buffer, based on the xfer direction
; 623  :         //
; 624  : 
; 625  :         if (Write) {

  00019	80 7d 20 00	 cmp	 BYTE PTR _Write$[ebp], 0
  0001d	74 05		 je	 SHORT $L13191

; 626  : 
; 627  :             DataBytes = CurrentHeader->DataUsed;

  0001f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 628  : 
; 629  :         } else {                // if write

  00022	eb 02		 jmp	 SHORT $L13192
$L13191:

; 630  : 
; 631  :             DataBytes = CurrentHeader->FrameExtent;

  00024	8b 0a		 mov	 ecx, DWORD PTR [edx]
$L13192:

; 632  : 
; 633  :         }                       // if write
; 634  : 
; 635  :         //
; 636  :         // if this header has data, process it.
; 637  :         //
; 638  : 
; 639  :         if (DataBytes) {

  00026	85 c9		 test	 ecx, ecx
  00028	74 1a		 je	 SHORT $L13193

; 640  :             #if DBG
; 641  :             if (CurrentHeader->OptionsFlags & KSSTREAM_HEADER_OPTIONSF_TIMEVALID) {
; 642  :                 DebugPrint((DebugLevelVerbose, "'SCProcessData: time = %x\n",
; 643  :                             CurrentHeader->PresentationTime.Time));
; 644  :             }
; 645  :             #endif
; 646  :             //
; 647  :             // add # pages to total if DMA
; 648  :             //
; 649  :             *NumberOfPages += ADDRESS_AND_SIZE_TO_SPAN_PAGES(
; 650  :                                          MmGetMdlVirtualAddress(CurrentMdl),
; 651  :                                                                  DataBytes);

  0002a	8b 58 18	 mov	 ebx, DWORD PTR [eax+24]
  0002d	03 58 10	 add	 ebx, DWORD PTR [eax+16]
  00030	81 e3 ff 0f 00
	00		 and	 ebx, 4095		; 00000fffH
  00036	8d 8c 0b ff 0f
	00 00		 lea	 ecx, DWORD PTR [ebx+ecx+4095]
  0003d	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  00040	01 0e		 add	 DWORD PTR [esi], ecx

; 652  :             CurrentMdl = CurrentMdl->Next;

  00042	8b 00		 mov	 eax, DWORD PTR [eax]
$L13193:

; 653  :         }
; 654  :         //
; 655  :         // offset to the next buffer
; 656  :         //
; 657  : 
; 658  :         CurrentHeader = ((PKSSTREAM_HEADER) ((PBYTE) CurrentHeader +
; 659  :                                              StreamHeaderSize));

  00044	03 55 1c	 add	 edx, DWORD PTR _StreamHeaderSize$[ebp]
  00047	4f		 dec	 edi
  00048	75 cf		 jne	 SHORT $L14812
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
$L13190:
  0004c	5f		 pop	 edi

; 660  : 
; 661  :     }                           // for # elements
; 662  : 
; 663  : }                               // end SCProcessDmaDataBuffers()

  0004d	5d		 pop	 ebp
  0004e	c2 1c 00	 ret	 28			; 0000001cH
_SCProcessDmaDataBuffers@28 ENDP
PAGE	ENDS
PUBLIC	_SCProcessPioDataBuffers@28
EXTRN	__imp__MmMapLockedPagesSpecifyCache@24:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCProcessPioDataBuffers@28
PAGE	SEGMENT
_ret$ = -1						; size = 1
_FirstHeader$ = 8					; size = 4
_NumberOfHeaders$ = 12					; size = 4
_StreamObject$ = 16					; size = 4
_FirstMdl$ = 20						; size = 4
_StreamHeaderSize$ = 24					; size = 4
_pDataPtrArray$ = 28					; size = 4
_Write$ = 32						; size = 1
_SCProcessPioDataBuffers@28 PROC NEAR			; COMDAT

; 716  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 717  :     PKSSTREAM_HEADER CurrentHeader;
; 718  :     PMDL            CurrentMdl;
; 719  :     ULONG           i;
; 720  :     ULONG           DataBytes;
; 721  :     BOOLEAN         ret = FALSE;
; 722  : 
; 723  :     PAGED_CODE();
; 724  : 
; 725  :     //
; 726  :     // loop through each scatter/gather elements
; 727  :     //
; 728  : 
; 729  :     CurrentHeader = FirstHeader;
; 730  :     CurrentMdl = FirstMdl;
; 731  : 
; 732  :     for (i = 0; i < NumberOfHeaders; i++) {

  00005	33 db		 xor	 ebx, ebx
  00007	39 5d 0c	 cmp	 DWORD PTR _NumberOfHeaders$[ebp], ebx
  0000a	56		 push	 esi
  0000b	8b 75 14	 mov	 esi, DWORD PTR _FirstMdl$[ebp]
  0000e	c6 45 ff 00	 mov	 BYTE PTR _ret$[ebp], 0
  00012	76 4e		 jbe	 SHORT $L13222
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _FirstHeader$[ebp]
  00018	83 c7 28	 add	 edi, 40			; 00000028H
$L14819:

; 733  : 
; 734  :         //
; 735  :         // pick up the correct data buffer, based on the xfer direction
; 736  :         //
; 737  : 
; 738  :         if (Write) {

  0001b	80 7d 20 00	 cmp	 BYTE PTR _Write$[ebp], 0
  0001f	74 05		 je	 SHORT $L13223

; 739  : 
; 740  :             DataBytes = CurrentHeader->DataUsed;

  00021	8b 47 fc	 mov	 eax, DWORD PTR [edi-4]

; 741  : 
; 742  :         } else {                // if write

  00024	eb 03		 jmp	 SHORT $L13224
$L13223:

; 743  : 
; 744  :             DataBytes = CurrentHeader->FrameExtent;

  00026	8b 47 f8	 mov	 eax, DWORD PTR [edi-8]
$L13224:

; 745  : 
; 746  :         }                       // if write
; 747  : 
; 748  :         //
; 749  :         // if this header has data, process it.
; 750  :         //
; 751  : 
; 752  :         if (DataBytes) {

  00029	33 c9		 xor	 ecx, ecx
  0002b	3b c1		 cmp	 eax, ecx
  0002d	74 29		 je	 SHORT $L13225

; 753  :             //
; 754  :             // fill in the system virtual pointer
; 755  :             // to the buffer if mapping is
; 756  :             // needed
; 757  :             //
; 758  : 
; 759  :             #if (DBG)
; 760  :             if ( 0 !=  ( CurrentMdl->MdlFlags & (MDL_MAPPED_TO_SYSTEM_VA |
; 761  :                     MDL_SOURCE_IS_NONPAGED_POOL))) {
; 762  : 
; 763  :                 ASSERT(CurrentHeader->Data == (PVOID) ((ULONG_PTR) CurrentMdl->StartVa +
; 764  :                                                    CurrentMdl->ByteOffset));                
; 765  :             }
; 766  :             #endif
; 767  :             
; 768  :             DebugPrint((DebugLevelVerbose, "Saving: Index:%x, Ptr:%x\n",
; 769  :                 i, CurrentHeader->Data));
; 770  : 
; 771  :             ret = TRUE;
; 772  :             pDataPtrArray[i] = CurrentHeader->Data;

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
  00031	8b 55 1c	 mov	 edx, DWORD PTR _pDataPtrArray$[ebp]
  00034	89 04 9a	 mov	 DWORD PTR [edx+ebx*4], eax

; 773  :             CurrentHeader->Data = SCGetSystemAddressForMdl(CurrentMdl);

  00037	f6 46 06 05	 test	 BYTE PTR [esi+6], 5
  0003b	c6 45 ff 01	 mov	 BYTE PTR _ret$[ebp], 1
  0003f	74 05		 je	 SHORT $L14815
  00041	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00044	eb 0e		 jmp	 SHORT $L14816
$L14815:
  00046	6a 20		 push	 32			; 00000020H
  00048	51		 push	 ecx
  00049	51		 push	 ecx
  0004a	6a 01		 push	 1
  0004c	51		 push	 ecx
  0004d	56		 push	 esi
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmMapLockedPagesSpecifyCache@24
$L14816:
  00054	89 07		 mov	 DWORD PTR [edi], eax

; 774  : 
; 775  :             DebugPrint((DebugLevelVerbose, "'SCPio: buff = %x, length = %x\n",
; 776  :                         CurrentHeader->Data, DataBytes));
; 777  :            
; 778  :             CurrentMdl = CurrentMdl->Next;

  00056	8b 36		 mov	 esi, DWORD PTR [esi]
$L13225:

; 779  :         }
; 780  :         //
; 781  :         // offset to the next buffer
; 782  :         //
; 783  : 
; 784  :         CurrentHeader = ((PKSSTREAM_HEADER) ((PBYTE) CurrentHeader +
; 785  :                                              StreamHeaderSize));

  00058	03 7d 18	 add	 edi, DWORD PTR _StreamHeaderSize$[ebp]
  0005b	43		 inc	 ebx
  0005c	3b 5d 0c	 cmp	 ebx, DWORD PTR _NumberOfHeaders$[ebp]
  0005f	72 ba		 jb	 SHORT $L14819
  00061	5f		 pop	 edi
$L13222:

; 786  : 
; 787  :     }                           // for # elements
; 788  : 
; 789  :     return(ret);

  00062	8a 45 ff	 mov	 al, BYTE PTR _ret$[ebp]
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx

; 790  : }                               // end SCProcessPioDataBuffers()

  00067	c9		 leave
  00068	c2 1c 00	 ret	 28			; 0000001cH
_SCProcessPioDataBuffers@28 ENDP
PAGE	ENDS
PUBLIC	_SCStartMinidriverRequest@12
EXTRN	__imp_@KefAcquireSpinLockAtDpcLevel@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCStartMinidriverRequest@12
_TEXT	SEGMENT
_StreamObject$ = 8					; size = 4
tv138 = 12						; size = 4
_Request$ = 12						; size = 4
_EntryPoint$ = 16					; size = 4
_SCStartMinidriverRequest@12 PROC NEAR			; COMDAT

; 1064 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1065 :     PIRP            Irp = Request->HwSRB.Irp;
; 1066 :     PDEVICE_EXTENSION DeviceExtension =
; 1067 :     StreamObject->DeviceExtension;

  00003	8b 45 08	 mov	 eax, DWORD PTR _StreamObject$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b b0 14 01 00
	00		 mov	 esi, DWORD PTR [eax+276]
  0000e	57		 push	 edi
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR _Request$[ebp]
  00012	8b 5f 2c	 mov	 ebx, DWORD PTR [edi+44]

; 1068 : 
; 1069 :     //
; 1070 :     // show that the request is active.
; 1071 :     //
; 1072 : 
; 1073 :     Request->Flags |= SRB_FLAGS_IS_ACTIVE;

  00015	83 4f 4c 01	 or	 DWORD PTR [edi+76], 1

; 1074 : 
; 1075 :     //
; 1076 :     // place the request on the outstanding queue
; 1077 :     //
; 1078 : 
; 1079 :     KeAcquireSpinLockAtDpcLevel(&DeviceExtension->SpinLock);

  00019	8d 8e d8 00 00
	00		 lea	 ecx, DWORD PTR [esi+216]
  0001f	89 4d 0c	 mov	 DWORD PTR tv138[ebp], ecx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefAcquireSpinLockAtDpcLevel@4

; 1080 : 
; 1081 :     InsertHeadList(
; 1082 :                    &DeviceExtension->OutstandingQueue,
; 1083 :                    &Request->SRBListEntry);

  00028	8d 8e f8 00 00
	00		 lea	 ecx, DWORD PTR [esi+248]
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	8d 47 70	 lea	 eax, DWORD PTR [edi+112]
  00033	89 10		 mov	 DWORD PTR [eax], edx
  00035	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00038	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0003b	89 01		 mov	 DWORD PTR [ecx], eax

; 1084 : 
; 1085 :     //
; 1086 :     // set the cancel routine to outstanding
; 1087 :     //
; 1088 : 
; 1089 :     IoSetCancelRoutine(Irp, StreamClassCancelOutstandingIrp);

  0003d	8d 4b 38	 lea	 ecx, DWORD PTR [ebx+56]
  00040	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:_StreamClassCancelOutstandingIrp@8
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedExchange@8

; 1090 : 
; 1091 :     //
; 1092 :     // send down the request to the minidriver.  Protect the call with the
; 1093 :     // device spinlock to synchronize timers, etc.
; 1094 :     //
; 1095 : 
; 1096 : #if DBG
; 1097 :     if (DeviceExtension->NeedyStream) {
; 1098 : 
; 1099 :         ASSERT(DeviceExtension->NeedyStream->OnNeedyQueue);
; 1100 :     }
; 1101 : #endif
; 1102 : 
; 1103 :     DebugPrint((DebugLevelTrace, "'SCStartMinidriverRequeest: starting Irp %x, S# = %x, SRB = %x, Command = %x\n",
; 1104 :                 Request->HwSRB.Irp, StreamObject->HwStreamObject.StreamNumber, Request, Request->HwSRB.Command));
; 1105 : 
; 1106 : 
; 1107 :     DeviceExtension->SynchronizeExecution(
; 1108 :                                           DeviceExtension->InterruptObject,
; 1109 :                                           EntryPoint,
; 1110 :                                           &Request->HwSRB);

  0004b	57		 push	 edi
  0004c	ff 75 10	 push	 DWORD PTR _EntryPoint$[ebp]
  0004f	ff b6 ac 00 00
	00		 push	 DWORD PTR [esi+172]
  00055	ff 96 d4 00 00
	00		 call	 DWORD PTR [esi+212]

; 1111 : 
; 1112 : 
; 1113 : #if DBG
; 1114 :     if (DeviceExtension->NeedyStream) {
; 1115 : 
; 1116 :         ASSERT(DeviceExtension->NeedyStream->OnNeedyQueue);
; 1117 :     }
; 1118 : #endif
; 1119 : 
; 1120 :     KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR tv138[ebp]
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx

; 1121 : 
; 1122 :     return;
; 1123 : 
; 1124 : }                               // SCStartMinidriverRequest

  00067	5d		 pop	 ebp
  00068	c2 0c 00	 ret	 12			; 0000000cH
_SCStartMinidriverRequest@12 ENDP
_TEXT	ENDS
PUBLIC	_SCGetInterruptState@4
; Function compile flags: /Ogsy
;	COMDAT _SCGetInterruptState@4
_TEXT	SEGMENT
_ServiceContext$ = 8					; size = 4
_SCGetInterruptState@4 PROC NEAR			; COMDAT

; 1603 : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 1604 :     PINTERRUPT_CONTEXT interruptContext = ServiceContext;
; 1605 :     PDEVICE_EXTENSION DeviceExtension;
; 1606 :     PSTREAM_OBJECT  NeedyStream;
; 1607 :     BOOLEAN         Work = FALSE;
; 1608 : 
; 1609 :     DeviceExtension = interruptContext->DeviceExtension;

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR _ServiceContext$[esp+4]
  00006	8b 5d 04	 mov	 ebx, DWORD PTR [ebp+4]

; 1610 : 
; 1611 :     //
; 1612 :     // get the needy streams and zero the
; 1613 :     // link.
; 1614 :     //
; 1615 : 
; 1616 :     interruptContext->NeedyStream = NeedyStream = DeviceExtension->NeedyStream;

  00009	8b 93 30 01 00
	00		 mov	 edx, DWORD PTR [ebx+304]
  0000f	56		 push	 esi
  00010	32 c0		 xor	 al, al

; 1617 : 
; 1618 :     //
; 1619 :     // capture the state of needy stream
; 1620 :     //
; 1621 : 
; 1622 :     if (NeedyStream) {

  00012	85 d2		 test	 edx, edx
  00014	57		 push	 edi
  00015	89 55 00	 mov	 DWORD PTR [ebp], edx
  00018	74 2c		 je	 SHORT $L13390

; 1623 : 
; 1624 :         //
; 1625 :         // Move the interrupt state to save
; 1626 :         // area.
; 1627 :         //
; 1628 : 
; 1629 :         ASSERT(NeedyStream->NextNeedyStream != NeedyStream);
; 1630 :         ASSERT(NeedyStream->ComObj.InterruptData.Flags & INTERRUPT_FLAGS_NOTIFICATION_REQUIRED);
; 1631 :         ASSERT(NeedyStream->OnNeedyQueue);
; 1632 : 
; 1633 :         DebugPrint((DebugLevelVerbose, "'SCGetInterruptState: Snapshot for stream %p, S# = %x, NextNeedy = %p\n",
; 1634 :                     NeedyStream, NeedyStream->HwStreamObject.StreamNumber, NeedyStream->NextNeedyStream));
; 1635 : 
; 1636 :         NeedyStream->OnNeedyQueue = FALSE;

  0001a	88 82 56 01 00
	00		 mov	 BYTE PTR [edx+342], al

; 1637 : 
; 1638 :         *interruptContext->SavedStreamInterruptData =
; 1639 :             NeedyStream->ComObj.InterruptData;

  00020	8b 7d 08	 mov	 edi, DWORD PTR [ebp+8]
  00023	8d 42 08	 lea	 eax, DWORD PTR [edx+8]
  00026	6a 0d		 push	 13			; 0000000dH
  00028	8b f0		 mov	 esi, eax
  0002a	59		 pop	 ecx
  0002b	f3 a5		 rep movsd

; 1640 : 
; 1641 :         //
; 1642 :         // Clear the interrupt state.
; 1643 :         //
; 1644 : 
; 1645 :         NeedyStream->ComObj.InterruptData.Flags &= STREAM_FLAGS_INTERRUPT_FLAG_MASK;

  0002d	33 f6		 xor	 esi, esi

; 1646 :         NeedyStream->ComObj.InterruptData.CompletedSRB = NULL;
; 1647 : 
; 1648 :         Work = TRUE;
; 1649 : 
; 1650 :         DeviceExtension->NeedyStream = (PSTREAM_OBJECT) NeedyStream->NextNeedyStream;

  0002f	8d 8a 18 01 00
	00		 lea	 ecx, DWORD PTR [edx+280]
  00035	89 72 18	 mov	 DWORD PTR [edx+24], esi
  00038	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003a	89 30		 mov	 DWORD PTR [eax], esi
  0003c	89 93 30 01 00
	00		 mov	 DWORD PTR [ebx+304], edx
  00042	b0 01		 mov	 al, 1

; 1651 :         NeedyStream->NextNeedyStream = NULL;

  00044	89 31		 mov	 DWORD PTR [ecx], esi
$L13390:

; 1652 : 
; 1653 : #if DBG
; 1654 :         if (DeviceExtension->NeedyStream) {
; 1655 : 
; 1656 :             ASSERT(DeviceExtension->NeedyStream->OnNeedyQueue);
; 1657 :         }
; 1658 : #endif
; 1659 : 
; 1660 :     }                           // if NeedyStream
; 1661 :     //
; 1662 :     // now copy over the device interrupt
; 1663 :     // data if necessary
; 1664 :     //
; 1665 : 
; 1666 :     if (DeviceExtension->ComObj.InterruptData.Flags &
; 1667 :         INTERRUPT_FLAGS_NOTIFICATION_REQUIRED) {

  00046	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]
  00049	f6 02 01	 test	 BYTE PTR [edx], 1
  0004c	74 13		 je	 SHORT $L13397

; 1668 : 
; 1669 :         *interruptContext->SavedDeviceInterruptData =
; 1670 :             DeviceExtension->ComObj.InterruptData;

  0004e	8b 7d 0c	 mov	 edi, DWORD PTR [ebp+12]
  00051	6a 0d		 push	 13			; 0000000dH
  00053	59		 pop	 ecx
  00054	8b f2		 mov	 esi, edx
  00056	f3 a5		 rep movsd

; 1671 : 
; 1672 :         //
; 1673 :         // Clear the device interrupt state.
; 1674 :         //
; 1675 : 
; 1676 :         DeviceExtension->ComObj.InterruptData.Flags &=
; 1677 :             DEVICE_FLAGS_INTERRUPT_FLAG_MASK;

  00058	83 22 00	 and	 DWORD PTR [edx], 0

; 1678 : 
; 1679 :         DeviceExtension->ComObj.InterruptData.CompletedSRB = NULL;

  0005b	83 63 18 00	 and	 DWORD PTR [ebx+24], 0

; 1680 :         Work = TRUE;

  0005f	b0 01		 mov	 al, 1
$L13397:
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5d		 pop	 ebp
  00064	5b		 pop	 ebx

; 1681 :     }
; 1682 :     return (Work);
; 1683 : }

  00065	c2 04 00	 ret	 4
_SCGetInterruptState@4 ENDP
_TEXT	ENDS
PUBLIC	_SCDequeueAndDeleteSrb@4
EXTRN	__imp_@KfAcquireSpinLock@4:NEAR
EXTRN	__imp_@KfReleaseSpinLock@8:NEAR
EXTRN	__imp__IoFreeMdl@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCDequeueAndDeleteSrb@4
_TEXT	SEGMENT
_SRB$ = 8						; size = 4
_irql$ = 11						; size = 1
_SCDequeueAndDeleteSrb@4 PROC NEAR			; COMDAT

; 1740 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 1741 :     PDEVICE_EXTENSION DeviceExtension =
; 1742 :     (PDEVICE_EXTENSION) SRB->HwSRB.HwDeviceExtension - 1;

  00005	8b 75 08	 mov	 esi, DWORD PTR _SRB$[ebp]
  00008	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 1743 :     NTSTATUS        Status = SRB->HwSRB.Status;

  0000b	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  0000e	2d 24 02 00 00	 sub	 eax, 548		; 00000224H
  00013	57		 push	 edi

; 1744 :     KIRQL           irql;
; 1745 : 
; 1746 :     //
; 1747 :     // remove the SRB from our outstanding
; 1748 :     // queue.  protect list with
; 1749 :     // spinlock.
; 1750 :     //
; 1751 : 
; 1752 :     KeAcquireSpinLock(&DeviceExtension->SpinLock, &irql);

  00014	8d b8 d8 00 00
	00		 lea	 edi, DWORD PTR [eax+216]
  0001a	8b cf		 mov	 ecx, edi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4

; 1753 : 
; 1754 :     RemoveEntryList(&SRB->SRBListEntry);

  00022	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00025	88 45 0b	 mov	 BYTE PTR _irql$[ebp], al
  00028	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  0002b	89 01		 mov	 DWORD PTR [ecx], eax
  0002d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1755 : 
; 1756 :     if (SRB->HwSRB.Irp) {

  00030	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00033	85 c0		 test	 eax, eax
  00035	74 0b		 je	 SHORT $L13411

; 1757 : 
; 1758 :         IoSetCancelRoutine(SRB->HwSRB.Irp, NULL);

  00037	8d 48 38	 lea	 ecx, DWORD PTR [eax+56]
  0003a	33 d2		 xor	 edx, edx
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedExchange@8
$L13411:

; 1759 :     }
; 1760 :     KeReleaseSpinLock(&DeviceExtension->SpinLock, irql);

  00042	8a 55 0b	 mov	 dl, BYTE PTR _irql$[ebp]
  00045	8b cf		 mov	 ecx, edi
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8

; 1761 : 
; 1762 :     //
; 1763 :     // free the SRB and MDL
; 1764 :     //
; 1765 :     
; 1766 :     if ( !NT_SUCCESS( Status )) {
; 1767 :         DebugPrint((DebugLevelWarning, 
; 1768 :                    "SCDequeueAndDeleteSrb Command:%x Status=%x\n",
; 1769 :                    SRB->HwSRB.Command, 
; 1770 :                    Status ));
; 1771 :     }
; 1772 :     
; 1773 :     IoFreeMdl(SRB->Mdl);

  0004d	ff 76 58	 push	 DWORD PTR [esi+88]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoFreeMdl@4

; 1774 :     ExFreePool(SRB);

  00056	56		 push	 esi
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi

; 1775 :     return (Status);

  0005f	8b c3		 mov	 eax, ebx
  00061	5b		 pop	 ebx

; 1776 : }

  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
_SCDequeueAndDeleteSrb@4 ENDP
_TEXT	ENDS
PUBLIC	_SCLogError@16
EXTRN	__imp__IoAllocateErrorLogEntry@8:NEAR
EXTRN	__imp__IoWriteErrorLogEntry@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCLogError@16
PAGE	SEGMENT
_DeviceObject$ = 8					; size = 4
_SequenceNumber$ = 12					; size = 4
_ErrorCode$ = 16					; size = 4
_UniqueId$ = 20						; size = 4
_SCLogError@16 PROC NEAR				; COMDAT

; 2137 :     PIO_ERROR_LOG_PACKET packet;
; 2138 : 
; 2139 :     PAGED_CODE();
; 2140 :     packet = (PIO_ERROR_LOG_PACKET) IoAllocateErrorLogEntry(DeviceObject,
; 2141 :                                                sizeof(IO_ERROR_LOG_PACKET));

  00000	6a 30		 push	 48			; 00000030H
  00002	ff 74 24 08	 push	 DWORD PTR _DeviceObject$[esp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoAllocateErrorLogEntry@8

; 2142 : 
; 2143 :     if (packet) {

  0000c	33 c9		 xor	 ecx, ecx
  0000e	3b c1		 cmp	 eax, ecx
  00010	74 28		 je	 SHORT $L13506

; 2144 :         packet->ErrorCode = ErrorCode;

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR _ErrorCode$[esp-4]
  00016	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 2145 :         packet->SequenceNumber = SequenceNumber;

  00019	8b 54 24 08	 mov	 edx, DWORD PTR _SequenceNumber$[esp-4]
  0001d	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 2146 :         packet->MajorFunctionCode = 0;
; 2147 :         packet->RetryCount = (UCHAR) 0;
; 2148 :         packet->UniqueErrorValue = UniqueId;

  00020	8b 54 24 10	 mov	 edx, DWORD PTR _UniqueId$[esp-4]

; 2149 :         packet->FinalStatus = STATUS_SUCCESS;
; 2150 :         packet->DumpDataSize = 0;
; 2151 : 
; 2152 :         IoWriteErrorLogEntry(packet);

  00024	50		 push	 eax
  00025	88 08		 mov	 BYTE PTR [eax], cl
  00027	88 48 01	 mov	 BYTE PTR [eax+1], cl
  0002a	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0002d	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00030	66 89 48 02	 mov	 WORD PTR [eax+2], cx
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoWriteErrorLogEntry@4
$L13506:

; 2153 :     }
; 2154 : }

  0003a	c2 10 00	 ret	 16			; 00000010H
_SCLogError@16 ENDP
PAGE	ENDS
PUBLIC	_SCLogErrorWithString@20
; Function compile flags: /Ogsy
;	COMDAT _SCLogErrorWithString@20
PAGE	SEGMENT
_DeviceObject$ = 8					; size = 4
_DeviceExtension$ = 12					; size = 4
_ErrorCode$ = 16					; size = 4
_UniqueId$ = 20						; size = 4
_String1$ = 24						; size = 4
_SCLogErrorWithString@20 PROC NEAR			; COMDAT

; 2186 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 2187 :     ULONG           length;
; 2188 :     PCHAR           dumpData;
; 2189 :     PIO_ERROR_LOG_PACKET packet;
; 2190 : 
; 2191 :     PAGED_CODE();
; 2192 :     length = String1->Length + sizeof(IO_ERROR_LOG_PACKET) + 2;

  00005	8b 7d 18	 mov	 edi, DWORD PTR _String1$[ebp]
  00008	0f b7 37	 movzx	 esi, WORD PTR [edi]
  0000b	83 c6 32	 add	 esi, 50			; 00000032H

; 2193 :     if (length > ERROR_LOG_MAXIMUM_SIZE) {

  0000e	b8 98 00 00 00	 mov	 eax, 152		; 00000098H
  00013	3b f0		 cmp	 esi, eax
  00015	76 02		 jbe	 SHORT $L13533

; 2194 :         length = ERROR_LOG_MAXIMUM_SIZE;

  00017	8b f0		 mov	 esi, eax
$L13533:

; 2195 :     }
; 2196 :     packet = (PIO_ERROR_LOG_PACKET) IoAllocateErrorLogEntry(DeviceObject,
; 2197 :                                                             (UCHAR) length);

  00019	56		 push	 esi
  0001a	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoAllocateErrorLogEntry@8

; 2198 :     if (packet) {

  00023	85 c0		 test	 eax, eax
  00025	74 7a		 je	 SHORT $L13545

; 2199 :         packet->ErrorCode = ErrorCode;

  00027	8b 4d 10	 mov	 ecx, DWORD PTR _ErrorCode$[ebp]
  0002a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 2200 :         packet->SequenceNumber = (DeviceExtension != NULL) ?
; 2201 :             DeviceExtension->SequenceNumber++ : 0;

  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _DeviceExtension$[ebp]
  00030	85 c9		 test	 ecx, ecx
  00032	53		 push	 ebx
  00033	74 0f		 je	 SHORT $L14844
  00035	8d 91 dc 00 00
	00		 lea	 edx, DWORD PTR [ecx+220]
  0003b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003d	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
  00040	89 1a		 mov	 DWORD PTR [edx], ebx
  00042	eb 02		 jmp	 SHORT $L14845
$L14844:
  00044	33 c9		 xor	 ecx, ecx
$L14845:

; 2202 :         packet->MajorFunctionCode = 0;
; 2203 :         packet->RetryCount = (UCHAR) 0;
; 2204 :         packet->UniqueErrorValue = UniqueId;

  00046	8b 55 14	 mov	 edx, DWORD PTR _UniqueId$[ebp]
  00049	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0004c	33 c9		 xor	 ecx, ecx
  0004e	88 08		 mov	 BYTE PTR [eax], cl
  00050	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 2205 :         packet->FinalStatus = STATUS_SUCCESS;

  00053	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00056	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 2206 :         packet->NumberOfStrings = 1;
; 2207 :         packet->StringOffset = (USHORT) ((PUCHAR) & packet->DumpData[0] - (PUCHAR) packet);
; 2208 :         packet->DumpDataSize = (USHORT) (length - sizeof(IO_ERROR_LOG_PACKET));

  00059	66 83 ee 30	 sub	 si, 48			; 00000030H
  0005d	66 c7 40 04 01
	00		 mov	 WORD PTR [eax+4], 1
  00063	66 c7 40 06 28
	00		 mov	 WORD PTR [eax+6], 40	; 00000028H

; 2209 :         packet->DumpDataSize /= sizeof(ULONG);

  00069	66 c1 ee 02	 shr	 si, 2
  0006d	66 89 70 02	 mov	 WORD PTR [eax+2], si

; 2210 :         dumpData = (PUCHAR) & packet->DumpData[0];
; 2211 : 
; 2212 :         RtlCopyMemory(dumpData, String1->Buffer, String1->Length);

  00071	0f b7 0f	 movzx	 ecx, WORD PTR [edi]
  00074	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00077	8b d9		 mov	 ebx, ecx
  00079	c1 e9 02	 shr	 ecx, 2
  0007c	8d 50 28	 lea	 edx, DWORD PTR [eax+40]
  0007f	8b fa		 mov	 edi, edx
  00081	f3 a5		 rep movsd
  00083	8b cb		 mov	 ecx, ebx
  00085	83 e1 03	 and	 ecx, 3
  00088	f3 a4		 rep movsb

; 2213 :         dumpData += String1->Length;

  0008a	8b 4d 18	 mov	 ecx, DWORD PTR _String1$[ebp]
  0008d	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00090	03 d1		 add	 edx, ecx

; 2214 :         *dumpData++ = '\0';

  00092	c6 02 00	 mov	 BYTE PTR [edx], 0

; 2215 :         *dumpData++ = '\0';
; 2216 : 
; 2217 : 
; 2218 :         IoWriteErrorLogEntry(packet);

  00095	50		 push	 eax
  00096	c6 42 01 00	 mov	 BYTE PTR [edx+1], 0
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoWriteErrorLogEntry@4
  000a0	5b		 pop	 ebx
$L13545:
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi

; 2219 :     }
; 2220 :     return;
; 2221 : }

  000a3	5d		 pop	 ebp
  000a4	c2 14 00	 ret	 20			; 00000014H
_SCLogErrorWithString@20 ENDP
PAGE	ENDS
PUBLIC	_StreamClassSynchronizeExecution@12
; Function compile flags: /Ogsy
;	COMDAT _StreamClassSynchronizeExecution@12
_TEXT	SEGMENT
_Interrupt$ = 8						; size = 4
_SynchronizeRoutine$ = 12				; size = 4
_SynchronizeContext$ = 16				; size = 4
_StreamClassSynchronizeExecution@12 PROC NEAR		; COMDAT

; 2257 :     PDEVICE_EXTENSION deviceExtension = (PDEVICE_EXTENSION) Interrupt;
; 2258 :     BOOLEAN         returnValue;
; 2259 : 
; 2260 : #if DBG
; 2261 :     ULONGLONG       ticks;
; 2262 :     ULONGLONG       rate;
; 2263 :     ULONGLONG       StartTime,
; 2264 :                     EndTime;
; 2265 : 
; 2266 :     ticks = (ULONGLONG) KeQueryPerformanceCounter((PLARGE_INTEGER) & rate).QuadPart;
; 2267 : 
; 2268 :     StartTime = ticks * 10000 / rate;
; 2269 : #endif
; 2270 : 
; 2271 :     returnValue = SynchronizeRoutine(SynchronizeContext);

  00000	ff 74 24 0c	 push	 DWORD PTR _SynchronizeContext$[esp-4]
  00004	ff 54 24 0c	 call	 DWORD PTR _SynchronizeRoutine$[esp]

; 2272 : 
; 2273 : #if DBG
; 2274 :     ticks = (ULONGLONG) KeQueryPerformanceCounter((PLARGE_INTEGER) & rate).QuadPart;
; 2275 : 
; 2276 :     EndTime = ticks * 10000 / rate;
; 2277 : 
; 2278 :     DebugPrint((DebugLevelVerbose, "'SCDebugSync: minidriver took %d microseconds at dispatch level.\n",
; 2279 :                 (EndTime - StartTime) * 10));
; 2280 : 
; 2281 :     if ((EndTime - StartTime) > 100) {
; 2282 : 
; 2283 :         DebugPrint((DebugLevelFatal, "Stream Class: minidriver took %I64d millisecond(s) at "
; 2284 :                     "dispatch level.   See dev owner.  Type LN %p for the name of the minidriver\n",
; 2285 :                     (EndTime - StartTime) / 100, SynchronizeRoutine));
; 2286 :     }
; 2287 : #endif
; 2288 : 
; 2289 :     return (returnValue);
; 2290 : }

  00008	c2 0c 00	 ret	 12			; 0000000cH
_StreamClassSynchronizeExecution@12 ENDP
_TEXT	ENDS
PUBLIC	_SCCompleteIrp@12
EXTRN	__imp__KeSetEvent@12:NEAR
EXTRN	__imp_@IofCompleteRequest@8:NEAR
EXTRN	__imp__IoFreeIrp@4:NEAR
EXTRN	__imp_@InterlockedDecrement@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCCompleteIrp@12
_TEXT	SEGMENT
_Irp$ = 8						; size = 4
_Status$ = 12						; size = 4
_DeviceExtension$ = 16					; size = 4
_SCCompleteIrp@12 PROC NEAR				; COMDAT

; 2375 : 
; 2376 : 	#if DBG
; 2377 :     PMDL            CurrentMdl;
; 2378 : 	#endif
; 2379 : 
; 2380 :     if (Irp) {

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _Irp$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR _Status$[esp+4]
  0000c	74 21		 je	 SHORT $L13575

; 2381 :         Irp->IoStatus.Status = Status;
; 2382 : 
; 2383 : 		#if DBG
; 2384 : 
; 2385 :         //
; 2386 :         // random asserts follow...
; 2387 :         // make sure we have not freed the system buffer.
; 2388 :         //
; 2389 : 
; 2390 : 
; 2391 :         if (Irp->AssociatedIrp.SystemBuffer) {
; 2392 : 
; 2393 :             DebugPrint((DebugLevelVerbose, "'SCComplete: Irp = %p, sys buffer = %p\n",
; 2394 :                         Irp, Irp->AssociatedIrp.SystemBuffer));
; 2395 :         }
; 2396 :         //
; 2397 :         // assert the MDL list.
; 2398 :         //
; 2399 : 
; 2400 :         CurrentMdl = Irp->MdlAddress;
; 2401 : 
; 2402 :         while (CurrentMdl) {
; 2403 : 
; 2404 :             CurrentMdl = CurrentMdl->Next;
; 2405 :         }                       // while
; 2406 : 		#endif
; 2407 : 		
; 2408 :         if ( Irp->CurrentLocation < Irp->StackCount+1 ) {

  0000e	0f be 41 22	 movsx	 eax, BYTE PTR [ecx+34]
  00012	0f be 51 23	 movsx	 edx, BYTE PTR [ecx+35]
  00016	40		 inc	 eax
  00017	3b d0		 cmp	 edx, eax
  00019	89 79 18	 mov	 DWORD PTR [ecx+24], edi
  0001c	7d 0a		 jge	 SHORT $L13574

; 2409 :         
; 2410 :             IoCompleteRequest(Irp, IO_NO_INCREMENT);

  0001e	32 d2		 xor	 dl, dl
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8

; 2411 :             
; 2412 :         } else {

  00026	eb 07		 jmp	 SHORT $L13575
$L13574:

; 2413 :             //
; 2414 :             // we got a dummy Irp we created. IoVerifier code will pews if
; 2415 :             // we call IoCompleteRequest because the Current Stack location
; 2416 :             // is at the end of last stack location. We can't use 
; 2417 :             // IoBuildIoControlRequest to create the Irp becuase it will
; 2418 :             // be added to a thread and the only way to get it off is to
; 2419 :             // call IoCompleteRequest.
; 2420 :             //
; 2421 :             IoFreeIrp( Irp );

  00028	51		 push	 ecx
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoFreeIrp@4
$L13575:

; 2422 :         }  
; 2423 :     }
; 2424 :     
; 2425 :     if (!(InterlockedDecrement(&DeviceExtension->OneBasedIoCount))) {

  0002f	8b 74 24 14	 mov	 esi, DWORD PTR _DeviceExtension$[esp+4]
  00033	8d 8e 6c 01 00
	00		 lea	 ecx, DWORD PTR [esi+364]
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedDecrement@4
  0003f	85 c0		 test	 eax, eax
  00041	75 0f		 jne	 SHORT $L13576

; 2426 : 
; 2427 :         //
; 2428 :         // the device is being removed and all I/O is complete.  Signal the
; 2429 :         // removal thread to wake up.
; 2430 :         //
; 2431 : 
; 2432 :         KeSetEvent(&DeviceExtension->RemoveEvent, IO_NO_INCREMENT, FALSE);

  00043	50		 push	 eax
  00044	50		 push	 eax
  00045	81 c6 48 01 00
	00		 add	 esi, 328		; 00000148H
  0004b	56		 push	 esi
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetEvent@12
$L13576:

; 2433 :     }
; 2434 :     ASSERT(DeviceExtension->OneBasedIoCount >= 0);
; 2435 :     return (Status);

  00052	8b c7		 mov	 eax, edi
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi

; 2436 : }

  00056	c2 0c 00	 ret	 12			; 0000000cH
_SCCompleteIrp@12 ENDP
_TEXT	ENDS
PUBLIC	_SCDummyMinidriverRoutine@4
; Function compile flags: /Ogsy
;	COMDAT _SCDummyMinidriverRoutine@4
_TEXT	SEGMENT
_Context$ = 8						; size = 4
_SCDummyMinidriverRoutine@4 PROC NEAR			; COMDAT

; 2460 : 
; 2461 :     return (TRUE);

  00000	b0 01		 mov	 al, 1

; 2462 : }

  00002	c2 04 00	 ret	 4
_SCDummyMinidriverRoutine@4 ENDP
_TEXT	ENDS
PUBLIC	_SCSignalSRBEvent@4
; Function compile flags: /Ogsy
;	COMDAT _SCSignalSRBEvent@4
_TEXT	SEGMENT
_Srb$ = 8						; size = 4
_SCSignalSRBEvent@4 PROC NEAR				; COMDAT

; 2874 : 
; 2875 :     KeSetEvent(&Srb->Event, IO_NO_INCREMENT, FALSE);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _Srb$[esp-4]
  00004	6a 00		 push	 0
  00006	6a 00		 push	 0
  00008	83 c0 78	 add	 eax, 120		; 00000078H
  0000b	50		 push	 eax
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetEvent@12

; 2876 :     return;
; 2877 : }

  00012	c2 04 00	 ret	 4
_SCSignalSRBEvent@4 ENDP
_TEXT	ENDS
PUBLIC	_SCErrorDataSRB@4
EXTRN	_StreamClassStreamNotification:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCErrorDataSRB@4
_TEXT	SEGMENT
_SRB$ = 8						; size = 4
_SCErrorDataSRB@4 PROC NEAR				; COMDAT

; 3172 : {

  00000	56		 push	 esi

; 3173 : 
; 3174 :     //
; 3175 :     // just call the SRB back with error
; 3176 :     //
; 3177 : 
; 3178 :     SRB->Status = STATUS_NOT_SUPPORTED;

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _SRB$[esp]

; 3179 :     StreamClassStreamNotification(StreamRequestComplete,
; 3180 :                                   SRB->StreamObject);

  00005	ff 76 0c	 push	 DWORD PTR [esi+12]
  00008	c7 46 08 bb 00
	00 c0		 mov	 DWORD PTR [esi+8], -1073741637 ; c00000bbH
  0000f	6a 03		 push	 3
  00011	e8 00 00 00 00	 call	 _StreamClassStreamNotification

; 3181 :     StreamClassStreamNotification(ReadyForNextStreamDataRequest,
; 3182 :                                   SRB->StreamObject);

  00016	ff 76 0c	 push	 DWORD PTR [esi+12]
  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 _StreamClassStreamNotification
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	5e		 pop	 esi

; 3183 : }                               // SCErrorDataSRB

  00024	c2 04 00	 ret	 4
_SCErrorDataSRB@4 ENDP
_TEXT	ENDS
PUBLIC	_SCCheckRequestsForIrp@16
EXTRN	__imp__IoCancelIrp@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCCheckRequestsForIrp@16
_TEXT	SEGMENT
_ListEntry$ = 8						; size = 4
_Irp$ = 12						; size = 4
_IsIrpQueue$ = 16					; size = 1
_DeviceExtension$ = 20					; size = 4
_SCCheckRequestsForIrp@16 PROC NEAR			; COMDAT

; 3428 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3429 : 
; 3430 :     PLIST_ENTRY     IrpEntry = ListEntry;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _ListEntry$[ebp]

; 3431 :     PIRP            CurrentIrp;
; 3432 : 
; 3433 :     while (IrpEntry->Flink != ListEntry) {

  00006	39 09		 cmp	 DWORD PTR [ecx], ecx
  00008	56		 push	 esi
  00009	8b c1		 mov	 eax, ecx
  0000b	74 22		 je	 SHORT $L13832
  0000d	33 d2		 xor	 edx, edx
$L13831:

; 3434 : 
; 3435 :         IrpEntry = IrpEntry->Flink;
; 3436 : 
; 3437 :         ASSERT(IrpEntry);
; 3438 :         ASSERT(IrpEntry->Flink);
; 3439 :         ASSERT(IrpEntry->Blink);
; 3440 : 
; 3441 :         //
; 3442 :         // follow the link to the IRP
; 3443 :         //
; 3444 : 
; 3445 :         if (IsIrpQueue) {

  0000f	38 55 10	 cmp	 BYTE PTR _IsIrpQueue$[ebp], dl
  00012	8b 00		 mov	 eax, DWORD PTR [eax]

; 3446 : 
; 3447 :             CurrentIrp = CONTAINING_RECORD(IrpEntry,
; 3448 :                                            IRP,
; 3449 :                                            Tail.Overlay.ListEntry);

  00014	8d 70 a8	 lea	 esi, DWORD PTR [eax-88]
  00017	75 03		 jne	 SHORT $L13841

; 3450 :         } else {
; 3451 : 
; 3452 :             CurrentIrp = ((PSTREAM_REQUEST_BLOCK) (CONTAINING_RECORD(IrpEntry,
; 3453 :                                                        STREAM_REQUEST_BLOCK,
; 3454 :                                                  SRBListEntry)))->HwSRB.Irp;

  00019	8b 70 bc	 mov	 esi, DWORD PTR [eax-68]
$L13841:

; 3455 :         }
; 3456 : 
; 3457 :         //
; 3458 :         // this routine is used to cancel irp's if IRP is null.
; 3459 :         //
; 3460 : 
; 3461 :         if ((!Irp) && (!CurrentIrp->Cancel)) {

  0001c	39 55 0c	 cmp	 DWORD PTR _Irp$[ebp], edx
  0001f	75 05		 jne	 SHORT $L13847
  00021	38 56 24	 cmp	 BYTE PTR [esi+36], dl
  00024	74 10		 je	 SHORT $L14864
$L13847:

; 3495 :         }
; 3496 :         if (Irp == CurrentIrp) {

  00026	39 75 0c	 cmp	 DWORD PTR _Irp$[ebp], esi
  00029	74 31		 je	 SHORT $L14865

; 3431 :     PIRP            CurrentIrp;
; 3432 : 
; 3433 :     while (IrpEntry->Flink != ListEntry) {

  0002b	39 08		 cmp	 DWORD PTR [eax], ecx
  0002d	75 e0		 jne	 SHORT $L13831
$L13832:

; 3499 :         }
; 3500 :     }                           // while list entry
; 3501 : 
; 3502 :     return (FALSE);

  0002f	32 c0		 xor	 al, al
$L13827:
  00031	5e		 pop	 esi

; 3503 : 
; 3504 : }                               // SCCheckRequestsForIrp

  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
$L14864:
  00036	57		 push	 edi

; 3462 : 
; 3463 :             //
; 3464 :             // The IRP has not been previously cancelled, so cancel it after
; 3465 :             // releasing the spinlock to avoid deadlock with the cancel
; 3466 :             // routine.
; 3467 :             //
; 3468 : 
; 3469 :             KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  00037	8b 7d 14	 mov	 edi, DWORD PTR _DeviceExtension$[ebp]
  0003a	81 c7 d8 00 00
	00		 add	 edi, 216		; 000000d8H
  00040	8b cf		 mov	 ecx, edi
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4

; 3470 : 
; 3471 :             //
; 3472 :             // This code is suspicious that the CurrentIrp is not protected, i.e.
; 3473 :             // it could be processed and freed from other thread. However, we
; 3474 :             // are not never called with (!Irp). Therefore, we should never
; 3475 :             // come in executing this piece of code. here is the analysis.
; 3476 :             // 1. We are called from
; 3477 :             //      a. SCCheckFilterInstanceStreamIrp()
; 3478 :             //      b. SCCancelOutstandingIrp()
; 3479 :             //      c. StreamClassCancelPendingIrp()
; 3480 :             // 2. Further inspection shows that a. SCCheckFilterInstanceStreamForIrp() is
; 3481 :             //    only called by StreamClassCancelPendingIrp() which always has non-null Irp.
; 3482 :             // 3. SCCancelOutstandingIrp() is called by
; 3483 :             //      a. StreamClassCancelPendingIrp() which always has non-NULL irp.
; 3484 :             //      b. StreamClassCancelOutstandingIrp() which always has non-NULL irp.
; 3485 :             // The concusion is that we are never called with null irp. Therefore, this
; 3486 :             // piece code is never executed. But this driver has been thru win2k extenteded
; 3487 :             // test cycle. I rather be conservative. Add an Assertion instead of removing
; 3488 :             // the code for now.
; 3489 :             //
; 3490 :             ASSERT( 0 );
; 3491 :             IoCancelIrp(CurrentIrp);

  00048	56		 push	 esi
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoCancelIrp@4

; 3492 : 
; 3493 :             KeAcquireSpinLockAtDpcLevel(&DeviceExtension->SpinLock);

  0004f	8b cf		 mov	 ecx, edi
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefAcquireSpinLockAtDpcLevel@4

; 3494 :             return (TRUE);

  00057	b0 01		 mov	 al, 1
  00059	5f		 pop	 edi
  0005a	eb d5		 jmp	 SHORT $L13827
$L14865:

; 3497 : 
; 3498 :             return (TRUE);

  0005c	b0 01		 mov	 al, 1
  0005e	eb d1		 jmp	 SHORT $L13827
_SCCheckRequestsForIrp@16 ENDP
_TEXT	ENDS
PUBLIC	_SCNotifyMinidriverCancel@4
; Function compile flags: /Ogsy
;	COMDAT _SCNotifyMinidriverCancel@4
_TEXT	SEGMENT
_SRB$ = 8						; size = 4
_SCNotifyMinidriverCancel@4 PROC NEAR			; COMDAT

; 3527 :     PDEVICE_EXTENSION DeviceExtension =
; 3528 :     (PDEVICE_EXTENSION) SRB->HwSRB.HwDeviceExtension - 1;
; 3529 : 
; 3530 :     //
; 3531 :     // if the active flag is still set in the SRB, the minidriver still
; 3532 :     // has it so call him to abort it.
; 3533 :     //
; 3534 : 
; 3535 :     if (SRB->Flags & SRB_FLAGS_IS_ACTIVE) {

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _SRB$[esp-4]
  00004	f6 40 4c 01	 test	 BYTE PTR [eax+76], 1
  00008	74 0d		 je	 SHORT $L13855

; 3536 : 
; 3537 :         //
; 3538 :         // call the minidriver with the SRB.
; 3539 :         //
; 3540 : 
; 3541 :         (DeviceExtension->MinidriverData->HwInitData.HwCancelPacket)
; 3542 :             (&SRB->HwSRB);

  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	8b 89 9c fe ff
	ff		 mov	 ecx, DWORD PTR [ecx-356]
  00013	50		 push	 eax
  00014	ff 51 0c	 call	 DWORD PTR [ecx+12]
$L13855:

; 3543 :     }
; 3544 :     return;
; 3545 : }

  00017	c2 04 00	 ret	 4
_SCNotifyMinidriverCancel@4 ENDP
_TEXT	ENDS
PUBLIC	_SCCancelOutstandingIrp@8
; Function compile flags: /Ogsy
;	COMDAT _SCCancelOutstandingIrp@8
_TEXT	SEGMENT
_DeviceExtension$ = 8					; size = 4
_Irp$ = 12						; size = 4
_SCCancelOutstandingIrp@8 PROC NEAR			; COMDAT

; 3569 : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	57		 push	 edi

; 3570 :     PSTREAM_REQUEST_BLOCK Srb;
; 3571 : 
; 3572 :     //
; 3573 :     // just return if the request is not on
; 3574 :     // our queue.
; 3575 :     //
; 3576 : 
; 3577 :     if ((!IsListEmpty(&DeviceExtension->OutstandingQueue)) &&
; 3578 :         (SCCheckRequestsForIrp(
; 3579 :         &DeviceExtension->OutstandingQueue, Irp, FALSE, DeviceExtension))) {

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR _DeviceExtension$[esp+8]
  00007	8d 87 f8 00 00
	00		 lea	 eax, DWORD PTR [edi+248]
  0000d	39 00		 cmp	 DWORD PTR [eax], eax
  0000f	74 7e		 je	 SHORT $L13866
  00011	56		 push	 esi
  00012	8b 74 24 18	 mov	 esi, DWORD PTR _Irp$[esp+12]
  00016	57		 push	 edi
  00017	6a 00		 push	 0
  00019	56		 push	 esi
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _SCCheckRequestsForIrp@16
  00020	84 c0		 test	 al, al
  00022	74 6a		 je	 SHORT $L14871

; 3580 : 
; 3581 :         //
; 3582 :         // the request is sitting on our
; 3583 :         // outstanding queue.  call the
; 3584 :         // minidriver
; 3585 :         // via a synchronize routine to
; 3586 :         // cancel it.
; 3587 :         //
; 3588 : 
; 3589 :         Srb = Irp->Tail.Overlay.DriverContext[0];
; 3590 : 
; 3591 : #if DBG
; 3592 :         if (Srb->HwSRB.StreamObject) {
; 3593 : 
; 3594 :             DebugPrint((DebugLevelWarning, "'SCCancelOutstanding: canceling, Irp = %x, Srb = %x, S# = %x\n",
; 3595 :                         Irp, Srb, Srb->HwSRB.StreamObject->StreamNumber));
; 3596 : 
; 3597 :         } else {
; 3598 : 
; 3599 :             DebugPrint((DebugLevelWarning, "'SCCancelOutstanding: canceling nonstream, Irp = %x\n",
; 3600 :                         Irp));
; 3601 :         }                       // if SO
; 3602 : 
; 3603 : #endif
; 3604 : 
; 3605 :         if (DeviceExtension->NoSync) {

  00024	80 bf 58 01 00
	00 00		 cmp	 BYTE PTR [edi+344], 0
  0002b	8b 76 40	 mov	 esi, DWORD PTR [esi+64]
  0002e	74 4c		 je	 SHORT $L13863

; 3606 : 
; 3607 :             //
; 3608 :             // we need to ensure that the SRB memory is valid for the async
; 3609 :             // minidriver, EVEN if it happens to call back the request just
; 3610 :             // before we call it to cancel it!   This is done for two
; 3611 :             // reasons:
; 3612 :             // it obviates the need for the minidriver to walk its request
; 3613 :             // queues to find the request, and I failed to pass the dev ext
; 3614 :             // pointer to the minidriver in the below call, which means that
; 3615 :             // the SRB HAS to be valid, and it's too late to change the API.
; 3616 :             //
; 3617 :             // Oh, well.   Spinlock is now taken (by caller).
; 3618 :             //
; 3619 : 
; 3620 :             if (!(Srb->Flags & SRB_FLAGS_IS_ACTIVE)) {

  00030	f6 46 4c 01	 test	 BYTE PTR [esi+76], 1
  00034	74 58		 je	 SHORT $L14871

; 3621 :                 return;
; 3622 :             }
; 3623 :             Srb->DoNotCallBack = TRUE;
; 3624 : 
; 3625 :             //
; 3626 :             // release the spinlock temporarily since we need to call the
; 3627 :             // minidriver.   The caller won't be affected by this.
; 3628 :             //
; 3629 : 
; 3630 :             KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  00036	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4
  0003c	8d af d8 00 00
	00		 lea	 ebp, DWORD PTR [edi+216]
  00042	8b cd		 mov	 ecx, ebp
  00044	c6 86 8c 00 00
	00 01		 mov	 BYTE PTR [esi+140], 1
  0004b	ff d3		 call	 ebx

; 3631 : 
; 3632 :             (DeviceExtension->MinidriverData->HwInitData.HwCancelPacket)
; 3633 :                 (&Srb->HwSRB);

  0004d	8b 87 c0 00 00
	00		 mov	 eax, DWORD PTR [edi+192]
  00053	56		 push	 esi
  00054	ff 50 0c	 call	 DWORD PTR [eax+12]

; 3634 : 
; 3635 :             //
; 3636 :             // reacquire the spinlock since the caller will release it
; 3637 :             //
; 3638 : 
; 3639 :             KeAcquireSpinLockAtDpcLevel(&DeviceExtension->SpinLock);

  00057	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_@KefAcquireSpinLockAtDpcLevel@4
  0005d	8b cd		 mov	 ecx, ebp
  0005f	ff d7		 call	 edi

; 3640 : 
; 3641 :             Srb->DoNotCallBack = FALSE;
; 3642 : 
; 3643 :             //
; 3644 :             // if the ACTIVE flag is now clear, it indicates that the
; 3645 :             // SRB was completed during the above call into the minidriver.
; 3646 :             // since we blocked the internal completion of the request,
; 3647 :             // we must call it back ourselves in this case.
; 3648 :             //
; 3649 : 
; 3650 :             if (!(Srb->Flags & SRB_FLAGS_IS_ACTIVE)) {

  00061	f6 46 4c 01	 test	 BYTE PTR [esi+76], 1
  00065	c6 86 8c 00 00
	00 00		 mov	 BYTE PTR [esi+140], 0
  0006c	75 20		 jne	 SHORT $L14871

; 3651 : 
; 3652 :                 KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  0006e	8b cd		 mov	 ecx, ebp
  00070	ff d3		 call	 ebx

; 3653 : 
; 3654 :                 (Srb->Callback) (Srb);

  00072	56		 push	 esi
  00073	ff 56 6c	 call	 DWORD PTR [esi+108]

; 3655 : 
; 3656 :                 KeAcquireSpinLockAtDpcLevel(&DeviceExtension->SpinLock);

  00076	8b cd		 mov	 ecx, ebp
  00078	ff d7		 call	 edi

; 3657 :             }                   // if ! active
; 3658 :         } else {

  0007a	eb 12		 jmp	 SHORT $L14871
$L13863:

; 3659 : 
; 3660 :             DeviceExtension->SynchronizeExecution(
; 3661 :                                            DeviceExtension->InterruptObject,
; 3662 :                                            (PVOID) SCNotifyMinidriverCancel,
; 3663 :                                                   Srb);

  0007c	56		 push	 esi
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:_SCNotifyMinidriverCancel@4
  00082	ff b7 ac 00 00
	00		 push	 DWORD PTR [edi+172]
  00088	ff 97 d4 00 00
	00		 call	 DWORD PTR [edi+212]
$L14871:
  0008e	5e		 pop	 esi
$L13866:
  0008f	5f		 pop	 edi
  00090	5d		 pop	 ebp
  00091	5b		 pop	 ebx

; 3664 :         }                       // if nosync
; 3665 : 
; 3666 :     }                           // if on our queue
; 3667 :     return;
; 3668 : }

  00092	c2 08 00	 ret	 8
_SCCancelOutstandingIrp@8 ENDP
_TEXT	ENDS
PUBLIC	_SCProcessCompletedPropertyRequest@4
; Function compile flags: /Ogsy
;	COMDAT _SCProcessCompletedPropertyRequest@4
PAGE	SEGMENT
_SRB$ = 8						; size = 4
_SCProcessCompletedPropertyRequest@4 PROC NEAR		; COMDAT

; 3881 : {

  00000	56		 push	 esi

; 3882 :     PAGED_CODE();
; 3883 : 
; 3884 :     //
; 3885 :     // free the prop info structure and
; 3886 :     // complete the request
; 3887 :     //
; 3888 : 
; 3889 :     ExFreePool(SRB->HwSRB.CommandData.PropertyInfo);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _SRB$[esp]
  00005	ff 76 18	 push	 DWORD PTR [esi+24]
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4

; 3890 : 
; 3891 :     //
; 3892 :     // set the information field from the SRB
; 3893 :     // transferlength field
; 3894 :     //
; 3895 : 
; 3896 :     SRB->HwSRB.Irp->IoStatus.Information = SRB->HwSRB.ActualBytesTransferred;

  0000e	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00011	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]

; 3897 : 
; 3898 :     return (SCDequeueAndDeleteSrb(SRB));

  00014	56		 push	 esi
  00015	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00018	e8 00 00 00 00	 call	 _SCDequeueAndDeleteSrb@4
  0001d	5e		 pop	 esi

; 3899 : 
; 3900 : }

  0001e	c2 04 00	 ret	 4
_SCProcessCompletedPropertyRequest@4 ENDP
PAGE	ENDS
PUBLIC	_SCUpdateMinidriverProperties@12
EXTRN	_StreamClassMinidriverDeviceGetProperty@12:NEAR
EXTRN	_StreamClassMinidriverDeviceSetProperty@12:NEAR
EXTRN	_StreamClassMinidriverStreamGetProperty@12:NEAR
EXTRN	_StreamClassMinidriverStreamSetProperty@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCUpdateMinidriverProperties@12
PAGE	SEGMENT
tv269 = 8						; size = 4
_NumProps$ = 8						; size = 4
_MinidriverProps$ = 12					; size = 4
_Stream$ = 16						; size = 1
_SCUpdateMinidriverProperties@12 PROC NEAR		; COMDAT

; 3926 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3927 :     PKSPROPERTY_ITEM CurrentPropId;
; 3928 :     PKSPROPERTY_SET CurrentProp;
; 3929 :     ULONG           i,
; 3930 :                     j;
; 3931 : 
; 3932 :     PAGED_CODE();
; 3933 : 
; 3934 :     //
; 3935 :     // walk the minidriver's property info to fill in the dispatch
; 3936 :     // vectors as appropriate.
; 3937 :     //
; 3938 : 
; 3939 :     CurrentProp = MinidriverProps;
; 3940 : 
; 3941 :     for (i = 0; i < NumProps; i++) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _NumProps$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	76 74		 jbe	 SHORT $L13937
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _MinidriverProps$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	83 c1 04	 add	 ecx, 4
  00012	89 45 08	 mov	 DWORD PTR tv269[ebp], eax
  00015	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:_StreamClassMinidriverStreamGetProperty@12
  0001a	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:_StreamClassMinidriverDeviceGetProperty@12
$L14883:

; 3942 : 
; 3943 :         CurrentPropId = (PKSPROPERTY_ITEM) CurrentProp->PropertyItem;

  0001f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 3944 : 
; 3945 :         for (j = 0; j < CurrentProp->PropertiesCount; j++) {

  00022	33 f6		 xor	 esi, esi
  00024	39 31		 cmp	 DWORD PTR [ecx], esi
  00026	76 4c		 jbe	 SHORT $L13941

; 3942 : 
; 3943 :         CurrentPropId = (PKSPROPERTY_ITEM) CurrentProp->PropertyItem;

  00028	83 c0 04	 add	 eax, 4
$L14882:

; 3946 : 
; 3947 :             //
; 3948 :             // if support handler is supported, send it to the "get" handler
; 3949 :             //
; 3950 : 
; 3951 :             if (CurrentPropId->SupportHandler) {

  0002b	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0002f	74 0e		 je	 SHORT $L13944

; 3952 : 
; 3953 :                 if (Stream) {

  00031	80 7d 10 00	 cmp	 BYTE PTR _Stream$[ebp], 0
  00035	74 05		 je	 SHORT $L13943

; 3954 : 
; 3955 :                     CurrentPropId->SupportHandler = StreamClassMinidriverStreamGetProperty;

  00037	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 3956 : 
; 3957 :                 } else {

  0003a	eb 03		 jmp	 SHORT $L13944
$L13943:

; 3958 : 
; 3959 :                     CurrentPropId->SupportHandler = StreamClassMinidriverDeviceGetProperty;

  0003c	89 78 1c	 mov	 DWORD PTR [eax+28], edi
$L13944:

; 3960 :                 }               // if stream
; 3961 : 
; 3962 :             }
; 3963 :             //
; 3964 :             // if get prop routine is
; 3965 :             // supported, add our vector.
; 3966 :             //
; 3967 : 
; 3968 :             if (CurrentPropId->GetPropertyHandler) {

  0003f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00042	74 0c		 je	 SHORT $L13947

; 3969 : 
; 3970 :                 if (Stream) {

  00044	80 7d 10 00	 cmp	 BYTE PTR _Stream$[ebp], 0
  00048	74 04		 je	 SHORT $L13946

; 3971 : 
; 3972 :                     CurrentPropId->GetPropertyHandler = StreamClassMinidriverStreamGetProperty;

  0004a	89 10		 mov	 DWORD PTR [eax], edx

; 3973 :                 } else {

  0004c	eb 02		 jmp	 SHORT $L13947
$L13946:

; 3974 : 
; 3975 :                     CurrentPropId->GetPropertyHandler = StreamClassMinidriverDeviceGetProperty;

  0004e	89 38		 mov	 DWORD PTR [eax], edi
$L13947:

; 3976 :                 }               // if stream
; 3977 : 
; 3978 :             }                   // if get supported
; 3979 :             //
; 3980 :             // if get prop routine is
; 3981 :             // supported, add our vector.
; 3982 :             //
; 3983 : 
; 3984 :             if (CurrentPropId->SetPropertyHandler) {

  00050	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00054	74 16		 je	 SHORT $L13950

; 3985 : 
; 3986 :                 if (Stream) {

  00056	80 7d 10 00	 cmp	 BYTE PTR _Stream$[ebp], 0
  0005a	74 09		 je	 SHORT $L13949

; 3987 : 
; 3988 :                     CurrentPropId->SetPropertyHandler = StreamClassMinidriverStreamSetProperty;

  0005c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET FLAT:_StreamClassMinidriverStreamSetProperty@12

; 3989 : 
; 3990 :                 } else {

  00063	eb 07		 jmp	 SHORT $L13950
$L13949:

; 3991 : 
; 3992 :                     CurrentPropId->SetPropertyHandler = StreamClassMinidriverDeviceSetProperty;

  00065	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET FLAT:_StreamClassMinidriverDeviceSetProperty@12
$L13950:

; 3993 :                 }               // if stream
; 3994 : 
; 3995 :             }
; 3996 :             //
; 3997 :             // index to next property item in
; 3998 :             // array
; 3999 :             //
; 4000 : 
; 4001 :             CurrentPropId++;

  0006c	83 c0 28	 add	 eax, 40			; 00000028H
  0006f	46		 inc	 esi
  00070	3b 31		 cmp	 esi, DWORD PTR [ecx]
  00072	72 b7		 jb	 SHORT $L14882
$L13941:

; 4002 : 
; 4003 :         }                       // for number of property items
; 4004 : 
; 4005 :         //
; 4006 :         // index to next property set in
; 4007 :         // array
; 4008 :         //
; 4009 : 
; 4010 :         CurrentProp++;

  00074	83 c1 14	 add	 ecx, 20			; 00000014H
  00077	ff 4d 08	 dec	 DWORD PTR tv269[ebp]
  0007a	75 a3		 jne	 SHORT $L14883
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
$L13937:

; 4011 : 
; 4012 :     }                           // for number of property sets
; 4013 : 
; 4014 : }

  0007e	5d		 pop	 ebp
  0007f	c2 0c 00	 ret	 12			; 0000000cH
_SCUpdateMinidriverProperties@12 ENDP
PAGE	ENDS
PUBLIC	_SCUpdateMinidriverEvents@12
EXTRN	_StreamClassEnableEventHandler@12:NEAR
EXTRN	_StreamClassDisableEventHandler@8:NEAR
EXTRN	_StreamClassEnableDeviceEventHandler@12:NEAR
EXTRN	_StreamClassDisableDeviceEventHandler@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCUpdateMinidriverEvents@12
PAGE	SEGMENT
_NumEvents$ = 8						; size = 4
_MinidriverEvents$ = 12					; size = 4
_Stream$ = 16						; size = 1
_SCUpdateMinidriverEvents@12 PROC NEAR			; COMDAT

; 4040 : {

  00000	56		 push	 esi

; 4041 :     PKSEVENT_ITEM   CurrentEventId;
; 4042 :     PKSEVENT_SET    CurrentEvent;
; 4043 :     ULONG           i,
; 4044 :                     j;
; 4045 : 
; 4046 :     PAGED_CODE();
; 4047 : 
; 4048 :     //
; 4049 :     // walk the minidriver's event info to fill in the dispatch
; 4050 :     // vectors as appropriate.
; 4051 :     //
; 4052 : 
; 4053 :     CurrentEvent = MinidriverEvents;
; 4054 : 
; 4055 :     for (i = 0; i < NumEvents; i++) {

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _NumEvents$[esp]
  00005	85 f6		 test	 esi, esi
  00007	76 44		 jbe	 SHORT $L13964
  00009	8b 44 24 0c	 mov	 eax, DWORD PTR _MinidriverEvents$[esp]
  0000d	83 c0 04	 add	 eax, 4
$L13962:

; 4056 : 
; 4057 :         CurrentEventId = (PKSEVENT_ITEM) CurrentEvent->EventItem;

  00010	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 4058 : 
; 4059 :         for (j = 0; j < CurrentEvent->EventsCount; j++) {

  00013	33 d2		 xor	 edx, edx
  00015	39 10		 cmp	 DWORD PTR [eax], edx
  00017	76 2e		 jbe	 SHORT $L13968

; 4056 : 
; 4057 :         CurrentEventId = (PKSEVENT_ITEM) CurrentEvent->EventItem;

  00019	83 c1 10	 add	 ecx, 16			; 00000010H
$L13966:

; 4060 : 
; 4061 :             if (Stream) {

  0001c	80 7c 24 10 00	 cmp	 BYTE PTR _Stream$[esp], 0
  00021	74 0f		 je	 SHORT $L13969

; 4062 : 
; 4063 :                 //
; 4064 :                 // set up the add and remove handlers for the stream.
; 4065 :                 // GUBGUB - Still not see justifications. 
; 4066 :                 // don't support IsSupported currently, until
; 4067 :                 // a good justification of it is made.
; 4068 :                 //
; 4069 : 
; 4070 :                 CurrentEventId->AddHandler = StreamClassEnableEventHandler;

  00023	c7 41 fc 00 00
	00 00		 mov	 DWORD PTR [ecx-4], OFFSET FLAT:_StreamClassEnableEventHandler@12

; 4071 :                 CurrentEventId->RemoveHandler = StreamClassDisableEventHandler;

  0002a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:_StreamClassDisableEventHandler@8

; 4072 : 
; 4073 :             } else {

  00030	eb 0d		 jmp	 SHORT $L13970
$L13969:

; 4074 : 
; 4075 :                 //
; 4076 :                 // set up the add and remove handlers for the device.
; 4077 :                 // GUBGUB - still not see justifications
; 4078 :                 // - don't support IsSupported currently, until
; 4079 :                 // a good justification of it is made.
; 4080 :                 //
; 4081 : 
; 4082 :                 CurrentEventId->AddHandler = StreamClassEnableDeviceEventHandler;

  00032	c7 41 fc 00 00
	00 00		 mov	 DWORD PTR [ecx-4], OFFSET FLAT:_StreamClassEnableDeviceEventHandler@12

; 4083 :                 CurrentEventId->RemoveHandler = StreamClassDisableDeviceEventHandler;

  00039	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:_StreamClassDisableDeviceEventHandler@8
$L13970:

; 4084 : 
; 4085 :             }                   // if stream
; 4086 : 
; 4087 : 
; 4088 :             //
; 4089 :             // index to next property item in
; 4090 :             // array
; 4091 :             //
; 4092 : 
; 4093 :             CurrentEventId++;

  0003f	83 c1 18	 add	 ecx, 24			; 00000018H
  00042	42		 inc	 edx
  00043	3b 10		 cmp	 edx, DWORD PTR [eax]
  00045	72 d5		 jb	 SHORT $L13966
$L13968:

; 4094 : 
; 4095 :         }                       // for number of event items
; 4096 : 
; 4097 :         //
; 4098 :         // index to next event set in array
; 4099 :         //
; 4100 : 
; 4101 :         CurrentEvent++;

  00047	83 c0 0c	 add	 eax, 12			; 0000000cH
  0004a	4e		 dec	 esi
  0004b	75 c3		 jne	 SHORT $L13962
$L13964:
  0004d	5e		 pop	 esi

; 4102 : 
; 4103 :     }                           // for number of event sets
; 4104 : 
; 4105 : }

  0004e	c2 0c 00	 ret	 12			; 0000000cH
_SCUpdateMinidriverEvents@12 ENDP
PAGE	ENDS
PUBLIC	_SCGetRegistryValue@20
EXTRN	__imp__ZwQueryValueKey@24:NEAR
EXTRN	__imp__RtlInitUnicodeString@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCGetRegistryValue@20
PAGE	SEGMENT
_KeyName$ = -12						; size = 8
_Status$ = -4						; size = 4
_Handle$ = 8						; size = 4
_Length$ = 12						; size = 4
_KeyNameString$ = 12					; size = 4
_KeyNameStringLength$ = 16				; size = 4
_Data$ = 20						; size = 4
_DataLength$ = 24					; size = 4
_SCGetRegistryValue@20 PROC NEAR			; COMDAT

; 4228 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 4229 :     NTSTATUS        Status = STATUS_INSUFFICIENT_RESOURCES;
; 4230 :     UNICODE_STRING  KeyName;
; 4231 :     ULONG           Length;
; 4232 :     PKEY_VALUE_FULL_INFORMATION FullInfo;
; 4233 : 
; 4234 :     PAGED_CODE();
; 4235 : 
; 4236 :     RtlInitUnicodeString(&KeyName, KeyNameString);

  00008	ff 75 0c	 push	 DWORD PTR _KeyNameString$[ebp]
  0000b	8d 45 f4	 lea	 eax, DWORD PTR _KeyName$[ebp]
  0000e	50		 push	 eax
  0000f	c7 45 fc 9a 00
	00 c0		 mov	 DWORD PTR _Status$[ebp], -1073741670 ; c000009aH
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitUnicodeString@8

; 4237 : 
; 4238 :     Length = sizeof(KEY_VALUE_FULL_INFORMATION) +
; 4239 :         KeyNameStringLength + DataLength;

  0001c	8b 75 18	 mov	 esi, DWORD PTR _DataLength$[ebp]
  0001f	8b 45 10	 mov	 eax, DWORD PTR _KeyNameStringLength$[ebp]
  00022	8d 44 30 18	 lea	 eax, DWORD PTR [eax+esi+24]

; 4240 : 
; 4241 :     FullInfo = ExAllocatePool(PagedPool, Length);

  00026	68 57 64 6d 20	 push	 544040023		; 206d6457H
  0002b	50		 push	 eax
  0002c	6a 01		 push	 1
  0002e	89 45 0c	 mov	 DWORD PTR _Length$[ebp], eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  00037	8b d8		 mov	 ebx, eax

; 4242 : 
; 4243 :     if (FullInfo) {

  00039	85 db		 test	 ebx, ebx
  0003b	74 4d		 je	 SHORT $L14004

; 4244 :         Status = ZwQueryValueKey(Handle,
; 4245 :                                  &KeyName,
; 4246 :                                  KeyValueFullInformation,
; 4247 :                                  FullInfo,
; 4248 :                                  Length,
; 4249 :                                  &Length);

  0003d	8d 45 0c	 lea	 eax, DWORD PTR _Length$[ebp]
  00040	50		 push	 eax
  00041	ff 75 0c	 push	 DWORD PTR _Length$[ebp]
  00044	8d 45 f4	 lea	 eax, DWORD PTR _KeyName$[ebp]
  00047	53		 push	 ebx
  00048	6a 01		 push	 1
  0004a	50		 push	 eax
  0004b	ff 75 08	 push	 DWORD PTR _Handle$[ebp]
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ZwQueryValueKey@24

; 4250 : 
; 4251 :         if (NT_SUCCESS(Status)) {

  00054	85 c0		 test	 eax, eax
  00056	89 45 fc	 mov	 DWORD PTR _Status$[ebp], eax
  00059	7c 28		 jl	 SHORT $L14009

; 4252 : 
; 4253 :             if (DataLength >= FullInfo->DataLength) {

  0005b	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0005e	3b f1		 cmp	 esi, ecx
  00060	72 1a		 jb	 SHORT $L14007

; 4254 :                 RtlCopyMemory(Data, ((PUCHAR) FullInfo) + FullInfo->DataOffset, FullInfo->DataLength);

  00062	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  00065	8b c1		 mov	 eax, ecx
  00067	57		 push	 edi
  00068	8b 7d 14	 mov	 edi, DWORD PTR _Data$[ebp]
  0006b	c1 e9 02	 shr	 ecx, 2
  0006e	03 f3		 add	 esi, ebx
  00070	f3 a5		 rep movsd
  00072	8b c8		 mov	 ecx, eax
  00074	83 e1 03	 and	 ecx, 3
  00077	f3 a4		 rep movsb
  00079	5f		 pop	 edi

; 4255 : 
; 4256 :             } else {

  0007a	eb 07		 jmp	 SHORT $L14009
$L14007:

; 4257 : 
; 4258 :                 Status = STATUS_BUFFER_TOO_SMALL;

  0007c	c7 45 fc 23 00
	00 c0		 mov	 DWORD PTR _Status$[ebp], -1073741789 ; c0000023H
$L14009:

; 4259 :             }                   // buffer right length
; 4260 : 
; 4261 :         }                       // if success
; 4262 :         ExFreePool(FullInfo);

  00083	53		 push	 ebx
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4
$L14004:

; 4263 : 
; 4264 :     }                           // if fullinfo
; 4265 :     return Status;

  0008a	8b 45 fc	 mov	 eax, DWORD PTR _Status$[ebp]
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx

; 4266 : 
; 4267 : }

  0008f	c9		 leave
  00090	c2 14 00	 ret	 20			; 00000014H
_SCGetRegistryValue@20 ENDP
PAGE	ENDS
PUBLIC	_SCReferenceSwEnumDriver@8
EXTRN	_KSMEDIUMSETID_Standard:BYTE
EXTRN	__imp__KeInitializeEvent@12:NEAR
EXTRN	__imp__IoBuildSynchronousFsdRequest@28:NEAR
EXTRN	__imp_@IofCallDriver@8:NEAR
EXTRN	__imp__KeWaitForSingleObject@20:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCReferenceSwEnumDriver@8
_TEXT	SEGMENT
_Event$ = -24						; size = 16
_IoStatusBlock$ = -8					; size = 8
_DeviceExtension$ = 8					; size = 4
_Reference$ = 12					; size = 1
_SCReferenceSwEnumDriver@8 PROC NEAR			; COMDAT

; 4292 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 4293 :     NTSTATUS            Status;
; 4294 :     KEVENT              Event;
; 4295 :     IO_STATUS_BLOCK     IoStatusBlock;
; 4296 :     PIRP                Irp;
; 4297 :     PIO_STACK_LOCATION  IrpStackNext;
; 4298 :     PBUS_INTERFACE_REFERENCE    BusInterface;
; 4299 : 
; 4300 :     PMINIDRIVER_INFORMATION MinidriverInfo = DeviceExtension->DriverInfo;
; 4301 : 
; 4302 :     PAGED_CODE();
; 4303 : 
; 4304 :     BusInterface = ExAllocatePool(NonPagedPool,
; 4305 :                                   sizeof(BUS_INTERFACE_REFERENCE));

  00008	68 57 64 6d 20	 push	 544040023		; 206d6457H
  0000d	6a 1c		 push	 28			; 0000001cH
  0000f	33 db		 xor	 ebx, ebx
  00011	53		 push	 ebx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  00018	8b f0		 mov	 esi, eax

; 4306 :     if (BusInterface == NULL)

  0001a	3b f3		 cmp	 esi, ebx
  0001c	75 0a		 jne	 SHORT $L14026

; 4307 :     {
; 4308 :         return STATUS_INSUFFICIENT_RESOURCES;

  0001e	b8 9a 00 00 c0	 mov	 eax, -1073741670	; c000009aH
  00023	e9 a9 00 00 00	 jmp	 $L14016
$L14026:
  00028	57		 push	 edi

; 4309 :     }
; 4310 :     //
; 4311 :     // There is no file object associated with this Irp, so the event may be located
; 4312 :     // on the stack as a non-object manager object.
; 4313 :     //
; 4314 :     KeInitializeEvent(&Event, SynchronizationEvent, FALSE);

  00029	53		 push	 ebx
  0002a	6a 01		 push	 1
  0002c	8d 45 e8	 lea	 eax, DWORD PTR _Event$[ebp]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeEvent@12

; 4315 : 
; 4316 :     Irp = IoBuildSynchronousFsdRequest(IRP_MJ_PNP,
; 4317 :                                        DeviceExtension->AttachedPdo,
; 4318 :                                        NULL,
; 4319 :                                        0,
; 4320 :                                        NULL,
; 4321 :                                        &Event,
; 4322 :                                        &IoStatusBlock);

  00036	8b 7d 08	 mov	 edi, DWORD PTR _DeviceExtension$[ebp]
  00039	8d 45 f8	 lea	 eax, DWORD PTR _IoStatusBlock$[ebp]
  0003c	50		 push	 eax
  0003d	8d 45 e8	 lea	 eax, DWORD PTR _Event$[ebp]
  00040	50		 push	 eax
  00041	53		 push	 ebx
  00042	53		 push	 ebx
  00043	53		 push	 ebx
  00044	ff b7 a4 00 00
	00		 push	 DWORD PTR [edi+164]
  0004a	6a 1b		 push	 27			; 0000001bH
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoBuildSynchronousFsdRequest@28

; 4323 :     if (Irp != NULL)

  00052	3b c3		 cmp	 eax, ebx
  00054	74 58		 je	 SHORT $L14031

; 4324 :     {
; 4325 :         Irp->RequestorMode = KernelMode;
; 4326 :         Irp->IoStatus.Status = STATUS_NOT_SUPPORTED;
; 4327 :         IrpStackNext = IoGetNextIrpStackLocation(Irp);

  00056	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00059	83 e9 24	 sub	 ecx, 36			; 00000024H
  0005c	88 58 20	 mov	 BYTE PTR [eax+32], bl
  0005f	c7 40 18 bb 00
	00 c0		 mov	 DWORD PTR [eax+24], -1073741637 ; c00000bbH

; 4328 :         //
; 4329 :         // Create an interface query out of the Irp.
; 4330 :         //
; 4331 :         IrpStackNext->MinorFunction = IRP_MN_QUERY_INTERFACE;

  00066	c6 41 01 08	 mov	 BYTE PTR [ecx+1], 8

; 4332 :         IrpStackNext->Parameters.QueryInterface.InterfaceType = (GUID*)&REFERENCE_BUS_INTERFACE;

  0006a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:_KSMEDIUMSETID_Standard

; 4333 :         IrpStackNext->Parameters.QueryInterface.Size = sizeof(BUS_INTERFACE_REFERENCE);

  00071	66 c7 41 08 1c
	00		 mov	 WORD PTR [ecx+8], 28	; 0000001cH

; 4334 :         IrpStackNext->Parameters.QueryInterface.Version = BUS_INTERFACE_REFERENCE_VERSION;

  00077	66 c7 41 0a 00
	01		 mov	 WORD PTR [ecx+10], 256	; 00000100H

; 4335 :         IrpStackNext->Parameters.QueryInterface.Interface = (PINTERFACE)BusInterface;

  0007d	89 71 0c	 mov	 DWORD PTR [ecx+12], esi

; 4336 :         IrpStackNext->Parameters.QueryInterface.InterfaceSpecificData = NULL;

  00080	89 59 10	 mov	 DWORD PTR [ecx+16], ebx

; 4337 :         Status = IoCallDriver(DeviceExtension->AttachedPdo, Irp);

  00083	8b 8f a4 00 00
	00		 mov	 ecx, DWORD PTR [edi+164]
  00089	8b d0		 mov	 edx, eax
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCallDriver@8
  00091	8b f8		 mov	 edi, eax

; 4338 :         if (Status == STATUS_PENDING)

  00093	81 ff 03 01 00
	00		 cmp	 edi, 259		; 00000103H
  00099	75 18		 jne	 SHORT $L14040

; 4339 :         {
; 4340 :             //
; 4341 :             // This waits using KernelMode, so that the stack, and therefore the
; 4342 :             // event on that stack, is not paged out.
; 4343 :             //
; 4344 :             KeWaitForSingleObject(&Event, Executive, KernelMode, FALSE, NULL);

  0009b	53		 push	 ebx
  0009c	53		 push	 ebx
  0009d	53		 push	 ebx
  0009e	53		 push	 ebx
  0009f	8d 45 e8	 lea	 eax, DWORD PTR _Event$[ebp]
  000a2	50		 push	 eax
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20

; 4345 :             Status = IoStatusBlock.Status;

  000a9	8b 7d f8	 mov	 edi, DWORD PTR _IoStatusBlock$[ebp]

; 4346 :         }
; 4347 :     }
; 4348 :     else

  000ac	eb 05		 jmp	 SHORT $L14040
$L14031:

; 4349 :     {
; 4350 :         Status = STATUS_INSUFFICIENT_RESOURCES;

  000ae	bf 9a 00 00 c0	 mov	 edi, -1073741670	; c000009aH
$L14040:

; 4351 :     }
; 4352 : 
; 4353 :     if (Status == STATUS_SUCCESS) 

  000b3	3b fb		 cmp	 edi, ebx
  000b5	75 10		 jne	 SHORT $L14045

; 4354 :     {
; 4355 :         if (Reference)

  000b7	38 5d 0c	 cmp	 BYTE PTR _Reference$[ebp], bl

; 4356 :             BusInterface->ReferenceDeviceObject(BusInterface->Interface.Context);

  000ba	ff 76 04	 push	 DWORD PTR [esi+4]
  000bd	74 05		 je	 SHORT $L14044
  000bf	ff 56 10	 call	 DWORD PTR [esi+16]

; 4357 :         else    

  000c2	eb 03		 jmp	 SHORT $L14045
$L14044:

; 4358 :             BusInterface->DereferenceDeviceObject(BusInterface->Interface.Context);

  000c4	ff 56 14	 call	 DWORD PTR [esi+20]
$L14045:

; 4359 :     }
; 4360 : 
; 4361 :     ExFreePool(BusInterface);

  000c7	56		 push	 esi
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4

; 4362 : 
; 4363 :     return Status;

  000ce	8b c7		 mov	 eax, edi
  000d0	5f		 pop	 edi
$L14016:
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx

; 4364 : 
; 4365 : }

  000d3	c9		 leave
  000d4	c2 08 00	 ret	 8
_SCReferenceSwEnumDriver@8 ENDP
_TEXT	ENDS
PUBLIC	_SCReferenceDriver@4
EXTRN	__imp__MmResetDriverPaging@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCReferenceDriver@4
PAGE	SEGMENT
_DeviceExtension$ = 8					; size = 4
_SCReferenceDriver@4 PROC NEAR				; COMDAT

; 4631 : 
; 4632 :     PMINIDRIVER_INFORMATION MinidriverInfo = DeviceExtension->DriverInfo;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _DeviceExtension$[esp-4]

; 4633 : 
; 4634 :     PAGED_CODE();
; 4635 : 
; 4636 :     //
; 4637 :     // if the driver said it was a SWENUM driver, reference it.
; 4638 :     //
; 4639 : 
; 4640 :     if (DeviceExtension->RegistryFlags & DRIVER_USES_SWENUM_TO_LOAD)

  00004	f6 80 a8 00 00
	00 10		 test	 BYTE PTR [eax+168], 16	; 00000010H
  0000b	56		 push	 esi
  0000c	8b b0 5c 01 00
	00		 mov	 esi, DWORD PTR [eax+348]
  00012	74 08		 je	 SHORT $L14085

; 4641 :     {
; 4642 :         SCReferenceSwEnumDriver(DeviceExtension,TRUE);

  00014	6a 01		 push	 1
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 _SCReferenceSwEnumDriver@8
$L14085:

; 4643 :     }
; 4644 :     
; 4645 :     DebugPrint(( DebugLevelVerbose, 
; 4646 :                  "ReferenceDriver %x Count %x DriverFlags=%x\n",
; 4647 :                  DeviceExtension->DeviceObject->DriverObject,
; 4648 :                  MinidriverInfo->UseCount, MinidriverInfo->Flags));
; 4649 : 
; 4650 :     if (!(MinidriverInfo->Flags & DRIVER_FLAGS_NO_PAGEOUT)) {

  0001c	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1
  00020	75 37		 jne	 SHORT $L14086
  00022	53		 push	 ebx
  00023	57		 push	 edi

; 4651 : 
; 4652 :         KeWaitForSingleObject(&MinidriverInfo->ControlEvent,
; 4653 :                               Executive,
; 4654 :                               KernelMode,
; 4655 :                               FALSE,    // not alertable
; 4656 :                               NULL);

  00024	33 db		 xor	 ebx, ebx
  00026	53		 push	 ebx
  00027	53		 push	 ebx
  00028	53		 push	 ebx
  00029	53		 push	 ebx
  0002a	8d 7e 40	 lea	 edi, DWORD PTR [esi+64]
  0002d	57		 push	 edi
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20

; 4657 : 
; 4658 :         DebugPrint(( DebugLevelVerbose, 
; 4659 :                      "RefernceDriver Countup\n"));
; 4660 : 
; 4661 :         //
; 4662 :         // inc the refcount and see if we
; 4663 :         // need to page in.
; 4664 :         //
; 4665 : 
; 4666 :         ASSERT((LONG) MinidriverInfo->UseCount >= 0);
; 4667 : 
; 4668 :         if (!(MinidriverInfo->UseCount++)) {

  00034	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00037	3b c3		 cmp	 eax, ebx
  00039	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0003c	89 4e 50	 mov	 DWORD PTR [esi+80], ecx
  0003f	75 0d		 jne	 SHORT $L14089

; 4669 : 
; 4670 :             //
; 4671 :             // page in the minidriver
; 4672 :             //
; 4673 : 
; 4674 :             MmResetDriverPaging(MinidriverInfo->HwInitData.HwReceivePacket);

  00041	ff 76 08	 push	 DWORD PTR [esi+8]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmResetDriverPaging@4

; 4675 :             MinidriverInfo->Flags &= ~(DRIVER_FLAGS_PAGED_OUT);

  0004a	83 66 3c fd	 and	 DWORD PTR [esi+60], -3	; fffffffdH
$L14089:

; 4676 : 
; 4677 :         }                       // if !usecount
; 4678 :         KeSetEvent(&MinidriverInfo->ControlEvent, IO_NO_INCREMENT, FALSE);

  0004e	53		 push	 ebx
  0004f	53		 push	 ebx
  00050	57		 push	 edi
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetEvent@12
  00057	5f		 pop	 edi
  00058	5b		 pop	 ebx
$L14086:
  00059	5e		 pop	 esi

; 4679 : 
; 4680 :     }                           // if pageable
; 4681 : }

  0005a	c2 04 00	 ret	 4
_SCReferenceDriver@4 ENDP
PAGE	ENDS
PUBLIC	_SCInsertStreamInFilter@8
; Function compile flags: /Ogsy
;	COMDAT _SCInsertStreamInFilter@8
_TEXT	SEGMENT
_StreamObject$ = 8					; size = 4
_DeviceExtension$ = 12					; size = 4
_SCInsertStreamInFilter@8 PROC NEAR			; COMDAT

; 4705 : {

  00000	53		 push	 ebx

; 4706 : 
; 4707 :     KIRQL           Irql;
; 4708 : 
; 4709 :     //
; 4710 :     // insert the stream object in the filter
; 4711 :     // instance list
; 4712 :     //
; 4713 : 
; 4714 :     KeAcquireSpinLock(&DeviceExtension->SpinLock, &Irql);

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR _DeviceExtension$[esp]
  00005	56		 push	 esi
  00006	81 c3 d8 00 00
	00		 add	 ebx, 216		; 000000d8H
  0000c	57		 push	 edi
  0000d	8b cb		 mov	 ecx, ebx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4

; 4715 : 
; 4716 :     InsertHeadList(&((PFILTER_INSTANCE) (StreamObject->FilterInstance))->
; 4717 :                    FirstStream,
; 4718 :                    &StreamObject->NextStream);

  00015	8b 4c 24 10	 mov	 ecx, DWORD PTR _StreamObject$[esp+8]
  00019	8d b1 04 01 00
	00		 lea	 esi, DWORD PTR [ecx+260]
  0001f	8b 89 a4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+164]
  00025	83 c1 10	 add	 ecx, 16			; 00000010H
  00028	8b 39		 mov	 edi, DWORD PTR [ecx]
  0002a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0002d	89 3e		 mov	 DWORD PTR [esi], edi
  0002f	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00032	89 31		 mov	 DWORD PTR [ecx], esi

; 4719 : 
; 4720 :     KeReleaseSpinLock(&DeviceExtension->SpinLock, Irql);

  00034	8a d0		 mov	 dl, al
  00036	8b cb		 mov	 ecx, ebx
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx

; 4721 : 
; 4722 :     return;
; 4723 : }

  00041	c2 08 00	 ret	 8
_SCInsertStreamInFilter@8 ENDP
_TEXT	ENDS
PUBLIC	_SCInsertFiltersInDevice@8
; Function compile flags: /Ogsy
;	COMDAT _SCInsertFiltersInDevice@8
_TEXT	SEGMENT
_FilterInstance$ = 8					; size = 4
_DeviceExtension$ = 12					; size = 4
_SCInsertFiltersInDevice@8 PROC NEAR			; COMDAT

; 4743 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 4744 :     KIRQL           Irql;
; 4745 : 
; 4746 :     //
; 4747 :     // insert the filter instance in the global list
; 4748 :     //
; 4749 : 
; 4750 :     KeAcquireSpinLock(&DeviceExtension->SpinLock, &Irql);

  00002	8b 74 24 10	 mov	 esi, DWORD PTR _DeviceExtension$[esp+4]
  00006	8d 9e d8 00 00
	00		 lea	 ebx, DWORD PTR [esi+216]
  0000c	57		 push	 edi
  0000d	8b cb		 mov	 ecx, ebx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4

; 4751 : 
; 4752 :     InsertHeadList(
; 4753 :                    &DeviceExtension->FilterInstanceList,
; 4754 :                    &FilterInstance->NextFilterInstance);

  00015	8b 4c 24 10	 mov	 ecx, DWORD PTR _FilterInstance$[esp+8]
  00019	83 c1 08	 add	 ecx, 8
  0001c	81 c6 24 01 00
	00		 add	 esi, 292		; 00000124H
  00022	8b 3e		 mov	 edi, DWORD PTR [esi]
  00024	89 39		 mov	 DWORD PTR [ecx], edi
  00026	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00029	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  0002c	89 0e		 mov	 DWORD PTR [esi], ecx

; 4755 : 
; 4756 : 
; 4757 :     KeReleaseSpinLock(&DeviceExtension->SpinLock, Irql);

  0002e	8a d0		 mov	 dl, al
  00030	8b cb		 mov	 ecx, ebx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx

; 4758 : }

  0003b	c2 08 00	 ret	 8
_SCInsertFiltersInDevice@8 ENDP
_TEXT	ENDS
PUBLIC	_SCInterlockedRemoveEntryList@8
; Function compile flags: /Ogsy
;	COMDAT _SCInterlockedRemoveEntryList@8
_TEXT	SEGMENT
_DeviceExtension$ = 8					; size = 4
_List$ = 12						; size = 4
_SCInterlockedRemoveEntryList@8 PROC NEAR		; COMDAT

; 4778 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 4779 :     KIRQL           Irql;
; 4780 : 
; 4781 :     KeAcquireSpinLock(&DeviceExtension->SpinLock, &Irql);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _DeviceExtension$[esp+4]
  00006	81 c7 d8 00 00
	00		 add	 edi, 216		; 000000d8H
  0000c	8b cf		 mov	 ecx, edi
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4

; 4782 : 
; 4783 :     RemoveEntryList(List);

  00014	8b 74 24 10	 mov	 esi, DWORD PTR _List$[esp+4]
  00018	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001a	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0001d	89 0e		 mov	 DWORD PTR [esi], ecx
  0001f	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 4784 : 
; 4785 :     KeReleaseSpinLock(&DeviceExtension->SpinLock, Irql);

  00022	8a d0		 mov	 dl, al
  00024	8b cf		 mov	 ecx, edi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 4786 : 
; 4787 : }

  0002e	c2 08 00	 ret	 8
_SCInterlockedRemoveEntryList@8 ENDP
_TEXT	ENDS
PUBLIC	_SCProcessTimerRequest@8
EXTRN	__imp__KeCancelTimer@4:NEAR
EXTRN	__imp__KeSetTimer@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCProcessTimerRequest@8
_TEXT	SEGMENT
_CommonObject$ = 8					; size = 4
_SavedInterruptData$ = 12				; size = 4
_SCProcessTimerRequest@8 PROC NEAR			; COMDAT

; 4812 :     LARGE_INTEGER   timeValue;
; 4813 : 
; 4814 :     CommonObject->HwTimerRoutine =
; 4815 :         SavedInterruptData->HwTimerRoutine;

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _SavedInterruptData$[esp-4]
  00004	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00007	8b 44 24 04	 mov	 eax, DWORD PTR _CommonObject$[esp-4]
  0000b	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 4816 : 
; 4817 :     CommonObject->HwTimerContext =
; 4818 :         SavedInterruptData->HwTimerContext;

  0000e	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00011	89 50 40	 mov	 DWORD PTR [eax+64], edx

; 4819 : 
; 4820 :     //
; 4821 :     // The minidriver wants a timer request.
; 4822 :     // If the requested timer value is zero,
; 4823 :     // then cancel the timer.
; 4824 :     //
; 4825 : 
; 4826 :     if (SavedInterruptData->HwTimerValue == 0) {

  00014	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00017	85 c9		 test	 ecx, ecx
  00019	75 0c		 jne	 SHORT $L14115

; 4827 : 
; 4828 :         KeCancelTimer(&CommonObject->MiniDriverTimer);

  0001b	83 c0 44	 add	 eax, 68			; 00000044H
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeCancelTimer@4

; 4829 : 
; 4830 :     } else {

  00025	eb 18		 jmp	 SHORT $L14116
$L14115:
  00027	56		 push	 esi

; 4831 : 
; 4832 :         //
; 4833 :         // Convert the timer value from
; 4834 :         // microseconds to a negative
; 4835 :         // 100
; 4836 :         // nanoseconds.
; 4837 :         //
; 4838 : 
; 4839 : //        timeValue.QuadPart = Int32x32To64(
; 4840 : //                   SavedInterruptData->HwTimerValue,
; 4841 : //                   -10);
; 4842 : 
; 4843 :         timeValue.LowPart = SavedInterruptData->HwTimerValue * -10;

  00028	6b c9 f6	 imul	 ecx, -10		; fffffff6H

; 4844 :         timeValue.HighPart = -1;
; 4845 : 
; 4846 :         //
; 4847 :         // Set the timer.
; 4848 :         //
; 4849 : 
; 4850 :         KeSetTimer(&CommonObject->MiniDriverTimer,
; 4851 :                    timeValue,
; 4852 :                    &CommonObject->MiniDriverTimerDpc);

  0002b	8d 70 6c	 lea	 esi, DWORD PTR [eax+108]
  0002e	56		 push	 esi
  0002f	83 ca ff	 or	 edx, -1
  00032	52		 push	 edx
  00033	51		 push	 ecx
  00034	83 c0 44	 add	 eax, 68			; 00000044H
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetTimer@16
  0003e	5e		 pop	 esi
$L14116:

; 4853 :     }
; 4854 : }

  0003f	c2 08 00	 ret	 8
_SCProcessTimerRequest@8 ENDP
_TEXT	ENDS
PUBLIC	_SCProcessPriorityChangeRequest@12
EXTRN	__imp__ExQueueWorkItem@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCProcessPriorityChangeRequest@12
_TEXT	SEGMENT
_CommonObject$ = 8					; size = 4
_SavedInterruptData$ = 12				; size = 4
_DeviceExtension$ = 16					; size = 4
_SCProcessPriorityChangeRequest@12 PROC NEAR		; COMDAT

; 4881 : {

  00000	56		 push	 esi

; 4882 : 
; 4883 : #if DBG
; 4884 :     PDEBUG_WORK_ITEM DbgWorkItemStruct;
; 4885 : #endif
; 4886 : 
; 4887 :     if (SavedInterruptData->HwPriorityLevel == Dispatch) {

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _SavedInterruptData$[esp]
  00005	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00008	83 f8 01	 cmp	 eax, 1
  0000b	75 4f		 jne	 SHORT $L14124
  0000d	53		 push	 ebx
  0000e	57		 push	 edi

; 4888 : 
; 4889 :         DebugPrint((DebugLevelVerbose, "'SCDpc: Dispatch priority callout\n"));
; 4890 : 
; 4891 :         //
; 4892 :         // Acquire the device spinlock so
; 4893 :         // nothing else starts.
; 4894 :         //
; 4895 : 
; 4896 :         KeAcquireSpinLockAtDpcLevel(&DeviceExtension->SpinLock);

  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR _DeviceExtension$[esp+8]
  00013	8d 9f d8 00 00
	00		 lea	 ebx, DWORD PTR [edi+216]
  00019	8b cb		 mov	 ecx, ebx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefAcquireSpinLockAtDpcLevel@4

; 4897 : 
; 4898 :         //
; 4899 :         // call the minidriver at dispatch
; 4900 :         // level.
; 4901 :         //
; 4902 : 
; 4903 :         SavedInterruptData->HwPriorityRoutine(SavedInterruptData->HwPriorityContext);

  00021	ff 76 28	 push	 DWORD PTR [esi+40]
  00024	ff 56 20	 call	 DWORD PTR [esi+32]

; 4904 : 
; 4905 :         if ((CommonObject->InterruptData.Flags &
; 4906 :              INTERRUPT_FLAGS_PRIORITY_CHANGE_REQUEST)
; 4907 :             &&
; 4908 :             (CommonObject->InterruptData.HwPriorityLevel == High)) {

  00027	8b 4c 24 10	 mov	 ecx, DWORD PTR _CommonObject$[esp+8]
  0002b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002e	a8 04		 test	 al, 4
  00030	74 1e		 je	 SHORT $L14125
  00032	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00036	75 18		 jne	 SHORT $L14125

; 4909 : 
; 4910 :             DebugPrint((DebugLevelVerbose, "'SCDpc: High priority callout\n"));
; 4911 : 
; 4912 :             //
; 4913 :             // if the minidriver now wants a high priority callback,
; 4914 :             // do so now.  This is safe since we have the device
; 4915 :             // spinlock and the minidriver cannot make
; 4916 :             // another priority request for this stream while one is
; 4917 :             // requested.
; 4918 :             //
; 4919 : 
; 4920 :             CommonObject->InterruptData.Flags &=
; 4921 :                 ~(INTERRUPT_FLAGS_PRIORITY_CHANGE_REQUEST);
; 4922 : 
; 4923 :             DeviceExtension->SynchronizeExecution(
; 4924 :                                            DeviceExtension->InterruptObject,
; 4925 :                       (PVOID) CommonObject->InterruptData.HwPriorityRoutine,
; 4926 :                              CommonObject->InterruptData.HwPriorityContext);

  00038	ff 71 30	 push	 DWORD PTR [ecx+48]
  0003b	83 e0 fb	 and	 eax, -5			; fffffffbH
  0003e	ff 71 28	 push	 DWORD PTR [ecx+40]
  00041	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00044	ff b7 ac 00 00
	00		 push	 DWORD PTR [edi+172]
  0004a	ff 97 d4 00 00
	00		 call	 DWORD PTR [edi+212]
$L14125:

; 4927 : 
; 4928 : 
; 4929 :         }                       // if high requested
; 4930 :         KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  00050	8b cb		 mov	 ecx, ebx
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4
  00058	5f		 pop	 edi
  00059	5b		 pop	 ebx

; 4931 : 
; 4932 :     } else if (SavedInterruptData->HwPriorityLevel == Low) {

  0005a	eb 2c		 jmp	 SHORT $L14128
$L14124:
  0005c	83 f8 02	 cmp	 eax, 2
  0005f	75 27		 jne	 SHORT $L14128

; 4933 : 
; 4934 : #if DBG
; 4935 : 
; 4936 :         //
; 4937 :         // make sure that the minidriver is not misusing this function.
; 4938 :         //
; 4939 : 
; 4940 :         if (DeviceExtension->NumberOfRequests > 0xFFFFFFF0) {
; 4941 :             DeviceExtension->Flags |= DEVICE_FLAGS_PRI_WARN_GIVEN;
; 4942 : 
; 4943 :         }
; 4944 :         if ((++DeviceExtension->NumberOfLowPriCalls > 100) &&
; 4945 :             ((DeviceExtension->NumberOfLowPriCalls) >
; 4946 :              DeviceExtension->NumberOfRequests / 4) &&
; 4947 :             (!(DeviceExtension->Flags & DEVICE_FLAGS_PRI_WARN_GIVEN))) {
; 4948 : 
; 4949 :             DeviceExtension->Flags |= DEVICE_FLAGS_PRI_WARN_GIVEN;
; 4950 : 
; 4951 : 
; 4952 :             DebugPrint((DebugLevelFatal, "Stream Class has determined that a minidriver is scheduling\n"));
; 4953 :             DebugPrint((DebugLevelFatal, "a low priority callback for more than 25 percent of the requests\n"));
; 4954 :             DebugPrint((DebugLevelFatal, "it has received.   This driver should probably be setting the\n"));
; 4955 :             DebugPrint((DebugLevelFatal, "TurnOffSynchronization boolean and doing its own synchronization.\n"));
; 4956 :             DebugPrint((DebugLevelFatal, "Please open a bug against the dev owner of this minidriver.\n"));
; 4957 :             DebugPrint((DebugLevelFatal, "Do an LN of %x to determine the name of the minidriver.\n", SavedInterruptData->HwPriorityRoutine));
; 4958 :             TRAP;
; 4959 :         }                       // if bad pri
; 4960 :         if (CommonObject->InterruptData.Flags &
; 4961 :             INTERRUPT_FLAGS_PRIORITY_CHANGE_REQUEST) {
; 4962 : 
; 4963 :             DebugPrint((DebugLevelFatal, "Stream Minidriver scheduled priority twice!\n"));
; 4964 :             ASSERT(1 == 0);
; 4965 :         }                       // if scheduled twice
; 4966 :         DbgWorkItemStruct = ExAllocatePool(NonPagedPool, sizeof(DEBUG_WORK_ITEM));
; 4967 : //        DebugPrint((DebugLevelFatal, "A %x\n", DbgWorkItemStruct));
; 4968 :         if (DbgWorkItemStruct) {
; 4969 : 
; 4970 :             DbgWorkItemStruct->HwPriorityRoutine = SavedInterruptData->HwPriorityRoutine;
; 4971 :             DbgWorkItemStruct->HwPriorityContext = SavedInterruptData->HwPriorityContext;
; 4972 :             DbgWorkItemStruct->Object = CommonObject;
; 4973 : 
; 4974 :             ExInitializeWorkItem(&CommonObject->WorkItem,
; 4975 :                                  SCDebugPriorityWorkItem,
; 4976 :                                  DbgWorkItemStruct);
; 4977 :         } else {
; 4978 : 
; 4979 :             ExInitializeWorkItem(&CommonObject->WorkItem,
; 4980 :                                  SavedInterruptData->HwPriorityRoutine,
; 4981 :                                  SavedInterruptData->HwPriorityContext);
; 4982 :         }
; 4983 : 
; 4984 : #else
; 4985 : 
; 4986 : 
; 4987 : 
; 4988 :         ExInitializeWorkItem(&CommonObject->WorkItem,
; 4989 :                              SavedInterruptData->HwPriorityRoutine,
; 4990 :                              SavedInterruptData->HwPriorityContext);

  00061	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00064	8b 44 24 08	 mov	 eax, DWORD PTR _CommonObject$[esp]
  00068	89 88 94 00 00
	00		 mov	 DWORD PTR [eax+148], ecx
  0006e	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00071	89 88 98 00 00
	00		 mov	 DWORD PTR [eax+152], ecx
  00077	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  0007c	83 20 00	 and	 DWORD PTR [eax], 0

; 4991 : #endif
; 4992 : 
; 4993 :         ExQueueWorkItem(&CommonObject->WorkItem,
; 4994 :                         DelayedWorkQueue);

  0007f	6a 01		 push	 1
  00081	50		 push	 eax
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExQueueWorkItem@8
$L14128:
  00088	5e		 pop	 esi

; 4995 :     }                           // if priority
; 4996 : }

  00089	c2 0c 00	 ret	 12			; 0000000cH
_SCProcessPriorityChangeRequest@12 ENDP
_TEXT	ENDS
PUBLIC	_SCBeginSynchronizedMinidriverCallin@8
; Function compile flags: /Ogsy
;	COMDAT _SCBeginSynchronizedMinidriverCallin@8
_TEXT	SEGMENT
_DeviceExtension$ = 8					; size = 4
_Irql$ = 12						; size = 4
_SCBeginSynchronizedMinidriverCallin@8 PROC NEAR	; COMDAT

; 5019 :     return;
; 5020 : }

  00000	c2 08 00	 ret	 8
_SCBeginSynchronizedMinidriverCallin@8 ENDP
_TEXT	ENDS
PUBLIC	_SCBeginUnsynchronizedMinidriverCallin@8
; Function compile flags: /Ogsy
;	COMDAT _SCBeginUnsynchronizedMinidriverCallin@8
_TEXT	SEGMENT
_DeviceExtension$ = 8					; size = 4
_Irql$ = 12						; size = 4
_SCBeginUnsynchronizedMinidriverCallin@8 PROC NEAR	; COMDAT

; 5044 :     KeAcquireSpinLock(&DeviceExtension->SpinLock, Irql);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _DeviceExtension$[esp-4]
  00004	81 c1 d8 00 00
	00		 add	 ecx, 216		; 000000d8H
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4
  00010	8b 4c 24 08	 mov	 ecx, DWORD PTR _Irql$[esp-4]
  00014	88 01		 mov	 BYTE PTR [ecx], al

; 5045 :     \
; 5046 :         return;
; 5047 : }

  00016	c2 08 00	 ret	 8
_SCBeginUnsynchronizedMinidriverCallin@8 ENDP
_TEXT	ENDS
PUBLIC	_SCEndSynchronizedMinidriverStreamCallin@8
EXTRN	_SCRequestDpcForStream@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCEndSynchronizedMinidriverStreamCallin@8
_TEXT	SEGMENT
_StreamObject$ = 8					; size = 4
_Irql$ = 12						; size = 4
_SCEndSynchronizedMinidriverStreamCallin@8 PROC NEAR	; COMDAT

; 5072 :     SCRequestDpcForStream(StreamObject);

  00000	ff 74 24 04	 push	 DWORD PTR _StreamObject$[esp-4]
  00004	e8 00 00 00 00	 call	 _SCRequestDpcForStream@4

; 5073 :     return;
; 5074 : }

  00009	c2 08 00	 ret	 8
_SCEndSynchronizedMinidriverStreamCallin@8 ENDP
_TEXT	ENDS
PUBLIC	_SCEndSynchronizedMinidriverDeviceCallin@8
; Function compile flags: /Ogsy
;	COMDAT _SCEndSynchronizedMinidriverDeviceCallin@8
_TEXT	SEGMENT
_DeviceExtension$ = 8					; size = 4
_Irql$ = 12						; size = 4
_SCEndSynchronizedMinidriverDeviceCallin@8 PROC NEAR	; COMDAT

; 5099 : 
; 5100 :     DeviceExtension->ComObj.InterruptData.Flags |= INTERRUPT_FLAGS_NOTIFICATION_REQUIRED;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _DeviceExtension$[esp-4]
  00004	83 48 08 01	 or	 DWORD PTR [eax+8], 1

; 5101 :     return;
; 5102 : }

  00008	c2 08 00	 ret	 8
_SCEndSynchronizedMinidriverDeviceCallin@8 ENDP
_TEXT	ENDS
PUBLIC	_SCCheckPoweredUp@4
EXTRN	_SCBustedSynchPowerCompletionRoutine@20:NEAR
EXTRN	__imp__PoRequestPowerIrp@24:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCCheckPoweredUp@4
PAGE	SEGMENT
_PowerContext$ = -20					; size = 20
_DeviceExtension$ = 8					; size = 4
_SCCheckPoweredUp@4 PROC NEAR				; COMDAT

; 5191 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	57		 push	 edi

; 5192 : 
; 5193 :     NTSTATUS        Status;
; 5194 :     POWER_STATE     PowerState;
; 5195 :     POWER_CONTEXT   PowerContext;
; 5196 : 
; 5197 :     PAGED_CODE();
; 5198 : 
; 5199 :     //
; 5200 :     // check to see if we are powered down
; 5201 :     //
; 5202 : 
; 5203 :     if (DeviceExtension->RegistryFlags & DEVICE_REG_FL_POWER_DOWN_CLOSED) {

  00007	8b 7d 08	 mov	 edi, DWORD PTR _DeviceExtension$[ebp]
  0000a	f6 87 a8 00 00
	00 04		 test	 BYTE PTR [edi+168], 4
  00011	74 75		 je	 SHORT $L14945

; 5204 :         while (DeviceExtension->CurrentPowerState != PowerDeviceD0) {

  00013	83 bf 90 01 00
	00 01		 cmp	 DWORD PTR [edi+400], 1
  0001a	74 6c		 je	 SHORT $L14945
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	8d 9f 38 01 00
	00		 lea	 ebx, DWORD PTR [edi+312]

; 5205 : 
; 5206 :             //
; 5207 :             // release the event to avoid deadlocks with the power up code.
; 5208 :             //
; 5209 : 
; 5210 :             KeSetEvent(&DeviceExtension->ControlEvent, IO_NO_INCREMENT, FALSE);
; 5211 : 
; 5212 :             //
; 5213 :             // tell the power manager to power up the device.
; 5214 :             //
; 5215 : 
; 5216 :             PowerState.DeviceState = PowerDeviceD0;

  00024	33 f6		 xor	 esi, esi
$L14173:
  00026	56		 push	 esi
  00027	56		 push	 esi
  00028	53		 push	 ebx
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetEvent@12

; 5217 : 
; 5218 :             //
; 5219 :             // now send down a set power based on this info.
; 5220 :             //
; 5221 : 
; 5222 :             KeInitializeEvent(&PowerContext.Event, NotificationEvent, FALSE);

  0002f	56		 push	 esi
  00030	56		 push	 esi
  00031	8d 45 ec	 lea	 eax, DWORD PTR _PowerContext$[ebp]
  00034	50		 push	 eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeEvent@12

; 5223 : 
; 5224 :             Status = PoRequestPowerIrp(DeviceExtension->PhysicalDeviceObject,
; 5225 :                                        IRP_MN_SET_POWER,
; 5226 :                                        PowerState,
; 5227 :                                        SCBustedSynchPowerCompletionRoutine,
; 5228 :                                        &PowerContext,
; 5229 :                                        NULL);

  0003b	56		 push	 esi
  0003c	8d 45 ec	 lea	 eax, DWORD PTR _PowerContext$[ebp]
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET FLAT:_SCBustedSynchPowerCompletionRoutine@20
  00045	33 c0		 xor	 eax, eax
  00047	40		 inc	 eax
  00048	50		 push	 eax
  00049	6a 02		 push	 2
  0004b	ff b7 c4 00 00
	00		 push	 DWORD PTR [edi+196]
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PoRequestPowerIrp@24

; 5230 : 
; 5231 :             if (Status == STATUS_PENDING) {

  00057	3d 03 01 00 00	 cmp	 eax, 259		; 00000103H
  0005c	75 0f		 jne	 SHORT $L14177

; 5232 : 
; 5233 :                 //
; 5234 :                 // wait for the IRP to complete
; 5235 :                 //
; 5236 : 
; 5237 :                 KeWaitForSingleObject(
; 5238 :                                       &PowerContext.Event,
; 5239 :                                       Suspended,
; 5240 :                                       KernelMode,
; 5241 :                                       FALSE,
; 5242 :                                       NULL);

  0005e	56		 push	 esi
  0005f	56		 push	 esi
  00060	56		 push	 esi
  00061	6a 05		 push	 5
  00063	8d 45 ec	 lea	 eax, DWORD PTR _PowerContext$[ebp]
  00066	50		 push	 eax
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20
$L14177:

; 5243 :             }
; 5244 :             //
; 5245 :             // reacquire the event and loop if good status. The only reason
; 5246 :             // we would get a good status here is if the HW powered up, but
; 5247 :             // some
; 5248 :             // policy maker instantly powered it down again.  This should
; 5249 :             // never
; 5250 :             // happen more than once, but if it does this thread could be
; 5251 :             // stuck.
; 5252 :             //
; 5253 : 
; 5254 :             KeWaitForSingleObject(&DeviceExtension->ControlEvent,
; 5255 :                                   Executive,
; 5256 :                                   KernelMode,
; 5257 :                                   FALSE,    // not alertable
; 5258 :                                   NULL);

  0006d	56		 push	 esi
  0006e	56		 push	 esi
  0006f	56		 push	 esi
  00070	56		 push	 esi
  00071	53		 push	 ebx
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20

; 5259 : 
; 5260 :             if (!NT_SUCCESS(PowerContext.Status)) {

  00078	39 75 fc	 cmp	 DWORD PTR _PowerContext$[ebp+16], esi
  0007b	7c 09		 jl	 SHORT $L14946

; 5204 :         while (DeviceExtension->CurrentPowerState != PowerDeviceD0) {

  0007d	83 bf 90 01 00
	00 01		 cmp	 DWORD PTR [edi+400], 1
  00084	75 a0		 jne	 SHORT $L14173
$L14946:
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
$L14945:
  00088	5f		 pop	 edi

; 5261 : 
; 5262 :                 //
; 5263 :                 // if we could not power up, go ahead and let the request go
; 5264 :                 // through.   The worst that will happen is that the request
; 5265 :                 // will fail at the HW level.
; 5266 :                 //
; 5267 : 
; 5268 :                 break;
; 5269 :             }
; 5270 :         }
; 5271 : 
; 5272 :     }                           // if power down when closed
; 5273 :     return;
; 5274 : }

  00089	c9		 leave
  0008a	c2 04 00	 ret	 4
_SCCheckPoweredUp@4 ENDP
PAGE	ENDS
PUBLIC	_SCCheckPowerDown@4
; Function compile flags: /Ogsy
;	COMDAT _SCCheckPowerDown@4
PAGE	SEGMENT
_PowerContext$ = -20					; size = 20
_PowerState$ = 8					; size = 4
_DeviceExtension$ = 8					; size = 4
_SCCheckPowerDown@4 PROC NEAR				; COMDAT

; 5295 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	57		 push	 edi

; 5296 :     NTSTATUS        Status;
; 5297 :     POWER_STATE     PowerState;
; 5298 :     POWER_CONTEXT   PowerContext;
; 5299 : 
; 5300 :     PAGED_CODE();
; 5301 : 
; 5302 :     //
; 5303 :     // only power down if there are not open files
; 5304 :     //
; 5305 : 
; 5306 :     if (DeviceExtension->RegistryFlags & DEVICE_REG_FL_POWER_DOWN_CLOSED) {

  00007	8b 7d 08	 mov	 edi, DWORD PTR _DeviceExtension$[ebp]
  0000a	f6 87 a8 00 00
	00 04		 test	 BYTE PTR [edi+168], 4
  00011	74 6a		 je	 SHORT $L14189
  00013	56		 push	 esi

; 5307 :         if (!DeviceExtension->NumberOfOpenInstances) {

  00014	33 f6		 xor	 esi, esi
  00016	39 b7 2c 01 00
	00		 cmp	 DWORD PTR [edi+300], esi
  0001c	75 5e		 jne	 SHORT $L14950
  0001e	53		 push	 ebx

; 5308 : 
; 5309 :             //
; 5310 :             // release the event to avoid deadlocks with the power up code.
; 5311 :             //
; 5312 : 
; 5313 :             KeSetEvent(&DeviceExtension->ControlEvent, IO_NO_INCREMENT, FALSE);

  0001f	56		 push	 esi
  00020	56		 push	 esi
  00021	8d 9f 38 01 00
	00		 lea	 ebx, DWORD PTR [edi+312]
  00027	53		 push	 ebx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetEvent@12

; 5314 : 
; 5315 :             //
; 5316 :             // tell the power manager to power down the device.
; 5317 :             //
; 5318 : 
; 5319 :             PowerState.DeviceState = PowerDeviceD3;
; 5320 : 
; 5321 :             //
; 5322 :             // now send down a set power based on this info.
; 5323 :             //
; 5324 : 
; 5325 :             KeInitializeEvent(&PowerContext.Event, NotificationEvent, FALSE);

  0002e	56		 push	 esi
  0002f	56		 push	 esi
  00030	8d 45 ec	 lea	 eax, DWORD PTR _PowerContext$[ebp]
  00033	50		 push	 eax
  00034	c7 45 08 04 00
	00 00		 mov	 DWORD PTR _PowerState$[ebp], 4
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeEvent@12

; 5326 : 
; 5327 :             Status = PoRequestPowerIrp(DeviceExtension->PhysicalDeviceObject,
; 5328 :                                        IRP_MN_SET_POWER,
; 5329 :                                        PowerState,
; 5330 :                                        SCBustedSynchPowerCompletionRoutine,
; 5331 :                                        &PowerContext,
; 5332 :                                        NULL);

  00041	56		 push	 esi
  00042	8d 45 ec	 lea	 eax, DWORD PTR _PowerContext$[ebp]
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET FLAT:_SCBustedSynchPowerCompletionRoutine@20
  0004b	ff 75 08	 push	 DWORD PTR _PowerState$[ebp]
  0004e	6a 02		 push	 2
  00050	ff b7 c4 00 00
	00		 push	 DWORD PTR [edi+196]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PoRequestPowerIrp@24

; 5333 : 
; 5334 :             if (Status == STATUS_PENDING) {

  0005c	3d 03 01 00 00	 cmp	 eax, 259		; 00000103H
  00061	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__KeWaitForSingleObject@20
  00067	75 0b		 jne	 SHORT $L14192

; 5335 : 
; 5336 :                 //
; 5337 :                 // wait for the IRP to complete
; 5338 :                 //
; 5339 : 
; 5340 :                 KeWaitForSingleObject(
; 5341 :                                       &PowerContext.Event,
; 5342 :                                       Suspended,
; 5343 :                                       KernelMode,
; 5344 :                                       FALSE,
; 5345 :                                       NULL);

  00069	56		 push	 esi
  0006a	56		 push	 esi
  0006b	56		 push	 esi
  0006c	6a 05		 push	 5
  0006e	8d 45 ec	 lea	 eax, DWORD PTR _PowerContext$[ebp]
  00071	50		 push	 eax
  00072	ff d7		 call	 edi
$L14192:

; 5346 :             }
; 5347 :             //
; 5348 :             // reacquire the event.
; 5349 :             //
; 5350 : 
; 5351 :             KeWaitForSingleObject(&DeviceExtension->ControlEvent,
; 5352 :                                   Executive,
; 5353 :                                   KernelMode,
; 5354 :                                   FALSE,    // not alertable
; 5355 :                                   NULL);

  00074	56		 push	 esi
  00075	56		 push	 esi
  00076	56		 push	 esi
  00077	56		 push	 esi
  00078	53		 push	 ebx
  00079	ff d7		 call	 edi
  0007b	5b		 pop	 ebx
$L14950:
  0007c	5e		 pop	 esi
$L14189:
  0007d	5f		 pop	 edi

; 5356 :         }
; 5357 :     }                           // if power down closed
; 5358 :     return;
; 5359 : }

  0007e	c9		 leave
  0007f	c2 04 00	 ret	 4
_SCCheckPowerDown@4 ENDP
PAGE	ENDS
PUBLIC	_SCWaitForOutstandingIo@4
EXTRN	__imp_@InterlockedIncrement@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCWaitForOutstandingIo@4
_TEXT	SEGMENT
_DeviceExtension$ = 8					; size = 4
_SCWaitForOutstandingIo@4 PROC NEAR			; COMDAT

; 5381 : {

  00000	56		 push	 esi

; 5382 :     KIRQL           Irql;
; 5383 :     KeAcquireSpinLock(&DeviceExtension->SpinLock, &Irql);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _DeviceExtension$[esp]
  00005	57		 push	 edi
  00006	8d be d8 00 00
	00		 lea	 edi, DWORD PTR [esi+216]
  0000c	8b cf		 mov	 ecx, edi
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4

; 5384 : 
; 5385 :     DeviceExtension->Flags |= DEVICE_FLAGS_DEVICE_INACCESSIBLE;

  00014	80 8e 9d 00 00
	00 01		 or	 BYTE PTR [esi+157], 1

; 5386 : 
; 5387 :     KeReleaseSpinLock(&DeviceExtension->SpinLock, Irql);

  0001b	8a d0		 mov	 dl, al
  0001d	8b cf		 mov	 ecx, edi
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8

; 5388 : 
; 5389 :     if (InterlockedDecrement(&DeviceExtension->OneBasedIoCount)) {

  00025	8d be 6c 01 00
	00		 lea	 edi, DWORD PTR [esi+364]
  0002b	8b cf		 mov	 ecx, edi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedDecrement@4
  00033	85 c0		 test	 eax, eax
  00035	74 13		 je	 SHORT $L14199

; 5390 : 
; 5391 : #ifdef wecandothis
; 5392 : 
; 5393 :         PFILTER_INSTANCE FilterInstance;
; 5394 :         KIRQL           Irql;
; 5395 :         PLIST_ENTRY     FilterEntry,
; 5396 :                         FilterListEntry;
; 5397 : 
; 5398 :         //
; 5399 :         // there is I/O outstanding.   Cancel all outstanding IRP's.
; 5400 :         //
; 5401 : 
; 5402 :         KeAcquireSpinLock(&DeviceExtension->SpinLock, &Irql);
; 5403 : 
; 5404 : checkfilters:
; 5405 :         FilterInstance = DeviceExtension->GlobalFilterInstance;
; 5406 : 
; 5407 :         if (FilterInstance) {
; 5408 : 
; 5409 :             if (SCCheckFilterInstanceStreamsForIrp(FilterInstance, NULL)) {
; 5410 : 
; 5411 :                 DebugPrint((DebugLevelWarning, "'SCCancelPending: found Irp on global instance\n"));
; 5412 : 
; 5413 :                 //
; 5414 :                 // we found one.  jump back to loop back through since the
; 5415 :                 // spinlock
; 5416 :                 // had to be released and reaquired to cancel the irp.
; 5417 :                 //
; 5418 : 
; 5419 :                 goto checkfilters;
; 5420 :             }
; 5421 :         }
; 5422 :         FilterListEntry = FilterEntry = &DeviceExtension->FilterInstanceList;
; 5423 : 
; 5424 :         while (FilterEntry->Flink != FilterListEntry->Blink) {
; 5425 : 
; 5426 :             FilterEntry = FilterEntry->Flink;
; 5427 : 
; 5428 :             //
; 5429 :             // follow the link to the instance
; 5430 :             //
; 5431 : 
; 5432 :             FilterInstance = CONTAINING_RECORD(FilterListEntry,
; 5433 :                                                FILTER_INSTANCE,
; 5434 :                                                NextFilterInstance);
; 5435 : 
; 5436 :             //
; 5437 :             // process the streams on this list
; 5438 :             //
; 5439 : 
; 5440 :             if (SCCheckFilterInstanceStreamsForIrp(FilterInstance, NULL)) {
; 5441 : 
; 5442 :                 //
; 5443 :                 // we found one.  jump back to loop back through since the
; 5444 :                 // spinlock
; 5445 :                 // had to be released and reaquired to cancel the irp.
; 5446 :                 //
; 5447 : 
; 5448 :                 goto checkfilters;
; 5449 : 
; 5450 :             }
; 5451 :             //
; 5452 :             // get the list entry for this instance
; 5453 :             //
; 5454 : 
; 5455 :             FilterListEntry = &FilterInstance->NextFilterInstance;
; 5456 :         }
; 5457 : 
; 5458 :         //
; 5459 :         // now process any requests on the device itself
; 5460 :         //
; 5461 : 
; 5462 :         while (SCCheckRequestsForIrp(
; 5463 :          &DeviceExtension->OutstandingQueue, NULL, TRUE, DeviceExtension)) {
; 5464 : 
; 5465 :         }
; 5466 : 
; 5467 :         KeReleaseSpinLock(&DeviceExtension->SpinLock, Irql);
; 5468 : 
; 5469 : #endif
; 5470 : 
; 5471 :         //
; 5472 :         // Block on the removal event which is signaled as the last I/O
; 5473 :         // completes.
; 5474 :         //
; 5475 : 
; 5476 :         KeWaitForSingleObject(&DeviceExtension->RemoveEvent,
; 5477 :                               Executive,
; 5478 :                               KernelMode,
; 5479 :                               FALSE,    // not alertable
; 5480 :                               NULL);

  00037	33 c0		 xor	 eax, eax
  00039	50		 push	 eax
  0003a	50		 push	 eax
  0003b	50		 push	 eax
  0003c	50		 push	 eax
  0003d	81 c6 48 01 00
	00		 add	 esi, 328		; 00000148H
  00043	56		 push	 esi
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20
$L14199:

; 5481 :     }
; 5482 :     //
; 5483 :     // restore the counter to 1-based, since we've now assured that all
; 5484 :     // I/O to the device has completed.
; 5485 :     //
; 5486 : 
; 5487 :     InterlockedIncrement(&DeviceExtension->OneBasedIoCount);

  0004a	8b cf		 mov	 ecx, edi
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedIncrement@4
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi

; 5488 : 
; 5489 :     return;
; 5490 : }

  00054	c2 04 00	 ret	 4
_SCWaitForOutstandingIo@4 ENDP
_TEXT	ENDS
PUBLIC	_SCShowIoPending@8
; Function compile flags: /Ogsy
;	COMDAT _SCShowIoPending@8
PAGE	SEGMENT
_DeviceExtension$ = 8					; size = 4
_Irp$ = 12						; size = 4
_SCShowIoPending@8 PROC NEAR				; COMDAT

; 5514 : {

  00000	56		 push	 esi

; 5515 :     PAGED_CODE();
; 5516 : 
; 5517 :     //
; 5518 :     // assume that the device is accessible and show one more request.
; 5519 :     // if it's not accessible, we'll show one less.   do it in this order
; 5520 :     // to prevent a race where the inaccessible flag has been set, but the
; 5521 :     // the i/o count has not been dec'd yet.
; 5522 :     //
; 5523 : 
; 5524 :     InterlockedIncrement(&DeviceExtension->OneBasedIoCount);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _DeviceExtension$[esp]
  00005	57		 push	 edi
  00006	8d be 6c 01 00
	00		 lea	 edi, DWORD PTR [esi+364]
  0000c	8b cf		 mov	 ecx, edi
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedIncrement@4

; 5525 : 
; 5526 :     if (DeviceExtension->Flags & DEVICE_FLAGS_DEVICE_INACCESSIBLE) {

  00014	f6 86 9d 00 00
	00 01		 test	 BYTE PTR [esi+157], 1
  0001b	74 20		 je	 SHORT $L14206

; 5527 : 
; 5528 :         NTSTATUS Status = STATUS_INVALID_DEVICE_REQUEST;
; 5529 : 
; 5530 :         InterlockedDecrement(&DeviceExtension->OneBasedIoCount);

  0001d	8b cf		 mov	 ecx, edi
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedDecrement@4

; 5531 : 
; 5532 :         Irp->IoStatus.Status = STATUS_INVALID_DEVICE_REQUEST;

  00025	8b 4c 24 10	 mov	 ecx, DWORD PTR _Irp$[esp+4]
  00029	be 10 00 00 c0	 mov	 esi, -1073741808	; c0000010H

; 5533 : 
; 5534 :         IoCompleteRequest(Irp, IO_NO_INCREMENT);

  0002e	32 d2		 xor	 dl, dl
  00030	89 71 18	 mov	 DWORD PTR [ecx+24], esi
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8

; 5535 : 
; 5536 :         return (Status);

  00039	8b c6		 mov	 eax, esi
  0003b	eb 02		 jmp	 SHORT $L14205
$L14206:

; 5537 :     }
; 5538 :     return (STATUS_SUCCESS);

  0003d	33 c0		 xor	 eax, eax
$L14205:
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi

; 5539 : 
; 5540 : }

  00041	c2 08 00	 ret	 8
_SCShowIoPending@8 ENDP
PAGE	ENDS
PUBLIC	_SCCallNextDriver@8
EXTRN	_SCSynchCompletionRoutine@12:NEAR
EXTRN	__imp__PoCallDriver@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCCallNextDriver@8
PAGE	SEGMENT
_Event$ = -16						; size = 16
_DeviceExtension$ = 8					; size = 4
_Irp$ = 12						; size = 4
_SCCallNextDriver@8 PROC NEAR				; COMDAT

; 5562 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 5563 :     KEVENT          Event;
; 5564 :     PIO_STACK_LOCATION IrpStack,
; 5565 :                     NextStack;
; 5566 :     NTSTATUS        Status;
; 5567 : 
; 5568 :     PAGED_CODE();
; 5569 : 
; 5570 :     if ( NULL == DeviceExtension->AttachedPdo ) {

  00006	8b 45 08	 mov	 eax, DWORD PTR _DeviceExtension$[ebp]
  00009	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00010	75 04		 jne	 SHORT $L14221

; 5571 :         //
; 5572 :         // DO has been detached, return success directly.
; 5573 :         //
; 5574 :         return STATUS_SUCCESS;

  00012	33 c0		 xor	 eax, eax
  00014	eb 7d		 jmp	 SHORT $L14215
$L14221:

; 5575 :     }
; 5576 : 
; 5577 :     IrpStack = IoGetCurrentIrpStackLocation(Irp);

  00016	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  00019	53		 push	 ebx
  0001a	8b 58 60	 mov	 ebx, DWORD PTR [eax+96]
  0001d	56		 push	 esi
  0001e	57		 push	 edi

; 5578 : 
; 5579 :     NextStack = IoGetNextIrpStackLocation(Irp);
; 5580 :     ASSERT(NextStack != NULL);
; 5581 :     RtlCopyMemory(NextStack, IrpStack, sizeof(IO_STACK_LOCATION));

  0001f	6a 09		 push	 9
  00021	59		 pop	 ecx

; 5582 : 
; 5583 :     KeInitializeEvent(&Event, SynchronizationEvent, FALSE);

  00022	6a 00		 push	 0
  00024	6a 01		 push	 1
  00026	8d 45 f0	 lea	 eax, DWORD PTR _Event$[ebp]
  00029	8d 7b dc	 lea	 edi, DWORD PTR [ebx-36]
  0002c	8b f3		 mov	 esi, ebx
  0002e	50		 push	 eax
  0002f	f3 a5		 rep movsd
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeEvent@12

; 5584 : 
; 5585 :     IoSetCompletionRoutine(Irp,
; 5586 :                            SCSynchCompletionRoutine,
; 5587 :                            &Event,
; 5588 :                            TRUE,
; 5589 :                            TRUE,
; 5590 :                            TRUE);

  00037	8b 75 0c	 mov	 esi, DWORD PTR _Irp$[ebp]
  0003a	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0003d	83 e8 24	 sub	 eax, 36			; 00000024H
  00040	8d 4d f0	 lea	 ecx, DWORD PTR _Event$[ebp]
  00043	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], OFFSET FLAT:_SCSynchCompletionRoutine@12
  0004a	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  0004d	c6 40 03 e0	 mov	 BYTE PTR [eax+3], 224	; 000000e0H

; 5591 : 
; 5592 :     if ( IRP_MJ_POWER != IrpStack->MajorFunction ) {

  00051	80 3b 16	 cmp	 BYTE PTR [ebx], 22	; 00000016H

; 5593 :     
; 5594 :         Status = IoCallDriver(DeviceExtension->AttachedPdo, Irp);

  00054	8b 45 08	 mov	 eax, DWORD PTR _DeviceExtension$[ebp]
  00057	74 10		 je	 SHORT $L14230
  00059	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0005f	8b d6		 mov	 edx, esi
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCallDriver@8

; 5595 :         
; 5596 :     } else {

  00067	eb 0d		 jmp	 SHORT $L14231
$L14230:

; 5597 : 
; 5598 :         //
; 5599 :         // power Irp, use PoCallDriver()
; 5600 :         //
; 5601 :         Status = PoCallDriver( DeviceExtension->AttachedPdo, Irp );

  00069	56		 push	 esi
  0006a	ff b0 a4 00 00
	00		 push	 DWORD PTR [eax+164]
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PoCallDriver@8
$L14231:

; 5602 :     }
; 5603 :        
; 5604 : 
; 5605 :     if (Status == STATUS_PENDING) {

  00076	3d 03 01 00 00	 cmp	 eax, 259		; 00000103H
  0007b	75 13		 jne	 SHORT $L14233

; 5606 :         KeWaitForSingleObject(&Event, Executive, KernelMode, FALSE, NULL);

  0007d	33 c0		 xor	 eax, eax
  0007f	50		 push	 eax
  00080	50		 push	 eax
  00081	50		 push	 eax
  00082	50		 push	 eax
  00083	8d 45 f0	 lea	 eax, DWORD PTR _Event$[ebp]
  00086	50		 push	 eax
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20

; 5607 :         Status = Irp->IoStatus.Status;

  0008d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
$L14233:
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
$L14215:

; 5608 :     }
; 5609 :     return (Status);
; 5610 : }

  00093	c9		 leave
  00094	c2 08 00	 ret	 8
_SCCallNextDriver@8 ENDP
PAGE	ENDS
PUBLIC	_SCMinidriverTimeFunction@4
; Function compile flags: /Ogsy
;	COMDAT _SCMinidriverTimeFunction@4
_TEXT	SEGMENT
_Irql$ = 8						; size = 1
_TimeContext$ = 8					; size = 4
_SCMinidriverTimeFunction@4 PROC NEAR			; COMDAT

; 5627 : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 5628 : 
; 5629 :     PDEVICE_EXTENSION DeviceExtension =
; 5630 :     (PDEVICE_EXTENSION) TimeContext->HwDeviceExtension - 1;

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR _TimeContext$[esp+4]
  00006	56		 push	 esi
  00007	8b 75 00	 mov	 esi, DWORD PTR [ebp]
  0000a	57		 push	 edi

; 5631 :     KIRQL           Irql;
; 5632 :     PSTREAM_OBJECT  StreamObject = CONTAINING_RECORD(
; 5633 :                                                 TimeContext->HwStreamObject,
; 5634 :                                                      STREAM_OBJECT,
; 5635 :                                                      HwStreamObject);

  0000b	8b 7d 04	 mov	 edi, DWORD PTR [ebp+4]
  0000e	81 ee 24 02 00
	00		 sub	 esi, 548		; 00000224H

; 5636 : 
; 5637 :     //
; 5638 :     // call the minidriver to process the time function
; 5639 :     //
; 5640 : 
; 5641 :     KeAcquireSpinLock(&DeviceExtension->SpinLock, &Irql);

  00014	8d 9e d8 00 00
	00		 lea	 ebx, DWORD PTR [esi+216]
  0001a	8b cb		 mov	 ecx, ebx
  0001c	81 ef a8 00 00
	00		 sub	 edi, 168		; 000000a8H
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4

; 5642 : 
; 5643 : 
; 5644 :     DeviceExtension->SynchronizeExecution(
; 5645 :                                           DeviceExtension->InterruptObject,
; 5646 :                                           (PVOID) StreamObject->
; 5647 :                                HwStreamObject.HwClockObject.HwClockFunction,
; 5648 :                                           TimeContext);

  00028	55		 push	 ebp
  00029	ff b7 bc 00 00
	00		 push	 DWORD PTR [edi+188]
  0002f	88 44 24 1c	 mov	 BYTE PTR _Irql$[esp+20], al
  00033	ff b6 ac 00 00
	00		 push	 DWORD PTR [esi+172]
  00039	ff 96 d4 00 00
	00		 call	 DWORD PTR [esi+212]

; 5649 : 
; 5650 :     KeReleaseSpinLock(&DeviceExtension->SpinLock, Irql);

  0003f	8a 54 24 14	 mov	 dl, BYTE PTR _Irql$[esp+12]
  00043	8b cb		 mov	 ecx, ebx
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5d		 pop	 ebp
  0004e	5b		 pop	 ebx

; 5651 : 
; 5652 : }

  0004f	c2 04 00	 ret	 4
_SCMinidriverTimeFunction@4 ENDP
_TEXT	ENDS
PUBLIC	_SCGetStreamTime@4
; Function compile flags: /Ogsy
;	COMDAT _SCGetStreamTime@4
_TEXT	SEGMENT
_TimeContext$ = -32					; size = 32
_FileObject$ = 8					; size = 4
_SCGetStreamTime@4 PROC NEAR				; COMDAT

; 5671 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 5672 :     HW_TIME_CONTEXT TimeContext;
; 5673 : 
; 5674 :     PCLOCK_INSTANCE ClockInstance = (PCLOCK_INSTANCE) FileObject->FsContext;

  00006	8b 45 08	 mov	 eax, DWORD PTR _FileObject$[ebp]
  00009	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 5675 : 
; 5676 :     TimeContext.HwStreamObject = &ClockInstance->StreamObject->HwStreamObject;

  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  00015	89 4d e4	 mov	 DWORD PTR _TimeContext$[ebp+4], ecx

; 5677 : 
; 5678 :     TimeContext.HwDeviceExtension = ClockInstance->StreamObject->
; 5679 :         DeviceExtension->HwDeviceExtension;

  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001b	8b 80 14 01 00
	00		 mov	 eax, DWORD PTR [eax+276]
  00021	8b 80 c8 00 00
	00		 mov	 eax, DWORD PTR [eax+200]

; 5680 : 
; 5681 :     TimeContext.Function = TIME_GET_STREAM_TIME;

  00027	83 65 e8 00	 and	 DWORD PTR _TimeContext$[ebp+8], 0
  0002b	89 45 e0	 mov	 DWORD PTR _TimeContext$[ebp], eax

; 5682 : 
; 5683 :     SCMinidriverTimeFunction(&TimeContext);

  0002e	8d 45 e0	 lea	 eax, DWORD PTR _TimeContext$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _SCMinidriverTimeFunction@4

; 5684 : 
; 5685 :     return (TimeContext.Time);

  00037	8b 45 f0	 mov	 eax, DWORD PTR _TimeContext$[ebp+16]
  0003a	8b 55 f4	 mov	 edx, DWORD PTR _TimeContext$[ebp+20]

; 5686 : }

  0003d	c9		 leave
  0003e	c2 04 00	 ret	 4
_SCGetStreamTime@4 ENDP
_TEXT	ENDS
PUBLIC	@SCGetPhysicalTime@4
; Function compile flags: /Ogsy
;	COMDAT @SCGetPhysicalTime@4
_TEXT	SEGMENT
_TimeContext$ = -32					; size = 32
@SCGetPhysicalTime@4 PROC NEAR				; COMDAT
; _FileObject$ = ecx

; 5704 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 5705 :     HW_TIME_CONTEXT TimeContext;
; 5706 : 
; 5707 :     PCLOCK_INSTANCE ClockInstance = (PCLOCK_INSTANCE) FileObject->FsContext;

  00006	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 5708 : 
; 5709 :     TimeContext.HwStreamObject = &ClockInstance->StreamObject->HwStreamObject;

  00009	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000c	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  00012	89 4d e4	 mov	 DWORD PTR _TimeContext$[ebp+4], ecx

; 5710 : 
; 5711 :     TimeContext.HwDeviceExtension = ClockInstance->StreamObject->
; 5712 :         DeviceExtension->HwDeviceExtension;

  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	8b 80 14 01 00
	00		 mov	 eax, DWORD PTR [eax+276]
  0001e	8b 80 c8 00 00
	00		 mov	 eax, DWORD PTR [eax+200]
  00024	89 45 e0	 mov	 DWORD PTR _TimeContext$[ebp], eax

; 5713 : 
; 5714 :     TimeContext.Function = TIME_READ_ONBOARD_CLOCK;
; 5715 : 
; 5716 :     SCMinidriverTimeFunction(&TimeContext);

  00027	8d 45 e0	 lea	 eax, DWORD PTR _TimeContext$[ebp]
  0002a	50		 push	 eax
  0002b	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _TimeContext$[ebp+8], 1
  00032	e8 00 00 00 00	 call	 _SCMinidriverTimeFunction@4

; 5717 : 
; 5718 :     return (TimeContext.Time);

  00037	8b 45 f0	 mov	 eax, DWORD PTR _TimeContext$[ebp+16]
  0003a	8b 55 f4	 mov	 edx, DWORD PTR _TimeContext$[ebp+20]

; 5719 : }

  0003d	c9		 leave
  0003e	c3		 ret	 0
@SCGetPhysicalTime@4 ENDP
_TEXT	ENDS
PUBLIC	@SCGetSynchronizedTime@8
; Function compile flags: /Ogsy
;	COMDAT @SCGetSynchronizedTime@8
_TEXT	SEGMENT
_TimeContext$ = -32					; size = 32
@SCGetSynchronizedTime@8 PROC NEAR			; COMDAT
; _FileObject$ = ecx
; _SystemTime$ = edx

; 5739 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 5740 :     HW_TIME_CONTEXT TimeContext;
; 5741 : 
; 5742 :     PCLOCK_INSTANCE ClockInstance = (PCLOCK_INSTANCE) FileObject->FsContext;

  00006	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 5743 : 
; 5744 :     TimeContext.HwStreamObject = &ClockInstance->StreamObject->HwStreamObject;

  00009	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000c	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  00012	89 4d e4	 mov	 DWORD PTR _TimeContext$[ebp+4], ecx

; 5745 : 
; 5746 :     TimeContext.HwDeviceExtension = ClockInstance->StreamObject->
; 5747 :         DeviceExtension->HwDeviceExtension;

  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	8b 80 14 01 00
	00		 mov	 eax, DWORD PTR [eax+276]
  0001e	8b 80 c8 00 00
	00		 mov	 eax, DWORD PTR [eax+200]

; 5748 : 
; 5749 :     TimeContext.Function = TIME_GET_STREAM_TIME;

  00024	83 65 e8 00	 and	 DWORD PTR _TimeContext$[ebp+8], 0
  00028	56		 push	 esi
  00029	89 45 e0	 mov	 DWORD PTR _TimeContext$[ebp], eax

; 5750 : 
; 5751 :     SCMinidriverTimeFunction(&TimeContext);

  0002c	8d 45 e0	 lea	 eax, DWORD PTR _TimeContext$[ebp]
  0002f	50		 push	 eax
  00030	8b f2		 mov	 esi, edx
  00032	e8 00 00 00 00	 call	 _SCMinidriverTimeFunction@4

; 5752 : 
; 5753 :     *SystemTime = TimeContext.SystemTime;

  00037	8b 45 f8	 mov	 eax, DWORD PTR _TimeContext$[ebp+24]

; 5754 :     return (TimeContext.Time);

  0003a	8b 55 f4	 mov	 edx, DWORD PTR _TimeContext$[ebp+20]
  0003d	89 06		 mov	 DWORD PTR [esi], eax
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _TimeContext$[ebp+28]
  00042	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00045	8b 45 f0	 mov	 eax, DWORD PTR _TimeContext$[ebp+16]
  00048	5e		 pop	 esi

; 5755 : }

  00049	c9		 leave
  0004a	c3		 ret	 0
@SCGetSynchronizedTime@8 ENDP
_TEXT	ENDS
PUBLIC	_SCMapMemoryAddress@28
EXTRN	__imp__MmMapIoSpace@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCMapMemoryAddress@28
PAGE	SEGMENT
_AccessRanges$ = 8					; size = 4
_TranslatedAddress$ = 12				; size = 8
_ConfigInfo$ = 20					; size = 4
_DeviceExtension$ = 24					; size = 4
_ResourceList$ = 28					; size = 4
_PartialResourceDescriptor$ = 32			; size = 4
_SCMapMemoryAddress@28 PROC NEAR			; COMDAT

; 5824 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 5825 :     PMAPPED_ADDRESS newMappedAddress;
; 5826 : 
; 5827 :     PAGED_CODE();
; 5828 : 
; 5829 :     //
; 5830 :     // Now we need to map a linear address to the physical
; 5831 :     // address that HalTranslateBusAddress provided us.
; 5832 :     //
; 5833 : 
; 5834 :     //
; 5835 :     // set the access range in the structure.
; 5836 :     //
; 5837 : 
; 5838 :     AccessRanges->RangeLength = PartialResourceDescriptor->u.Memory.Length;

  00004	8b 75 08	 mov	 esi, DWORD PTR _AccessRanges$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 20	 mov	 edi, DWORD PTR _PartialResourceDescriptor$[ebp]
  0000b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 5839 : 
; 5840 :     AccessRanges->RangeInMemory = TRUE;
; 5841 : 
; 5842 :     AccessRanges->RangeStart.QuadPart = (ULONG_PTR) MmMapIoSpace(
; 5843 :                                                           TranslatedAddress,
; 5844 :                                                   AccessRanges->RangeLength,
; 5845 :                                                                  FALSE  // No caching
; 5846 :         );

  0000e	6a 00		 push	 0
  00010	50		 push	 eax
  00011	ff 75 10	 push	 DWORD PTR _TranslatedAddress$[ebp+4]
  00014	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00017	ff 75 0c	 push	 DWORD PTR _TranslatedAddress$[ebp]
  0001a	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmMapIoSpace@16
  00024	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  00028	89 06		 mov	 DWORD PTR [esi], eax

; 5847 : 
; 5848 :     if (AccessRanges->RangeStart.QuadPart == 0) {

  0002a	0b 46 04	 or	 eax, DWORD PTR [esi+4]
  0002d	75 04		 jne	 SHORT $L14295

; 5849 : 
; 5850 :         //
; 5851 :         // Couldn't translate the resources, return an error
; 5852 :         // status
; 5853 :         //
; 5854 : 
; 5855 :         DebugPrint((DebugLevelFatal, "StreamClassPnP: Couldn't translate Memory Slot Resources\n"));
; 5856 :         return FALSE;

  0002f	32 c0		 xor	 al, al
  00031	eb 44		 jmp	 SHORT $L14292
$L14295:

; 5857 : 
; 5858 :     }
; 5859 :     //
; 5860 :     // Allocate memory to store mapped address for unmap.
; 5861 :     //
; 5862 : 
; 5863 :     newMappedAddress = ExAllocatePool(NonPagedPool,
; 5864 :                                       sizeof(MAPPED_ADDRESS));

  00033	68 57 64 6d 20	 push	 544040023		; 206d6457H
  00038	6a 18		 push	 24			; 00000018H
  0003a	6a 00		 push	 0
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12

; 5865 : 
; 5866 :     //
; 5867 :     // save a link to the resources if the alloc succeeded.
; 5868 :     // if it failed, don't worry about it.
; 5869 :     //
; 5870 : 
; 5871 :     if (newMappedAddress != NULL) {

  00042	85 c0		 test	 eax, eax
  00044	74 2f		 je	 SHORT $L14298

; 5872 : 
; 5873 :         //
; 5874 :         // Store mapped address, bytes count, etc.
; 5875 :         //
; 5876 : 
; 5877 :         newMappedAddress->MappedAddress = (PVOID)
; 5878 :             AccessRanges->RangeStart.QuadPart;

  00046	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00048	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 5879 :         newMappedAddress->NumberOfBytes =
; 5880 :             AccessRanges->RangeLength;

  0004b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004e	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 5881 :         newMappedAddress->IoAddress =
; 5882 :             PartialResourceDescriptor->u.Memory.Start;

  00051	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00054	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00057	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0005a	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 5883 :         newMappedAddress->BusNumber =
; 5884 :             ConfigInfo->SystemIoBusNumber;

  0005d	8b 4d 14	 mov	 ecx, DWORD PTR _ConfigInfo$[ebp]
  00060	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00063	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 5885 : 
; 5886 :         //
; 5887 :         // Link current list to new entry.
; 5888 :         //
; 5889 : 
; 5890 :         newMappedAddress->NextMappedAddress =
; 5891 :             DeviceExtension->MappedAddressList;

  00066	8b 4d 18	 mov	 ecx, DWORD PTR _DeviceExtension$[ebp]
  00069	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  0006f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00071	89 10		 mov	 DWORD PTR [eax], edx

; 5892 : 
; 5893 :         //
; 5894 :         // Point anchor at new list.
; 5895 :         //
; 5896 : 
; 5897 :         DeviceExtension->MappedAddressList = newMappedAddress;

  00073	89 01		 mov	 DWORD PTR [ecx], eax
$L14298:

; 5898 : 
; 5899 :     }                           // if newmappedaddress
; 5900 :     return TRUE;

  00075	b0 01		 mov	 al, 1
$L14292:
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi

; 5901 : }

  00079	5d		 pop	 ebp
  0007a	c2 1c 00	 ret	 28			; 0000001cH
_SCMapMemoryAddress@28 ENDP
PAGE	ENDS
PUBLIC	_SCUpdatePersistedProperties@12
EXTRN	__imp__IoOpenDeviceRegistryKey@16:NEAR
EXTRN	__imp__sprintf:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__imp__RtlInitAnsiString@8:NEAR
EXTRN	__imp__RtlAnsiStringToUnicodeString@12:NEAR
EXTRN	__imp__RtlFreeUnicodeString@4:NEAR
EXTRN	__imp__KsUnserializeObjectPropertiesFromRegistry@12:NEAR
EXTRN	__imp__ZwClose@4:NEAR
;	COMDAT _SCUpdatePersistedProperties@12
PAGE	SEGMENT
$SG14314 DB	'Pin%d\Properties', 00H
; Function compile flags: /Ogsy
_AnsiKeyName$ = -56					; size = 8
_UnicodeKeyName$ = -48					; size = 8
_handle$ = -40						; size = 4
_AsciiKeyName$ = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_StreamObject$ = 8					; size = 4
_DeviceExtension$ = 12					; size = 4
_FileObject$ = 16					; size = 4
_SCUpdatePersistedProperties@12 PROC NEAR		; COMDAT

; 5921 : {

  00012	55		 push	 ebp
  00013	8b ec		 mov	 ebp, esp
  00015	83 ec 38	 sub	 esp, 56			; 00000038H
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 5922 :     NTSTATUS        Status;
; 5923 :     HANDLE          handle;
; 5924 :     CHAR            AsciiKeyName[32];
; 5925 :     ANSI_STRING     AnsiKeyName;
; 5926 :     UNICODE_STRING  UnicodeKeyName;
; 5927 : 
; 5928 :     PAGED_CODE();
; 5929 : 
; 5930 :     Status = IoOpenDeviceRegistryKey(DeviceExtension->PhysicalDeviceObject,
; 5931 :                                      PLUGPLAY_REGKEY_DRIVER,
; 5932 :                                      STANDARD_RIGHTS_ALL,
; 5933 :                                      &handle);

  00020	8d 45 d8	 lea	 eax, DWORD PTR _handle$[ebp]
  00023	50		 push	 eax
  00024	8b 45 0c	 mov	 eax, DWORD PTR _DeviceExtension$[ebp]
  00027	68 00 00 1f 00	 push	 2031616			; 001f0000H
  0002c	6a 02		 push	 2
  0002e	ff b0 c4 00 00
	00		 push	 DWORD PTR [eax+196]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoOpenDeviceRegistryKey@16

; 5934 : 
; 5935 :     //
; 5936 :     // loop through our table of strings,
; 5937 :     // reading the registry for each.
; 5938 :     //
; 5939 : 
; 5940 :     if (NT_SUCCESS(Status)) {

  0003a	85 c0		 test	 eax, eax
  0003c	7c 60		 jl	 SHORT $L14313

; 5941 : 
; 5942 :         //
; 5943 :         // create the subkey for the pin, in the form of "Pin0\Properties",
; 5944 :         // etc.
; 5945 :         //
; 5946 : 
; 5947 :         sprintf(AsciiKeyName, "Pin%d\\Properties", StreamObject->HwStreamObject.StreamNumber);

  0003e	8b 45 08	 mov	 eax, DWORD PTR _StreamObject$[ebp]
  00041	ff b0 ac 00 00
	00		 push	 DWORD PTR [eax+172]
  00047	8d 45 dc	 lea	 eax, DWORD PTR _AsciiKeyName$[ebp]
  0004a	68 00 00 00 00	 push	 OFFSET FLAT:$SG14314
  0004f	50		 push	 eax
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5948 :         RtlInitAnsiString(&AnsiKeyName, AsciiKeyName);

  00059	8d 45 dc	 lea	 eax, DWORD PTR _AsciiKeyName$[ebp]
  0005c	50		 push	 eax
  0005d	8d 45 c8	 lea	 eax, DWORD PTR _AnsiKeyName$[ebp]
  00060	50		 push	 eax
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitAnsiString@8

; 5949 : 
; 5950 : 
; 5951 :         if (NT_SUCCESS(RtlAnsiStringToUnicodeString(&UnicodeKeyName,
; 5952 :                                                     &AnsiKeyName, TRUE))) {

  00067	6a 01		 push	 1
  00069	8d 45 c8	 lea	 eax, DWORD PTR _AnsiKeyName$[ebp]
  0006c	50		 push	 eax
  0006d	8d 45 d0	 lea	 eax, DWORD PTR _UnicodeKeyName$[ebp]
  00070	50		 push	 eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAnsiStringToUnicodeString@12
  00077	85 c0		 test	 eax, eax
  00079	7c 1a		 jl	 SHORT $L14316

; 5953 :             //
; 5954 :             // call KS to unserialize the properties.
; 5955 :             //
; 5956 : 
; 5957 :             KsUnserializeObjectPropertiesFromRegistry(FileObject,
; 5958 :                                                       handle,
; 5959 :                                                       &UnicodeKeyName);

  0007b	8d 45 d0	 lea	 eax, DWORD PTR _UnicodeKeyName$[ebp]
  0007e	50		 push	 eax
  0007f	ff 75 d8	 push	 DWORD PTR _handle$[ebp]
  00082	ff 75 10	 push	 DWORD PTR _FileObject$[ebp]
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsUnserializeObjectPropertiesFromRegistry@12

; 5960 :             //
; 5961 :             // free the unicode string
; 5962 :             //
; 5963 : 
; 5964 :             RtlFreeUnicodeString(&UnicodeKeyName);

  0008b	8d 45 d0	 lea	 eax, DWORD PTR _UnicodeKeyName$[ebp]
  0008e	50		 push	 eax
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlFreeUnicodeString@4
$L14316:

; 5965 : 
; 5966 :         }                       // if rtl..
; 5967 :         //
; 5968 :         // close the registry handle.
; 5969 :         //
; 5970 : 
; 5971 :         ZwClose(handle);

  00095	ff 75 d8	 push	 DWORD PTR _handle$[ebp]
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ZwClose@4
$L14313:

; 5972 : 
; 5973 : 
; 5974 :     }                           // status = success
; 5975 : }

  0009e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	c9		 leave
  000a7	c2 0c 00	 ret	 12			; 0000000cH
_SCUpdatePersistedProperties@12 ENDP
PAGE	ENDS
PUBLIC	_SCQueryCapabilities@8
EXTRN	__imp__IoAllocateIrp@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCQueryCapabilities@8
PAGE	SEGMENT
_Event$ = -20						; size = 16
_Irp$ = -4						; size = 4
_PdoDeviceObject$ = 8					; size = 4
_DeviceCapabilities$ = 12				; size = 4
_SCQueryCapabilities@8 PROC NEAR			; COMDAT

; 5998 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 5999 :     PIO_STACK_LOCATION NextStack;
; 6000 :     PIRP            Irp;
; 6001 :     NTSTATUS        Status;
; 6002 :     KEVENT          Event;
; 6003 : 
; 6004 :     PAGED_CODE();
; 6005 : 
; 6006 :     //
; 6007 :     // allocate an IRP for the call.
; 6008 :     //
; 6009 : 
; 6010 :     Irp = IoAllocateIrp(PdoDeviceObject->StackSize, FALSE);

  00006	8b 45 08	 mov	 eax, DWORD PTR _PdoDeviceObject$[ebp]
  00009	0f be 40 30	 movsx	 eax, BYTE PTR [eax+48]
  0000d	6a 00		 push	 0
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoAllocateIrp@8

; 6011 : 
; 6012 :     if (!Irp) {

  00016	85 c0		 test	 eax, eax
  00018	89 45 fc	 mov	 DWORD PTR _Irp$[ebp], eax
  0001b	75 0a		 jne	 SHORT $L14326

; 6013 : 
; 6014 :         return STATUS_INSUFFICIENT_RESOURCES;

  0001d	b8 9a 00 00 c0	 mov	 eax, -1073741670	; c000009aH
  00022	e9 91 00 00 00	 jmp	 $L14321
$L14326:
  00027	53		 push	 ebx

; 6015 :     }
; 6016 :     NextStack = IoGetNextIrpStackLocation(Irp);
; 6017 : 
; 6018 :     ASSERT(NextStack != NULL);
; 6019 :     NextStack->MajorFunction = IRP_MJ_PNP;
; 6020 :     NextStack->MinorFunction = IRP_MN_QUERY_CAPABILITIES;
; 6021 : 
; 6022 :     //
; 6023 :     // Initialize the capabilities that we will send down
; 6024 :     //
; 6025 :     RtlZeroMemory(DeviceCapabilities, sizeof(DEVICE_CAPABILITIES) );

  00028	8b 5d 0c	 mov	 ebx, DWORD PTR _DeviceCapabilities$[ebp]
  0002b	56		 push	 esi
  0002c	8b 70 60	 mov	 esi, DWORD PTR [eax+96]
  0002f	57		 push	 edi
  00030	6a 10		 push	 16			; 00000010H
  00032	59		 pop	 ecx
  00033	33 c0		 xor	 eax, eax
  00035	c6 46 dd 09	 mov	 BYTE PTR [esi-35], 9

; 6026 :     DeviceCapabilities->Size = sizeof(DEVICE_CAPABILITIES);
; 6027 :     DeviceCapabilities->Version = 1;
; 6028 :     DeviceCapabilities->Address = -1;
; 6029 :     DeviceCapabilities->UINumber = -1;
; 6030 : 
; 6031 :     KeInitializeEvent(&Event, NotificationEvent, FALSE);

  00039	50		 push	 eax
  0003a	83 ee 24	 sub	 esi, 36			; 00000024H
  0003d	c6 06 1b	 mov	 BYTE PTR [esi], 27	; 0000001bH
  00040	8b fb		 mov	 edi, ebx
  00042	f3 ab		 rep stosd
  00044	83 4b 08 ff	 or	 DWORD PTR [ebx+8], -1
  00048	83 4b 0c ff	 or	 DWORD PTR [ebx+12], -1
  0004c	50		 push	 eax
  0004d	8d 45 ec	 lea	 eax, DWORD PTR _Event$[ebp]
  00050	50		 push	 eax
  00051	66 c7 03 40 00	 mov	 WORD PTR [ebx], 64	; 00000040H
  00056	66 c7 43 02 01
	00		 mov	 WORD PTR [ebx+2], 1
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeEvent@12

; 6032 : 
; 6033 :     IoSetCompletionRoutine(Irp,
; 6034 :                            SCSynchCompletionRoutine,
; 6035 :                            &Event,
; 6036 :                            TRUE,
; 6037 :                            TRUE,
; 6038 :                            TRUE);

  00062	8b 7d fc	 mov	 edi, DWORD PTR _Irp$[ebp]
  00065	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  00068	83 e8 24	 sub	 eax, 36			; 00000024H
  0006b	8d 4d ec	 lea	 ecx, DWORD PTR _Event$[ebp]
  0006e	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 6039 : 
; 6040 :     NextStack->Parameters.DeviceCapabilities.Capabilities = DeviceCapabilities;
; 6041 : 
; 6042 :     DebugPrint((DebugLevelInfo, 
; 6043 :                 "Capabilities Version %x Flags %x\n", 
; 6044 :                 (ULONG)DeviceCapabilities->Version,
; 6045 :                 *(UNALIGNED ULONG*)(&DeviceCapabilities->Version+1)));
; 6046 : 
; 6047 :     Irp->IoStatus.Status = STATUS_NOT_SUPPORTED;    // bug #282910
; 6048 : 
; 6049 :     Status = IoCallDriver(PdoDeviceObject,
; 6050 :                           Irp);

  00071	8b 4d 08	 mov	 ecx, DWORD PTR _PdoDeviceObject$[ebp]
  00074	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], OFFSET FLAT:_SCSynchCompletionRoutine@12
  0007b	c6 40 03 e0	 mov	 BYTE PTR [eax+3], 224	; 000000e0H
  0007f	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00082	8b d7		 mov	 edx, edi
  00084	c7 47 18 bb 00
	00 c0		 mov	 DWORD PTR [edi+24], -1073741637 ; c00000bbH
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCallDriver@8

; 6051 : 
; 6052 :     if (Status == STATUS_PENDING) {

  00091	3d 03 01 00 00	 cmp	 eax, 259		; 00000103H
  00096	75 11		 jne	 SHORT $L14338

; 6053 : 
; 6054 :         //
; 6055 :         // block waiting for completion
; 6056 :         //
; 6057 : 
; 6058 :         KeWaitForSingleObject(
; 6059 :                               &Event,
; 6060 :                               Suspended,
; 6061 :                               KernelMode,
; 6062 :                               FALSE,
; 6063 :                               NULL);

  00098	33 c0		 xor	 eax, eax
  0009a	50		 push	 eax
  0009b	50		 push	 eax
  0009c	50		 push	 eax
  0009d	6a 05		 push	 5
  0009f	8d 45 ec	 lea	 eax, DWORD PTR _Event$[ebp]
  000a2	50		 push	 eax
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20
$L14338:

; 6064 :     }
; 6065 :     //
; 6066 :     // obtain final status and free IRP.
; 6067 :     //
; 6068 : 
; 6069 :     Status = Irp->IoStatus.Status;

  000a9	8b 77 18	 mov	 esi, DWORD PTR [edi+24]

; 6070 : 
; 6071 :     IoFreeIrp(Irp);

  000ac	57		 push	 edi
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoFreeIrp@4
  000b3	5f		 pop	 edi

; 6072 : 
; 6073 :     return (Status);

  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
$L14321:

; 6074 : 
; 6075 : }

  000b8	c9		 leave
  000b9	c2 08 00	 ret	 8
_SCQueryCapabilities@8 ENDP
PAGE	ENDS
PUBLIC	_SCEnableEventSynchronized@4
; Function compile flags: /Ogsy
;	COMDAT _SCEnableEventSynchronized@4
_TEXT	SEGMENT
_ServiceContext$ = 8					; size = 4
_SCEnableEventSynchronized@4 PROC NEAR			; COMDAT

; 6103 : {

  00000	53		 push	 ebx

; 6104 :     PHW_EVENT_DESCRIPTOR Event = ServiceContext;
; 6105 :     NTSTATUS        Status = STATUS_SUCCESS;
; 6106 : 
; 6107 :     PSTREAM_OBJECT  StreamObject = CONTAINING_RECORD(
; 6108 :                                                      Event->StreamObject,
; 6109 :                                                      STREAM_OBJECT,
; 6110 :                                                      HwStreamObject);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _ServiceContext$[esp]
  00005	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]

; 6111 : 
; 6112 :     PDEVICE_EXTENSION DeviceExtension = StreamObject->DeviceExtension;
; 6113 : 
; 6114 :     //
; 6115 :     // insert the event on our list, in case the minidriver decides to signal
; 6116 :     // from within this call.
; 6117 :     //
; 6118 : 
; 6119 :     InsertHeadList(&StreamObject->NotifyList,
; 6120 :                    &Event->EventEntry->ListEntry);

  00008	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0000b	81 e9 a8 00 00
	00		 sub	 ecx, 168		; 000000a8H
  00011	56		 push	 esi
  00012	8d b1 0c 01 00
	00		 lea	 esi, DWORD PTR [ecx+268]
  00018	57		 push	 edi
  00019	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001b	89 3a		 mov	 DWORD PTR [edx], edi
  0001d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00020	89 57 04	 mov	 DWORD PTR [edi+4], edx
  00023	89 16		 mov	 DWORD PTR [esi], edx

; 6121 : 
; 6122 :     //
; 6123 :     // call the minidriver's event routine, if present.
; 6124 :     //
; 6125 : 
; 6126 :     if (StreamObject->HwStreamObject.HwEventRoutine) {

  00025	8b 89 e0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+224]
  0002b	33 c0		 xor	 eax, eax
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 14		 je	 SHORT $L14988

; 6127 : 
; 6128 :         Status = StreamObject->HwStreamObject.HwEventRoutine(Event);

  00031	53		 push	 ebx
  00032	ff d1		 call	 ecx

; 6129 : 
; 6130 :     }                           // if eventroutine
; 6131 :     if (!NT_SUCCESS(Status)) {

  00034	85 c0		 test	 eax, eax
  00036	7d 0d		 jge	 SHORT $L14988

; 6132 : 
; 6133 :         //
; 6134 :         // minidriver did not like it.  remove the entry from the list.
; 6135 :         //
; 6136 : 
; 6137 :         DebugPrint((DebugLevelError, "StreamEnableEvent: minidriver failed enable!\n"));
; 6138 : 
; 6139 :         RemoveEntryList(&Event->EventEntry->ListEntry);

  00038	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]
  0003b	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003d	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]
  00040	89 0b		 mov	 DWORD PTR [ebx], ecx
  00042	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$L14988:
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx

; 6140 :     }
; 6141 :     return (Status);
; 6142 : }

  00048	c2 04 00	 ret	 4
_SCEnableEventSynchronized@4 ENDP
_TEXT	ENDS
PUBLIC	_SCEnableDeviceEventSynchronized@4
; Function compile flags: /Ogsy
;	COMDAT _SCEnableDeviceEventSynchronized@4
_TEXT	SEGMENT
_ServiceContext$ = 8					; size = 4
_SCEnableDeviceEventSynchronized@4 PROC NEAR		; COMDAT

; 6168 : {

  00000	53		 push	 ebx

; 6169 :     PHW_EVENT_DESCRIPTOR Event = ServiceContext;
; 6170 :     NTSTATUS        Status = STATUS_SUCCESS;
; 6171 : 
; 6172 :     PDEVICE_EXTENSION DeviceExtension = (PDEVICE_EXTENSION)Event->DeviceExtension - 1;
; 6173 :     IF_MF( PFILTER_INSTANCE FilterInstance = (PFILTER_INSTANCE)Event->HwInstanceExtension -1;)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _ServiceContext$[esp]
  00005	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]

; 6174 : 
; 6175 :     //
; 6176 :     // insert the event on our list, in case the minidriver decides to signal
; 6177 :     // from within this call.
; 6178 :     //
; 6179 : 	IFN_MF(InsertHeadList(&DeviceExtension->NotifyList,&Event->EventEntry->ListEntry);)
; 6180 : 	IF_MF(InsertHeadList(&FilterInstance->NotifyList,&Event->EventEntry->ListEntry);)

  00008	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0000b	83 e9 6c	 sub	 ecx, 108		; 0000006cH
  0000e	56		 push	 esi
  0000f	8d 71 40	 lea	 esi, DWORD PTR [ecx+64]
  00012	57		 push	 edi
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	89 3a		 mov	 DWORD PTR [edx], edi
  00017	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0001a	89 57 04	 mov	 DWORD PTR [edi+4], edx
  0001d	89 16		 mov	 DWORD PTR [esi], edx

; 6181 : 
; 6182 :     //
; 6183 :     // call the minidriver's event routine, if present.
; 6184 :     //
; 6185 : 
; 6186 : 	IFN_MF(
; 6187 : 	    if (DeviceExtension->HwEventRoutine) {
; 6188 : 
; 6189 :     	    Status = DeviceExtension->HwEventRoutine(Event);
; 6190 : 
; 6191 : 	    }                           // if eventroutine
; 6192 : 	)
; 6193 : 	IF_MF(
; 6194 : 	    if (FilterInstance->HwEventRoutine) {
; 6195 : 
; 6196 :     	    Status = FilterInstance->HwEventRoutine(Event);
; 6197 : 
; 6198 : 	    }                           // if eventroutine
; 6199 : 	)

  0001f	8b 49 48	 mov	 ecx, DWORD PTR [ecx+72]
  00022	33 c0		 xor	 eax, eax
  00024	85 c9		 test	 ecx, ecx
  00026	74 14		 je	 SHORT $L15002
  00028	53		 push	 ebx
  00029	ff d1		 call	 ecx

; 6200 : 
; 6201 : 	
; 6202 :     if (!NT_SUCCESS(Status)) {

  0002b	85 c0		 test	 eax, eax
  0002d	7d 0d		 jge	 SHORT $L15002

; 6203 : 
; 6204 :         //
; 6205 :         // minidriver did not like it.  remove the entry from the list.
; 6206 :         //
; 6207 : 
; 6208 :         DebugPrint((DebugLevelError, "DeviceEnableEvent: minidriver failed enable!\n"));
; 6209 : 
; 6210 :         RemoveEntryList(&Event->EventEntry->ListEntry);

  0002f	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]
  00032	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00034	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]
  00037	89 0b		 mov	 DWORD PTR [ebx], ecx
  00039	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$L15002:
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx

; 6211 :     }
; 6212 :     return (Status);
; 6213 : }

  0003f	c2 04 00	 ret	 4
_SCEnableDeviceEventSynchronized@4 ENDP
_TEXT	ENDS
PUBLIC	_SCGetDeadListSynchronized@4
; Function compile flags: /Ogsy
;	COMDAT _SCGetDeadListSynchronized@4
_TEXT	SEGMENT
_NewEventList$ = 8					; size = 4
_SCGetDeadListSynchronized@4 PROC NEAR			; COMDAT

; 6304 : 
; 6305 :     PDEVICE_EXTENSION DeviceExtension = (PDEVICE_EXTENSION) NewEventList->Flink;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _NewEventList$[esp-4]
  00004	8b 02		 mov	 eax, DWORD PTR [edx]

; 6306 :     PLIST_ENTRY     ListEntry;
; 6307 : 
; 6308 :     InitializeListHead(NewEventList);
; 6309 : 
; 6310 : 
; 6311 :     //
; 6312 :     // capture the dead list to our temp list head
; 6313 :     //
; 6314 : 
; 6315 :     while (!IsListEmpty(&DeviceExtension->DeadEventList)) {

  00006	05 9c 01 00 00	 add	 eax, 412		; 0000019cH
  0000b	89 52 04	 mov	 DWORD PTR [edx+4], edx
  0000e	89 12		 mov	 DWORD PTR [edx], edx
  00010	39 00		 cmp	 DWORD PTR [eax], eax
  00012	74 1d		 je	 SHORT $L14392
  00014	56		 push	 esi
$L14391:

; 6316 : 
; 6317 :         ListEntry = RemoveTailList(&DeviceExtension->DeadEventList);

  00015	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00018	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0001b	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001e	89 06		 mov	 DWORD PTR [esi], eax

; 6318 : 
; 6319 :         InsertHeadList(NewEventList,
; 6320 :                        ListEntry);

  00020	8b 32		 mov	 esi, DWORD PTR [edx]
  00022	89 31		 mov	 DWORD PTR [ecx], esi
  00024	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00027	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0002a	89 0a		 mov	 DWORD PTR [edx], ecx
  0002c	39 00		 cmp	 DWORD PTR [eax], eax
  0002e	75 e5		 jne	 SHORT $L14391
  00030	5e		 pop	 esi
$L14392:

; 6321 : 
; 6322 :     }                           // while dead list not empty
; 6323 : 
; 6324 :     InitializeListHead(&DeviceExtension->DeadEventList);

  00031	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00034	89 00		 mov	 DWORD PTR [eax], eax

; 6325 :     return;
; 6326 : 
; 6327 : }

  00036	c2 04 00	 ret	 4
_SCGetDeadListSynchronized@4 ENDP
_TEXT	ENDS
PUBLIC	_SCCheckIfStreamsRunning@4
; Function compile flags: /Ogsy
;	COMDAT _SCCheckIfStreamsRunning@4
_TEXT	SEGMENT
_FilterInstance$ = 8					; size = 4
_SCCheckIfStreamsRunning@4 PROC NEAR			; COMDAT

; 6667 : 
; 6668 :     PSTREAM_OBJECT  StreamObject;
; 6669 :     PLIST_ENTRY     StreamListEntry,
; 6670 :                     StreamObjectEntry;
; 6671 : 
; 6672 :     //
; 6673 :     // process the streams on this list
; 6674 :     //
; 6675 : 
; 6676 : 
; 6677 :     StreamListEntry = StreamObjectEntry = &FilterInstance->FirstStream;

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _FilterInstance$[esp-4]
  00004	83 c1 10	 add	 ecx, 16			; 00000010H

; 6678 : 
; 6679 :     while (StreamObjectEntry->Flink != StreamListEntry) {

  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	eb 08		 jmp	 SHORT $L15034
$L14421:

; 6680 : 
; 6681 :         StreamObjectEntry = StreamObjectEntry->Flink;
; 6682 : 
; 6683 :         //
; 6684 :         // follow the link to the stream
; 6685 :         // object
; 6686 :         //
; 6687 : 
; 6688 :         StreamObject = CONTAINING_RECORD(StreamObjectEntry,
; 6689 :                                          STREAM_OBJECT,
; 6690 :                                          NextStream);
; 6691 : 
; 6692 :         if (StreamObject->CurrentState == KSSTATE_RUN) {

  0000b	83 78 4c 03	 cmp	 DWORD PTR [eax+76], 3
  0000f	74 0b		 je	 SHORT $L15033

; 6678 : 
; 6679 :     while (StreamObjectEntry->Flink != StreamListEntry) {

  00011	8b 00		 mov	 eax, DWORD PTR [eax]
$L15034:
  00013	3b c1		 cmp	 eax, ecx
  00015	75 f4		 jne	 SHORT $L14421

; 6695 : 
; 6696 : 
; 6697 :         }                       // if running
; 6698 :     }                           // while streams
; 6699 : 
; 6700 :     return (FALSE);

  00017	32 c0		 xor	 al, al
$L14416:

; 6701 : 
; 6702 : }

  00019	c2 04 00	 ret	 4
$L15033:

; 6693 : 
; 6694 :             return (TRUE);

  0001c	b0 01		 mov	 al, 1
  0001e	eb f9		 jmp	 SHORT $L14416
_SCCheckIfStreamsRunning@4 ENDP
_TEXT	ENDS
PUBLIC	_SCCallBackSrb@8
; Function compile flags: /Ogsy
;	COMDAT _SCCallBackSrb@8
_TEXT	SEGMENT
_Srb$ = 8						; size = 4
_DeviceExtension$ = 12					; size = 4
_SCCallBackSrb@8 PROC NEAR				; COMDAT

; 6720 :     KIRQL           Irql;
; 6721 : 
; 6722 :     if (DeviceExtension->NoSync) {

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _DeviceExtension$[esp-4]
  00004	80 b8 58 01 00
	00 00		 cmp	 BYTE PTR [eax+344], 0
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b 7c 24 0c	 mov	 edi, DWORD PTR _Srb$[esp+4]
  00011	74 29		 je	 SHORT $L14434

; 6723 : 
; 6724 :         KeAcquireSpinLock(&DeviceExtension->SpinLock, &Irql);

  00013	8d b0 d8 00 00
	00		 lea	 esi, DWORD PTR [eax+216]
  00019	8b ce		 mov	 ecx, esi
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4

; 6725 : 
; 6726 :         if (Srb->DoNotCallBack) {

  00021	80 bf 8c 00 00
	00 00		 cmp	 BYTE PTR [edi+140], 0
  00028	8a d0		 mov	 dl, al

; 6727 :             TRAP;
; 6728 :             DebugPrint((DebugLevelError, "'ScCallback: NOT calling back request - Irp = %x",
; 6729 :                         Srb->HwSRB.Irp));
; 6730 :             KeReleaseSpinLock(&DeviceExtension->SpinLock, Irql);

  0002a	8b ce		 mov	 ecx, esi
  0002c	74 08		 je	 SHORT $L14435
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8

; 6731 :             return;

  00034	eb 0a		 jmp	 SHORT $L14432
$L14435:

; 6732 : 
; 6733 :         }                       // if NoCallback
; 6734 :         KeReleaseSpinLock(&DeviceExtension->SpinLock, Irql);

  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8
$L14434:

; 6735 :     }                           // if NoSync
; 6736 :     (Srb->Callback) (Srb);

  0003c	57		 push	 edi
  0003d	ff 57 6c	 call	 DWORD PTR [edi+108]
$L14432:
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi

; 6737 : 
; 6738 : }

  00042	c2 08 00	 ret	 8
_SCCallBackSrb@8 ENDP
_TEXT	ENDS
PUBLIC	_SCCopyMinidriverProperties@8
; Function compile flags: /Ogsy
;	COMDAT _SCCopyMinidriverProperties@8
PAGE	SEGMENT
tv158 = 8						; size = 4
_NumProps$ = 8						; size = 4
_NewPropertyBuffer$ = 12				; size = 4
_MinidriverProps$ = 12					; size = 4
_SCCopyMinidriverProperties@8 PROC NEAR			; COMDAT

; 6809 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6810 :     PKSPROPERTY_ITEM CurrentPropItem;
; 6811 :     PKSPROPERTY_SET CurrentProp;
; 6812 :     ULONG           i,
; 6813 :                     BufferSize;
; 6814 :     PVOID           NewPropertyBuffer;
; 6815 : 
; 6816 :     #if DBG
; 6817 :     ULONG           TotalBufferUsed;
; 6818 :     #endif
; 6819 : 
; 6820 :     PAGED_CODE();
; 6821 : 
; 6822 :     CurrentProp = MinidriverProps;
; 6823 :     BufferSize = NumProps * sizeof(KSPROPERTY_SET);

  00003	8b 45 08	 mov	 eax, DWORD PTR _NumProps$[ebp]
  00006	53		 push	 ebx
  00007	8d 1c 80	 lea	 ebx, DWORD PTR [eax+eax*4]
  0000a	56		 push	 esi

; 6824 : 
; 6825 :     //
; 6826 :     // walk the minidriver's property sets to determine the size of the
; 6827 :     // buffer
; 6828 :     // needed.   Size computed from # of sets from above, + # of items.
; 6829 :     //
; 6830 : 
; 6831 :     for (i = 0; i < NumProps; i++) {

  0000b	8b 75 0c	 mov	 esi, DWORD PTR _MinidriverProps$[ebp]
  0000e	c1 e3 02	 shl	 ebx, 2
  00011	85 c0		 test	 eax, eax
  00013	57		 push	 edi
  00014	8b cb		 mov	 ecx, ebx
  00016	76 13		 jbe	 SHORT $L14449
  00018	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  0001b	8b f8		 mov	 edi, eax
$L14447:

; 6832 : 
; 6833 :         BufferSize += CurrentProp->PropertiesCount * sizeof(KSPROPERTY_ITEM);

  0001d	8b 02		 mov	 eax, DWORD PTR [edx]
  0001f	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]

; 6834 : 
; 6835 :         //
; 6836 :         // index to next property set in
; 6837 :         // array
; 6838 :         //
; 6839 : 
; 6840 :         CurrentProp++;

  00022	83 c2 14	 add	 edx, 20			; 00000014H
  00025	4f		 dec	 edi
  00026	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
  00029	75 f2		 jne	 SHORT $L14447
$L14449:

; 6841 : 
; 6842 :     }                           // for number of property sets
; 6843 : 
; 6844 :     if (!(NewPropertyBuffer = ExAllocatePool(NonPagedPool, BufferSize))) {

  0002b	68 57 64 6d 20	 push	 544040023		; 206d6457H
  00030	51		 push	 ecx
  00031	6a 00		 push	 0
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  00039	8b d0		 mov	 edx, eax
  0003b	85 d2		 test	 edx, edx
  0003d	89 55 0c	 mov	 DWORD PTR _NewPropertyBuffer$[ebp], edx
  00040	74 55		 je	 SHORT $L14440
$L14451:

; 6845 : 
; 6846 :         TRAP;
; 6847 :         return (NULL);
; 6848 :     }
; 6849 :     //
; 6850 :     // copy the array of sets over to the 1st part of the buffer.
; 6851 :     //
; 6852 : 
; 6853 :     RtlCopyMemory(NewPropertyBuffer,
; 6854 :                   MinidriverProps,
; 6855 :                   sizeof(KSPROPERTY_SET) * NumProps);

  00042	8b cb		 mov	 ecx, ebx
  00044	8b c1		 mov	 eax, ecx
  00046	c1 e9 02	 shr	 ecx, 2
  00049	8b fa		 mov	 edi, edx
  0004b	f3 a5		 rep movsd
  0004d	8b c8		 mov	 ecx, eax
  0004f	83 e1 03	 and	 ecx, 3
  00052	f3 a4		 rep movsb

; 6856 : 
; 6857 :     //
; 6858 :     // walk thru the sets, copying the items for each set, and updating the
; 6859 :     // pointer to each item array in each set as we go.
; 6860 :     //
; 6861 : 
; 6862 :     CurrentProp = (PKSPROPERTY_SET) NewPropertyBuffer;
; 6863 :     CurrentPropItem = (PKSPROPERTY_ITEM) ((ULONG_PTR) NewPropertyBuffer + sizeof(KSPROPERTY_SET) * NumProps);
; 6864 : 
; 6865 :     #if DBG
; 6866 :     TotalBufferUsed = sizeof(KSPROPERTY_SET) * NumProps;
; 6867 :     #endif
; 6868 : 
; 6869 :     for (i = 0; i < NumProps; i++) {

  00054	8b 4d 08	 mov	 ecx, DWORD PTR _NumProps$[ebp]
  00057	85 c9		 test	 ecx, ecx
  00059	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  0005c	76 37		 jbe	 SHORT $L14460
  0005e	83 c2 04	 add	 edx, 4
  00061	89 4d 08	 mov	 DWORD PTR tv158[ebp], ecx
$L14458:

; 6870 : 
; 6871 :         RtlCopyMemory(CurrentPropItem,
; 6872 :                       CurrentProp->PropertyItem,
; 6873 :                     CurrentProp->PropertiesCount * sizeof(KSPROPERTY_ITEM));

  00064	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00066	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00069	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  0006c	c1 e1 03	 shl	 ecx, 3
  0006f	8b d9		 mov	 ebx, ecx
  00071	c1 e9 02	 shr	 ecx, 2
  00074	8b f8		 mov	 edi, eax
  00076	f3 a5		 rep movsd
  00078	8b cb		 mov	 ecx, ebx
  0007a	83 e1 03	 and	 ecx, 3
  0007d	f3 a4		 rep movsb

; 6874 : 
; 6875 :         #if DBG
; 6876 :         TotalBufferUsed += CurrentProp->PropertiesCount * sizeof(KSPROPERTY_ITEM);
; 6877 :         ASSERT(TotalBufferUsed <= BufferSize);
; 6878 :         #endif
; 6879 : 
; 6880 :         CurrentProp->PropertyItem = CurrentPropItem;
; 6881 : 
; 6882 :         CurrentPropItem += CurrentProp->PropertiesCount;

  0007f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00081	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00084	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]

; 6883 :         CurrentProp++;

  00087	83 c2 14	 add	 edx, 20			; 00000014H
  0008a	ff 4d 08	 dec	 DWORD PTR tv158[ebp]
  0008d	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00090	75 d2		 jne	 SHORT $L14458

; 6856 : 
; 6857 :     //
; 6858 :     // walk thru the sets, copying the items for each set, and updating the
; 6859 :     // pointer to each item array in each set as we go.
; 6860 :     //
; 6861 : 
; 6862 :     CurrentProp = (PKSPROPERTY_SET) NewPropertyBuffer;
; 6863 :     CurrentPropItem = (PKSPROPERTY_ITEM) ((ULONG_PTR) NewPropertyBuffer + sizeof(KSPROPERTY_SET) * NumProps);
; 6864 : 
; 6865 :     #if DBG
; 6866 :     TotalBufferUsed = sizeof(KSPROPERTY_SET) * NumProps;
; 6867 :     #endif
; 6868 : 
; 6869 :     for (i = 0; i < NumProps; i++) {

  00092	8b 55 0c	 mov	 edx, DWORD PTR _NewPropertyBuffer$[ebp]
$L14460:

; 6884 : 
; 6885 :     }
; 6886 : 
; 6887 :     return ((PKSPROPERTY_SET) NewPropertyBuffer);

  00095	8b c2		 mov	 eax, edx
$L14440:
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx

; 6888 : 
; 6889 : }

  0009a	5d		 pop	 ebp
  0009b	c2 08 00	 ret	 8
_SCCopyMinidriverProperties@8 ENDP
PAGE	ENDS
PUBLIC	_SCCopyMinidriverEvents@8
; Function compile flags: /Ogsy
;	COMDAT _SCCopyMinidriverEvents@8
PAGE	SEGMENT
tv158 = 8						; size = 4
_NumEvents$ = 8						; size = 4
_NewEventBuffer$ = 12					; size = 4
_MinidriverEvents$ = 12					; size = 4
_SCCopyMinidriverEvents@8 PROC NEAR			; COMDAT

; 6914 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6915 :     PKSEVENT_ITEM   CurrentEventItem;
; 6916 :     PKSEVENT_SET    CurrentEvent;
; 6917 :     ULONG           i,
; 6918 :                     BufferSize;
; 6919 :     PVOID           NewEventBuffer;
; 6920 : 
; 6921 : 	#if DBG
; 6922 :     ULONG           TotalBufferUsed;
; 6923 : 	#endif
; 6924 : 
; 6925 :     PAGED_CODE();
; 6926 : 
; 6927 :     CurrentEvent = MinidriverEvents;
; 6928 :     BufferSize = NumEvents * sizeof(KSEVENT_SET);

  00003	8b 45 08	 mov	 eax, DWORD PTR _NumEvents$[ebp]
  00006	53		 push	 ebx
  00007	8d 1c 40	 lea	 ebx, DWORD PTR [eax+eax*2]
  0000a	56		 push	 esi

; 6929 : 
; 6930 :     //
; 6931 :     // walk the minidriver's property sets to determine the size of the
; 6932 :     // buffer
; 6933 :     // needed.   Size computed from # of sets from above, + # of items.
; 6934 :     //
; 6935 : 
; 6936 :     for (i = 0; i < NumEvents; i++) {

  0000b	8b 75 0c	 mov	 esi, DWORD PTR _MinidriverEvents$[ebp]
  0000e	c1 e3 02	 shl	 ebx, 2
  00011	85 c0		 test	 eax, eax
  00013	57		 push	 edi
  00014	8b cb		 mov	 ecx, ebx
  00016	76 13		 jbe	 SHORT $L14476
  00018	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  0001b	8b f8		 mov	 edi, eax
$L14474:

; 6937 : 
; 6938 :         BufferSize += CurrentEvent->EventsCount * sizeof(KSEVENT_ITEM);

  0001d	8b 02		 mov	 eax, DWORD PTR [edx]
  0001f	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]

; 6939 : 
; 6940 :         //
; 6941 :         // index to next property set in
; 6942 :         // array
; 6943 :         //
; 6944 : 
; 6945 :         CurrentEvent++;

  00022	83 c2 0c	 add	 edx, 12			; 0000000cH
  00025	4f		 dec	 edi
  00026	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
  00029	75 f2		 jne	 SHORT $L14474
$L14476:

; 6946 : 
; 6947 :     }                           // for number of property sets
; 6948 : 
; 6949 :     if (!(NewEventBuffer = ExAllocatePool(NonPagedPool, BufferSize))) {

  0002b	68 57 64 6d 20	 push	 544040023		; 206d6457H
  00030	51		 push	 ecx
  00031	6a 00		 push	 0
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  00039	8b d0		 mov	 edx, eax
  0003b	85 d2		 test	 edx, edx
  0003d	89 55 0c	 mov	 DWORD PTR _NewEventBuffer$[ebp], edx
  00040	74 55		 je	 SHORT $L14467
$L14478:

; 6950 : 
; 6951 :         TRAP;
; 6952 :         return (NULL);
; 6953 :     }
; 6954 :     //
; 6955 :     // copy the array of sets over to the 1st part of the buffer.
; 6956 :     //
; 6957 : 
; 6958 :     RtlCopyMemory(NewEventBuffer,
; 6959 :                   MinidriverEvents,
; 6960 :                   sizeof(KSEVENT_SET) * NumEvents);

  00042	8b cb		 mov	 ecx, ebx
  00044	8b c1		 mov	 eax, ecx
  00046	c1 e9 02	 shr	 ecx, 2
  00049	8b fa		 mov	 edi, edx
  0004b	f3 a5		 rep movsd
  0004d	8b c8		 mov	 ecx, eax
  0004f	83 e1 03	 and	 ecx, 3
  00052	f3 a4		 rep movsb

; 6961 : 
; 6962 :     //
; 6963 :     // walk thru the sets, copying the items for each set, and updating the
; 6964 :     // pointer to each item array in each set as we go.
; 6965 :     //
; 6966 : 
; 6967 :     CurrentEvent = (PKSEVENT_SET) NewEventBuffer;
; 6968 :     CurrentEventItem = (PKSEVENT_ITEM) ((ULONG_PTR) NewEventBuffer + sizeof(KSEVENT_SET) * NumEvents);
; 6969 : 
; 6970 : 	#if DBG
; 6971 :     TotalBufferUsed = sizeof(KSEVENT_SET) * NumEvents;
; 6972 : 	#endif
; 6973 : 
; 6974 :     for (i = 0; i < NumEvents; i++) {

  00054	8b 4d 08	 mov	 ecx, DWORD PTR _NumEvents$[ebp]
  00057	85 c9		 test	 ecx, ecx
  00059	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  0005c	76 37		 jbe	 SHORT $L14487
  0005e	83 c2 04	 add	 edx, 4
  00061	89 4d 08	 mov	 DWORD PTR tv158[ebp], ecx
$L14485:

; 6975 : 
; 6976 :         RtlCopyMemory(CurrentEventItem,
; 6977 :                       CurrentEvent->EventItem,
; 6978 :                       CurrentEvent->EventsCount * sizeof(KSEVENT_ITEM));

  00064	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00066	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00069	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0006c	c1 e1 03	 shl	 ecx, 3
  0006f	8b d9		 mov	 ebx, ecx
  00071	c1 e9 02	 shr	 ecx, 2
  00074	8b f8		 mov	 edi, eax
  00076	f3 a5		 rep movsd
  00078	8b cb		 mov	 ecx, ebx
  0007a	83 e1 03	 and	 ecx, 3
  0007d	f3 a4		 rep movsb

; 6979 : 
; 6980 : 		#if DBG
; 6981 :         TotalBufferUsed += CurrentEvent->EventsCount * sizeof(KSEVENT_ITEM);
; 6982 :         ASSERT(TotalBufferUsed <= BufferSize);
; 6983 : 		#endif
; 6984 : 
; 6985 :         CurrentEvent->EventItem = CurrentEventItem;
; 6986 : 
; 6987 :         CurrentEventItem += CurrentEvent->EventsCount;

  0007f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00081	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00084	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]

; 6988 :         CurrentEvent++;

  00087	83 c2 0c	 add	 edx, 12			; 0000000cH
  0008a	ff 4d 08	 dec	 DWORD PTR tv158[ebp]
  0008d	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00090	75 d2		 jne	 SHORT $L14485

; 6961 : 
; 6962 :     //
; 6963 :     // walk thru the sets, copying the items for each set, and updating the
; 6964 :     // pointer to each item array in each set as we go.
; 6965 :     //
; 6966 : 
; 6967 :     CurrentEvent = (PKSEVENT_SET) NewEventBuffer;
; 6968 :     CurrentEventItem = (PKSEVENT_ITEM) ((ULONG_PTR) NewEventBuffer + sizeof(KSEVENT_SET) * NumEvents);
; 6969 : 
; 6970 : 	#if DBG
; 6971 :     TotalBufferUsed = sizeof(KSEVENT_SET) * NumEvents;
; 6972 : 	#endif
; 6973 : 
; 6974 :     for (i = 0; i < NumEvents; i++) {

  00092	8b 55 0c	 mov	 edx, DWORD PTR _NewEventBuffer$[ebp]
$L14487:

; 6989 : 
; 6990 :     }
; 6991 : 
; 6992 :     return ((PKSEVENT_SET) NewEventBuffer);

  00095	8b c2		 mov	 eax, edx
$L14467:
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx

; 6993 : 
; 6994 : }

  0009a	5d		 pop	 ebp
  0009b	c2 08 00	 ret	 8
_SCCopyMinidriverEvents@8 ENDP
PAGE	ENDS
PUBLIC	_SCCopyMinidriverMethods@8
; Function compile flags: /Ogsy
;	COMDAT _SCCopyMinidriverMethods@8
PAGE	SEGMENT
tv158 = 8						; size = 4
_NumMethods$ = 8					; size = 4
_NewMethodBuffer$ = 12					; size = 4
_MinidriverMethods$ = 12				; size = 4
_SCCopyMinidriverMethods@8 PROC NEAR			; COMDAT

; 7020 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 7021 :     PKSMETHOD_ITEM CurrentMethodItem;
; 7022 :     PKSMETHOD_SET CurrentMethod;
; 7023 :     ULONG           i,
; 7024 :                     BufferSize;
; 7025 :     PVOID           NewMethodBuffer;
; 7026 : 
; 7027 : 	#if DBG
; 7028 :     ULONG           TotalBufferUsed;
; 7029 : 	#endif
; 7030 : 
; 7031 :     PAGED_CODE();
; 7032 : 
; 7033 :     CurrentMethod = MinidriverMethods;
; 7034 :     BufferSize = NumMethods * sizeof(KSMETHOD_SET);

  00003	8b 45 08	 mov	 eax, DWORD PTR _NumMethods$[ebp]
  00006	53		 push	 ebx
  00007	8d 1c 80	 lea	 ebx, DWORD PTR [eax+eax*4]
  0000a	56		 push	 esi

; 7035 : 
; 7036 :     //
; 7037 :     // walk the minidriver's property sets to determine the size of the
; 7038 :     // buffer
; 7039 :     // needed.   Size computed from # of sets from above, + # of items.
; 7040 :     //
; 7041 : 
; 7042 :     for (i = 0; i < NumMethods; i++) {

  0000b	8b 75 0c	 mov	 esi, DWORD PTR _MinidriverMethods$[ebp]
  0000e	c1 e3 02	 shl	 ebx, 2
  00011	85 c0		 test	 eax, eax
  00013	57		 push	 edi
  00014	8b cb		 mov	 ecx, ebx
  00016	76 13		 jbe	 SHORT $L14503
  00018	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  0001b	8b f8		 mov	 edi, eax
$L14501:

; 7043 : 
; 7044 :         BufferSize += CurrentMethod->MethodsCount * sizeof(KSMETHOD_ITEM);

  0001d	8b 02		 mov	 eax, DWORD PTR [edx]
  0001f	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]

; 7045 : 
; 7046 :         //
; 7047 :         // index to next property set in
; 7048 :         // array
; 7049 :         //
; 7050 : 
; 7051 :         CurrentMethod++;

  00022	83 c2 14	 add	 edx, 20			; 00000014H
  00025	4f		 dec	 edi
  00026	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
  00029	75 f2		 jne	 SHORT $L14501
$L14503:

; 7052 : 
; 7053 :     }                           // for number of property sets
; 7054 : 
; 7055 :     if (!(NewMethodBuffer = ExAllocatePool(NonPagedPool, BufferSize))) {

  0002b	68 57 64 6d 20	 push	 544040023		; 206d6457H
  00030	51		 push	 ecx
  00031	6a 00		 push	 0
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  00039	8b d0		 mov	 edx, eax
  0003b	85 d2		 test	 edx, edx
  0003d	89 55 0c	 mov	 DWORD PTR _NewMethodBuffer$[ebp], edx
  00040	74 55		 je	 SHORT $L14494
$L14505:

; 7056 : 
; 7057 :         TRAP;
; 7058 :         return (NULL);
; 7059 :     }
; 7060 :     //
; 7061 :     // copy the array of sets over to the 1st part of the buffer.
; 7062 :     //
; 7063 : 
; 7064 :     RtlCopyMemory(NewMethodBuffer,
; 7065 :                   MinidriverMethods,
; 7066 :                   sizeof(KSMETHOD_SET) * NumMethods);

  00042	8b cb		 mov	 ecx, ebx
  00044	8b c1		 mov	 eax, ecx
  00046	c1 e9 02	 shr	 ecx, 2
  00049	8b fa		 mov	 edi, edx
  0004b	f3 a5		 rep movsd
  0004d	8b c8		 mov	 ecx, eax
  0004f	83 e1 03	 and	 ecx, 3
  00052	f3 a4		 rep movsb

; 7067 : 
; 7068 :     //
; 7069 :     // walk thru the sets, copying the items for each set, and updating the
; 7070 :     // pointer to each item array in each set as we go.
; 7071 :     //
; 7072 : 
; 7073 :     CurrentMethod = (PKSMETHOD_SET) NewMethodBuffer;
; 7074 :     CurrentMethodItem = (PKSMETHOD_ITEM) ((ULONG_PTR) NewMethodBuffer + sizeof(KSMETHOD_SET) * NumMethods);
; 7075 : 
; 7076 : 	#if DBG
; 7077 :     TotalBufferUsed = sizeof(KSMETHOD_SET) * NumMethods;
; 7078 : 	#endif
; 7079 : 
; 7080 :     for (i = 0; i < NumMethods; i++) {

  00054	8b 4d 08	 mov	 ecx, DWORD PTR _NumMethods$[ebp]
  00057	85 c9		 test	 ecx, ecx
  00059	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  0005c	76 37		 jbe	 SHORT $L14514
  0005e	83 c2 04	 add	 edx, 4
  00061	89 4d 08	 mov	 DWORD PTR tv158[ebp], ecx
$L14512:

; 7081 : 
; 7082 :         RtlCopyMemory(CurrentMethodItem,
; 7083 :                       CurrentMethod->MethodItem,
; 7084 :                       CurrentMethod->MethodsCount * sizeof(KSMETHOD_ITEM));

  00064	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00066	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00069	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0006c	c1 e1 03	 shl	 ecx, 3
  0006f	8b d9		 mov	 ebx, ecx
  00071	c1 e9 02	 shr	 ecx, 2
  00074	8b f8		 mov	 edi, eax
  00076	f3 a5		 rep movsd
  00078	8b cb		 mov	 ecx, ebx
  0007a	83 e1 03	 and	 ecx, 3
  0007d	f3 a4		 rep movsb

; 7085 : 
; 7086 : 		#if DBG
; 7087 :         TotalBufferUsed += CurrentMethod->MethodsCount * sizeof(KSMETHOD_ITEM);
; 7088 :         ASSERT(TotalBufferUsed <= BufferSize);
; 7089 : 		#endif
; 7090 : 
; 7091 :         CurrentMethod->MethodItem = CurrentMethodItem;
; 7092 : 
; 7093 :         CurrentMethodItem += CurrentMethod->MethodsCount;

  0007f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00081	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00084	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]

; 7094 :         CurrentMethod++;

  00087	83 c2 14	 add	 edx, 20			; 00000014H
  0008a	ff 4d 08	 dec	 DWORD PTR tv158[ebp]
  0008d	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00090	75 d2		 jne	 SHORT $L14512

; 7067 : 
; 7068 :     //
; 7069 :     // walk thru the sets, copying the items for each set, and updating the
; 7070 :     // pointer to each item array in each set as we go.
; 7071 :     //
; 7072 : 
; 7073 :     CurrentMethod = (PKSMETHOD_SET) NewMethodBuffer;
; 7074 :     CurrentMethodItem = (PKSMETHOD_ITEM) ((ULONG_PTR) NewMethodBuffer + sizeof(KSMETHOD_SET) * NumMethods);
; 7075 : 
; 7076 : 	#if DBG
; 7077 :     TotalBufferUsed = sizeof(KSMETHOD_SET) * NumMethods;
; 7078 : 	#endif
; 7079 : 
; 7080 :     for (i = 0; i < NumMethods; i++) {

  00092	8b 55 0c	 mov	 edx, DWORD PTR _NewMethodBuffer$[ebp]
$L14514:

; 7095 : 
; 7096 :     }
; 7097 : 
; 7098 :     return ((PKSMETHOD_SET) NewMethodBuffer);

  00095	8b c2		 mov	 eax, edx
$L14494:
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx

; 7099 : 
; 7100 : }

  0009a	5d		 pop	 ebp
  0009b	c2 08 00	 ret	 8
_SCCopyMinidriverMethods@8 ENDP
PAGE	ENDS
PUBLIC	_SCUpdateMinidriverMethods@12
EXTRN	_StreamClassMinidriverStreamMethod@12:NEAR
EXTRN	_StreamClassMinidriverDeviceMethod@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCUpdateMinidriverMethods@12
_TEXT	SEGMENT
tv249 = 8						; size = 4
_NumMethods$ = 8					; size = 4
_MinidriverMethods$ = 12				; size = 4
_Stream$ = 16						; size = 1
_SCUpdateMinidriverMethods@12 PROC NEAR			; COMDAT

; 7126 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 7127 :     PKSMETHOD_ITEM CurrentMethodId;
; 7128 :     PKSMETHOD_SET CurrentMethod;
; 7129 :     ULONG           i,
; 7130 :                     j;
; 7131 : 
; 7132 :     PAGED_CODE();
; 7133 : 
; 7134 :     //
; 7135 :     // walk the minidriver's property info to fill in the dispatch
; 7136 :     // vectors as appropriate.
; 7137 :     //
; 7138 : 
; 7139 :     CurrentMethod = MinidriverMethods;
; 7140 : 
; 7141 :     for (i = 0; i < NumMethods; i++) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _NumMethods$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	76 58		 jbe	 SHORT $L14530
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _MinidriverMethods$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	83 c1 04	 add	 ecx, 4
  00012	89 45 08	 mov	 DWORD PTR tv249[ebp], eax
  00015	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:_StreamClassMinidriverStreamMethod@12
  0001a	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:_StreamClassMinidriverDeviceMethod@12
$L15064:

; 7142 : 
; 7143 :         CurrentMethodId = (PKSMETHOD_ITEM) CurrentMethod->MethodItem;

  0001f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 7144 : 
; 7145 :         for (j = 0; j < CurrentMethod->MethodsCount; j++) {

  00022	33 f6		 xor	 esi, esi
  00024	39 31		 cmp	 DWORD PTR [ecx], esi
  00026	76 30		 jbe	 SHORT $L14534

; 7142 : 
; 7143 :         CurrentMethodId = (PKSMETHOD_ITEM) CurrentMethod->MethodItem;

  00028	83 c0 04	 add	 eax, 4
$L15063:

; 7146 : 
; 7147 :             //
; 7148 :             // if support handler is supported, send it to the handler
; 7149 :             //
; 7150 : 
; 7151 :             if (CurrentMethodId->SupportHandler) {

  0002b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0002f	74 0e		 je	 SHORT $L14537

; 7152 : 
; 7153 :                 if (Stream) {

  00031	80 7d 10 00	 cmp	 BYTE PTR _Stream$[ebp], 0
  00035	74 05		 je	 SHORT $L14536

; 7154 : 
; 7155 :                     CurrentMethodId->SupportHandler = StreamClassMinidriverStreamMethod;

  00037	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 7156 : 
; 7157 :                 } else {

  0003a	eb 03		 jmp	 SHORT $L14537
$L14536:

; 7158 : 
; 7159 :                     CurrentMethodId->SupportHandler = StreamClassMinidriverDeviceMethod;

  0003c	89 78 0c	 mov	 DWORD PTR [eax+12], edi
$L14537:

; 7160 :                 }               // if stream
; 7161 : 
; 7162 :             }
; 7163 :             //
; 7164 :             // if method routine is
; 7165 :             // supported, add our vector.
; 7166 :             //
; 7167 : 
; 7168 :             if (CurrentMethodId->MethodHandler) {

  0003f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00042	74 0c		 je	 SHORT $L14540

; 7169 : 
; 7170 :                 if (Stream) {

  00044	80 7d 10 00	 cmp	 BYTE PTR _Stream$[ebp], 0
  00048	74 04		 je	 SHORT $L14539

; 7171 : 
; 7172 :                     CurrentMethodId->MethodHandler = StreamClassMinidriverStreamMethod;

  0004a	89 10		 mov	 DWORD PTR [eax], edx

; 7173 :                 } else {

  0004c	eb 02		 jmp	 SHORT $L14540
$L14539:

; 7174 : 
; 7175 :                     CurrentMethodId->MethodHandler = StreamClassMinidriverDeviceMethod;

  0004e	89 38		 mov	 DWORD PTR [eax], edi
$L14540:

; 7176 :                 }               // if stream
; 7177 : 
; 7178 :             }                   // if supported
; 7179 : 
; 7180 :             //
; 7181 :             // index to next method item in
; 7182 :             // array
; 7183 :             //
; 7184 : 
; 7185 :             CurrentMethodId++;

  00050	83 c0 18	 add	 eax, 24			; 00000018H
  00053	46		 inc	 esi
  00054	3b 31		 cmp	 esi, DWORD PTR [ecx]
  00056	72 d3		 jb	 SHORT $L15063
$L14534:

; 7186 : 
; 7187 :         }                       // for number of property items
; 7188 : 
; 7189 :         //
; 7190 :         // index to next method set in
; 7191 :         // array
; 7192 :         //
; 7193 : 
; 7194 :         CurrentMethod++;

  00058	83 c1 14	 add	 ecx, 20			; 00000014H
  0005b	ff 4d 08	 dec	 DWORD PTR tv249[ebp]
  0005e	75 bf		 jne	 SHORT $L15064
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
$L14530:

; 7195 : 
; 7196 :     }                           // for number of method sets
; 7197 : 
; 7198 : }

  00062	5d		 pop	 ebp
  00063	c2 0c 00	 ret	 12			; 0000000cH
_SCUpdateMinidriverMethods@12 ENDP
_TEXT	ENDS
PUBLIC	_SCProcessCompletedMethodRequest@4
; Function compile flags: /Ogsy
;	COMDAT _SCProcessCompletedMethodRequest@4
_TEXT	SEGMENT
_SRB$ = 8						; size = 4
_SCProcessCompletedMethodRequest@4 PROC NEAR		; COMDAT

; 7417 : {

  00000	56		 push	 esi

; 7418 :     PAGED_CODE();
; 7419 : 
; 7420 :     //
; 7421 :     // free the method info structure and
; 7422 :     // complete the request
; 7423 :     //
; 7424 : 
; 7425 :     ExFreePool(SRB->HwSRB.CommandData.MethodInfo);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _SRB$[esp]
  00005	ff 76 18	 push	 DWORD PTR [esi+24]
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4

; 7426 : 
; 7427 :     //
; 7428 :     // set the information field from the SRB
; 7429 :     // transferlength field
; 7430 :     //
; 7431 : 
; 7432 :     SRB->HwSRB.Irp->IoStatus.Information = SRB->HwSRB.ActualBytesTransferred;

  0000e	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00011	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]

; 7433 : 
; 7434 :     return (SCDequeueAndDeleteSrb(SRB));

  00014	56		 push	 esi
  00015	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00018	e8 00 00 00 00	 call	 _SCDequeueAndDeleteSrb@4
  0001d	5e		 pop	 esi

; 7435 : 
; 7436 : }

  0001e	c2 04 00	 ret	 4
_SCProcessCompletedMethodRequest@4 ENDP
_TEXT	ENDS
PUBLIC	_SCDequeueAndStartStreamControlRequest@4
; Function compile flags: /Ogsy
;	COMDAT _SCDequeueAndStartStreamControlRequest@4
_TEXT	SEGMENT
_StreamObject$ = 8					; size = 4
_SCDequeueAndStartStreamControlRequest@4 PROC NEAR	; COMDAT

; 314  : {

  00000	56		 push	 esi

; 315  :     PIRP            Irp;
; 316  :     PSTREAM_REQUEST_BLOCK Request;
; 317  :     PLIST_ENTRY     Entry;
; 318  : 
; 319  :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);
; 320  :     Entry = RemoveTailList(&StreamObject->ControlPendingQueue);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _StreamObject$[esp]
  00005	8d 86 f4 00 00
	00		 lea	 eax, DWORD PTR [esi+244]
  0000b	57		 push	 edi
  0000c	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  0000f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00012	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 321  :     Irp = CONTAINING_RECORD(Entry,
; 322  :                             IRP,
; 323  :                             Tail.Overlay.ListEntry);
; 324  : 
; 325  :     ASSERT(Irp);
; 326  :     DebugPrint((DebugLevelTrace, "'SCStartStreamControlReq: Irp = %x, S# = %x\n",
; 327  :                 Irp, StreamObject->HwStreamObject.StreamNumber));
; 328  : 
; 329  :     //
; 330  :     // clear the ready flag as we are going
; 331  :     // to send one down.
; 332  :     //
; 333  : 
; 334  :     ASSERT(StreamObject->ReadyForNextControlReq);
; 335  : 
; 336  :     StreamObject->ReadyForNextControlReq = FALSE;
; 337  : 
; 338  :     //
; 339  :     // release the spinlock.
; 340  :     //
; 341  : 
; 342  :     KeReleaseSpinLockFromDpcLevel(&StreamObject->DeviceExtension->SpinLock);

  00017	8b 8e 14 01 00
	00		 mov	 ecx, DWORD PTR [esi+276]
  0001d	81 c1 d8 00 00
	00		 add	 ecx, 216		; 000000d8H
  00023	c6 86 54 01 00
	00 00		 mov	 BYTE PTR [esi+340], 0
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4

; 343  : 
; 344  :     //
; 345  :     // get the request packet from the IRP
; 346  :     //
; 347  : 
; 348  :     Request = Irp->Tail.Overlay.DriverContext[0];
; 349  : 
; 350  :     //
; 351  :     // start the request.
; 352  :     //
; 353  : 
; 354  :     SCStartMinidriverRequest(StreamObject,
; 355  :                              Request,
; 356  :                              (PVOID)
; 357  :                          StreamObject->HwStreamObject.ReceiveControlPacket);

  00030	ff b6 b8 00 00
	00		 push	 DWORD PTR [esi+184]
  00036	ff 77 e8	 push	 DWORD PTR [edi-24]
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 _SCStartMinidriverRequest@12
  0003f	5f		 pop	 edi

; 358  : 
; 359  :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);
; 360  :     return (STATUS_PENDING);

  00040	b8 03 01 00 00	 mov	 eax, 259		; 00000103H
  00045	5e		 pop	 esi

; 361  : 
; 362  : }

  00046	c2 04 00	 ret	 4
_SCDequeueAndStartStreamControlRequest@4 ENDP
_TEXT	ENDS
PUBLIC	_StreamClassDmaCallback@16
; Function compile flags: /Ogsy
;	COMDAT _StreamClassDmaCallback@16
_TEXT	SEGMENT
_StreamObject$ = -20					; size = 4
$T15084 = -16						; size = 4
_dataVirtualAddress$ = -12				; size = 4
_writeToDevice$ = -8					; size = 1
_NumberOfElements$ = -4					; size = 4
_DeviceObject$ = 8					; size = 4
_InputIrp$ = 12						; size = 4
_MapRegisterBase$ = 16					; size = 4
_CurrentMdl$ = 20					; size = 4
_Context$ = 20						; size = 4
_StreamClassDmaCallback@16 PROC NEAR			; COMDAT

; 867  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 868  :     PSTREAM_REQUEST_BLOCK Request = Context;
; 869  :     PKSSCATTER_GATHER scatterList;
; 870  :     BOOLEAN         writeToDevice;
; 871  :     PVOID           dataVirtualAddress;
; 872  :     ULONG           totalLength,
; 873  :                     NumberOfBuffers;
; 874  :     PIRP            Irp = Request->HwSRB.Irp;
; 875  : 
; 876  :     PSTREAM_OBJECT  StreamObject = CONTAINING_RECORD(
; 877  :                                                 Request->HwSRB.StreamObject,
; 878  :                                                      STREAM_OBJECT,
; 879  :                                                      HwStreamObject
; 880  :     );
; 881  :     PMDL            CurrentMdl;
; 882  :     ULONG           NumberOfElements = 0;

  00006	83 65 fc 00	 and	 DWORD PTR _NumberOfElements$[ebp], 0

; 883  : 
; 884  :     //
; 885  :     // Save the MapRegisterBase for later use
; 886  :     // to deallocate the map
; 887  :     // registers.
; 888  :     //
; 889  : 
; 890  :     Request->MapRegisterBase = MapRegisterBase;

  0000a	8b 45 10	 mov	 eax, DWORD PTR _MapRegisterBase$[ebp]
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	8b 75 14	 mov	 esi, DWORD PTR _Context$[ebp]
  00012	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00015	81 eb a8 00 00
	00		 sub	 ebx, 168		; 000000a8H

; 891  : 
; 892  :     //
; 893  :     // determine whether this is a write request
; 894  :     //
; 895  : 
; 896  :     writeToDevice = Request->HwSRB.Command == SRB_WRITE_DATA ? TRUE : FALSE;

  0001b	83 7e 04 01	 cmp	 DWORD PTR [esi+4], 1
  0001f	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00022	0f 94 c0	 sete	 al
  00025	88 45 f8	 mov	 BYTE PTR _writeToDevice$[ebp], al

; 897  : 
; 898  :     scatterList = Request->HwSRB.ScatterGatherBuffer;
; 899  : 
; 900  :     NumberOfBuffers = Request->HwSRB.NumberOfBuffers;
; 901  : 
; 902  :     ASSERT(Irp);
; 903  : 
; 904  :     CurrentMdl = Irp->MdlAddress;

  00028	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0002b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 905  : 
; 906  :     while (CurrentMdl) {

  0002e	85 c0		 test	 eax, eax
  00030	57		 push	 edi
  00031	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  00034	89 5d ec	 mov	 DWORD PTR _StreamObject$[ebp], ebx
  00037	89 45 14	 mov	 DWORD PTR _CurrentMdl$[ebp], eax
  0003a	74 68		 je	 SHORT $L13264
  0003c	eb 03		 jmp	 SHORT $L13263
$L15097:
  0003e	8b 45 14	 mov	 eax, DWORD PTR _CurrentMdl$[ebp]
$L13263:

; 907  : 
; 908  :         //
; 909  :         // Determine the virtual address of the buffer
; 910  :         //
; 911  : 
; 912  :         dataVirtualAddress = (PSCHAR) MmGetMdlVirtualAddress(CurrentMdl);

  00041	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00044	03 48 10	 add	 ecx, DWORD PTR [eax+16]

; 913  : 
; 914  :         //
; 915  :         // flush the buffers since we are doing DMA.
; 916  :         //
; 917  : 
; 918  :         KeFlushIoBuffers(CurrentMdl,
; 919  :         (BOOLEAN) (Request->HwSRB.Command == SRB_WRITE_DATA ? TRUE : FALSE),
; 920  :                          TRUE);
; 921  : 
; 922  :         //
; 923  :         // Build the scatter/gather list by looping through the buffers
; 924  :         // calling I/O map transfer.
; 925  :         //
; 926  : 
; 927  :         totalLength = 0;

  00047	33 db		 xor	 ebx, ebx
  00049	89 4d f4	 mov	 DWORD PTR _dataVirtualAddress$[ebp], ecx

; 928  : 
; 929  :         while (totalLength < CurrentMdl->ByteCount) {

  0004c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0004f	85 c9		 test	 ecx, ecx
  00051	76 45		 jbe	 SHORT $L13270
$L15098:

; 930  : 
; 931  :             NumberOfElements++;
; 932  : 
; 933  :             //
; 934  :             // Request that the rest of the transfer be mapped.
; 935  :             //
; 936  : 
; 937  :             scatterList->Length = CurrentMdl->ByteCount - totalLength;
; 938  : 
; 939  :             //
; 940  :             // Since we are a master call I/O map transfer with a NULL
; 941  :             // adapter.
; 942  :             //
; 943  : 
; 944  :             scatterList->PhysicalAddress = IoMapTransfer(((PDEVICE_EXTENSION) (DeviceObject->DeviceExtension))
; 945  :                                                          ->DmaAdapterObject,
; 946  :                                                          CurrentMdl,
; 947  :                                                          MapRegisterBase,
; 948  :                                                  (PSCHAR) dataVirtualAddress
; 949  :                                                          + totalLength,
; 950  :                                                        &scatterList->Length,
; 951  :                                                          writeToDevice);

  00053	ff 75 f8	 push	 DWORD PTR _writeToDevice$[ebp]
  00056	ff 45 fc	 inc	 DWORD PTR _NumberOfElements$[ebp]
  00059	2b cb		 sub	 ecx, ebx
  0005b	8d 57 08	 lea	 edx, DWORD PTR [edi+8]
  0005e	89 0a		 mov	 DWORD PTR [edx], ecx
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _DeviceObject$[ebp]
  00063	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00066	8b 89 b4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+180]
  0006c	52		 push	 edx
  0006d	8b 55 f4	 mov	 edx, DWORD PTR _dataVirtualAddress$[ebp]
  00070	03 d3		 add	 edx, ebx
  00072	52		 push	 edx
  00073	ff 75 10	 push	 DWORD PTR _MapRegisterBase$[ebp]
  00076	89 4d f0	 mov	 DWORD PTR $T15084[ebp], ecx
  00079	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0007c	50		 push	 eax
  0007d	ff 75 f0	 push	 DWORD PTR $T15084[ebp]
  00080	ff 51 20	 call	 DWORD PTR [ecx+32]

; 952  : 
; 953  :             DebugPrint((DebugLevelVerbose, "'SCDma: seg = %x'%x, length = %x\n",
; 954  :                 scatterList->PhysicalAddress.HighPart,
; 955  :                 scatterList->PhysicalAddress.LowPart,
; 956  :                 scatterList->Length));
; 957  : 
; 958  :             totalLength += scatterList->Length;

  00083	03 5f 08	 add	 ebx, DWORD PTR [edi+8]
  00086	89 07		 mov	 DWORD PTR [edi], eax
  00088	8b 45 14	 mov	 eax, DWORD PTR _CurrentMdl$[ebp]
  0008b	89 57 04	 mov	 DWORD PTR [edi+4], edx
  0008e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]

; 959  :             scatterList++;

  00091	83 c7 10	 add	 edi, 16			; 00000010H
  00094	3b d9		 cmp	 ebx, ecx
  00096	72 bb		 jb	 SHORT $L15098
$L13270:

; 960  :         }
; 961  : 
; 962  : 
; 963  :         CurrentMdl = CurrentMdl->Next;

  00098	8b 00		 mov	 eax, DWORD PTR [eax]
  0009a	85 c0		 test	 eax, eax
  0009c	89 45 14	 mov	 DWORD PTR _CurrentMdl$[ebp], eax
  0009f	75 9d		 jne	 SHORT $L15097

; 905  : 
; 906  :     while (CurrentMdl) {

  000a1	8b 5d ec	 mov	 ebx, DWORD PTR _StreamObject$[ebp]
$L13264:

; 964  : 
; 965  :     }                           // while CurrentMdl
; 966  : 
; 967  :     Request->HwSRB.NumberOfScatterGatherElements = NumberOfElements;

  000a4	8b 45 fc	 mov	 eax, DWORD PTR _NumberOfElements$[ebp]
  000a7	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 968  : 
; 969  :     //
; 970  :     // now map the transfer for the SRB in case the minidriver needs the
; 971  :     // physical address of the extension.
; 972  :     //
; 973  :     // NOTE:  This function changes the length field in the SRB, which
; 974  :     // makes it invalid.   It is not used elsewhere, however.
; 975  :     //
; 976  :     // We must flush the buffers appropriately as the SRB extension
; 977  :     // may be DMA'ed both from and to. According to JHavens, we want to
; 978  :     // tell IOMapXfer and KeFlushIoBuffers that this is a write, and upon
; 979  :     // completion tell IoFlushAdapterBuffers that this is a read.
; 980  :     //
; 981  :     // Need to investigate if doing these extra calls add more overhead than
; 982  :     // maintaining a queue of SRB's & extensions.   However, on x86
; 983  :     // platforms the KeFlush call gets compiled out and
; 984  :     // on PCI systems the IoFlush call doesn't get made, so there is no
; 985  :     // overhead on these system except the map xfer call.
; 986  :     //
; 987  : 
; 988  :     //
; 989  :     // flush the SRB buffer since we are doing DMA.
; 990  :     //
; 991  : 
; 992  :     KeFlushIoBuffers(Request->Mdl,
; 993  :                      FALSE,
; 994  :                      TRUE);
; 995  : 
; 996  :     //
; 997  :     // get the physical address of the SRB
; 998  :     //
; 999  : 
; 1000 :     Request->PhysicalAddress = IoMapTransfer(((PDEVICE_EXTENSION) (DeviceObject->DeviceExtension))
; 1001 :                                              ->DmaAdapterObject,
; 1002 :                                              Request->Mdl,
; 1003 :                                              MapRegisterBase,
; 1004 :                                              (PSCHAR) MmGetMdlVirtualAddress(
; 1005 :                                                               Request->Mdl),
; 1006 :                                              &Request->Length,
; 1007 :                                              TRUE);

  000aa	8b 45 08	 mov	 eax, DWORD PTR _DeviceObject$[ebp]
  000ad	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  000b0	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000b6	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  000b9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000bc	6a 01		 push	 1
  000be	8d 7e 68	 lea	 edi, DWORD PTR [esi+104]
  000c1	57		 push	 edi
  000c2	8b 78 18	 mov	 edi, DWORD PTR [eax+24]
  000c5	03 78 10	 add	 edi, DWORD PTR [eax+16]
  000c8	57		 push	 edi
  000c9	ff 75 10	 push	 DWORD PTR _MapRegisterBase$[ebp]
  000cc	50		 push	 eax
  000cd	51		 push	 ecx
  000ce	ff 52 20	 call	 DWORD PTR [edx+32]
  000d1	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1008 : 
; 1009 :     //
; 1010 :     // if we are async, signal the event which will cause the request to be
; 1011 :     // called down on the original thread; otherwise, send the request down
; 1012 :     // now at dispatch level.
; 1013 :     //
; 1014 : 
; 1015 : 
; 1016 :     if (((PDEVICE_EXTENSION) DeviceObject->DeviceExtension)->NoSync) {

  000d4	8b 45 08	 mov	 eax, DWORD PTR _DeviceObject$[ebp]
  000d7	89 56 64	 mov	 DWORD PTR [esi+100], edx
  000da	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  000dd	80 b8 58 01 00
	00 00		 cmp	 BYTE PTR [eax+344], 0
  000e4	74 13		 je	 SHORT $L13278

; 1017 : 
; 1018 :         KeSetEvent(&Request->DmaEvent, IO_NO_INCREMENT, FALSE);

  000e6	6a 00		 push	 0
  000e8	6a 00		 push	 0
  000ea	81 c6 90 00 00
	00		 add	 esi, 144		; 00000090H
  000f0	56		 push	 esi
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetEvent@12

; 1019 : 
; 1020 :     } else {

  000f7	eb 0d		 jmp	 SHORT $L13279
$L13278:

; 1021 : 
; 1022 :         //
; 1023 :         // send the request to the minidriver
; 1024 :         //
; 1025 : 
; 1026 :         SCStartMinidriverRequest(StreamObject,
; 1027 :                                  Request,
; 1028 :                                  (PVOID)
; 1029 :                             StreamObject->HwStreamObject.ReceiveDataPacket);

  000f9	ff b3 b4 00 00
	00		 push	 DWORD PTR [ebx+180]
  000ff	56		 push	 esi
  00100	53		 push	 ebx
  00101	e8 00 00 00 00	 call	 _SCStartMinidriverRequest@12
$L13279:

; 1030 : 
; 1031 :     }                           // if nosync
; 1032 : 
; 1033 :     //
; 1034 :     // keep the map registers but release the I/O adapter channel
; 1035 :     //
; 1036 : 
; 1037 :     return (DeallocateObjectKeepRegisters);

  00106	6a 03		 push	 3
  00108	58		 pop	 eax
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx

; 1038 : }

  0010c	c9		 leave
  0010d	c2 10 00	 ret	 16			; 00000010H
_StreamClassDmaCallback@16 ENDP
_TEXT	ENDS
PUBLIC	_SCProcessCompletedRequest@4
; Function compile flags: /Ogsy
;	COMDAT _SCProcessCompletedRequest@4
_TEXT	SEGMENT
_SRB$ = 8						; size = 4
_SCProcessCompletedRequest@4 PROC NEAR			; COMDAT

; 1707 :     PIRP            Irp = SRB->HwSRB.Irp;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _SRB$[esp-4]

; 1708 : 
; 1709 :     //
; 1710 :     // complete the IRP
; 1711 :     //
; 1712 : 
; 1713 :     return (SCCompleteIrp(Irp,
; 1714 :                           SCDequeueAndDeleteSrb(SRB),
; 1715 :                      (PDEVICE_EXTENSION) SRB->HwSRB.HwDeviceExtension - 1));

  00004	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00007	56		 push	 esi
  00008	8b 70 2c	 mov	 esi, DWORD PTR [eax+44]
  0000b	81 e9 24 02 00
	00		 sub	 ecx, 548		; 00000224H
  00011	51		 push	 ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _SCDequeueAndDeleteSrb@4
  00018	50		 push	 eax
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 _SCCompleteIrp@12
  0001f	5e		 pop	 esi

; 1716 : 
; 1717 : }

  00020	c2 04 00	 ret	 4
_SCProcessCompletedRequest@4 ENDP
_TEXT	ENDS
PUBLIC	_SCProcessCompletedDataRequest@4
; Function compile flags: /Ogsy
;	COMDAT _SCProcessCompletedDataRequest@4
_TEXT	SEGMENT
_IrpStack$13433 = -8					; size = 4
_DeviceExtension$ = -4					; size = 4
tv403 = 8						; size = 4
_SRB$ = 8						; size = 4
_SCProcessCompletedDataRequest@4 PROC NEAR		; COMDAT

; 1799 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi

; 1800 :     PDEVICE_EXTENSION DeviceExtension =
; 1801 :     (PDEVICE_EXTENSION) SRB->HwSRB.HwDeviceExtension - 1;

  00006	8b 75 08	 mov	 esi, DWORD PTR _SRB$[ebp]
  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 1802 :     PIRP            Irp = SRB->HwSRB.Irp;

  0000c	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0000f	2d 24 02 00 00	 sub	 eax, 548		; 00000224H

; 1803 :     PMDL            CurrentMdl;
; 1804 :     ULONG           i = 0;
; 1805 : 
; 1806 :     if (Irp) {

  00014	85 c9		 test	 ecx, ecx
  00016	89 45 fc	 mov	 DWORD PTR _DeviceExtension$[ebp], eax
  00019	0f 84 d5 00 00
	00		 je	 $L13458

; 1812 : 
; 1813 :         ASSERT(CurrentHeader);
; 1814 : 
; 1815 :         IrpStack = IoGetCurrentIrpStackLocation(Irp);

  0001f	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00022	53		 push	 ebx
  00023	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  00026	57		 push	 edi

; 1816 :         ASSERT(IrpStack);
; 1817 : 
; 1818 : #if DBG
; 1819 : 
; 1820 :         //
; 1821 :         // assert the MDL list.
; 1822 :         //
; 1823 : 
; 1824 :         CurrentMdl = Irp->MdlAddress;
; 1825 : 
; 1826 :         while (CurrentMdl) {
; 1827 : 
; 1828 :             CurrentMdl = CurrentMdl->Next;
; 1829 :         }                       // while
; 1830 : #endif
; 1831 : 
; 1832 :         CurrentMdl = Irp->MdlAddress;

  00027	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 1833 : 
; 1834 :         while (CurrentMdl) {

  0002a	85 ff		 test	 edi, edi
  0002c	89 55 f8	 mov	 DWORD PTR _IrpStack$13433[ebp], edx
  0002f	74 75		 je	 SHORT $L13439

; 1807 : 
; 1808 :         PIO_STACK_LOCATION IrpStack;
; 1809 :         PKSSTREAM_HEADER CurrentHeader;
; 1810 : 
; 1811 :         CurrentHeader = SRB->HwSRB.CommandData.DataBufferArray;

  00031	83 65 08 00	 and	 DWORD PTR tv403[ebp], 0
$L13438:

; 1835 : 
; 1836 :             //
; 1837 :             // flush the buffers if we did PIO data in
; 1838 :             //
; 1839 : 
; 1840 :             if (SRB->HwSRB.StreamObject->Pio) {

  00035	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00038	80 79 25 00	 cmp	 BYTE PTR [ecx+37], 0
  0003c	74 36		 je	 SHORT $L13449
  0003e	eb 0c		 jmp	 SHORT $L15137
$L13442:

; 1841 : 
; 1842 :                 //
; 1843 :                 // find the first header with data...
; 1844 :                 //
; 1845 : 
; 1846 :                 while (!(CurrentHeader->DataUsed) && (!CurrentHeader->FrameExtent)) {

  00040	83 7b 20 00	 cmp	 DWORD PTR [ebx+32], 0
  00044	75 0c		 jne	 SHORT $L13443

; 1847 : 
; 1848 :                     CurrentHeader = ((PKSSTREAM_HEADER) ((PBYTE) CurrentHeader +
; 1849 :                                                     SRB->StreamHeaderSize));

  00046	03 9e 88 00 00
	00		 add	 ebx, DWORD PTR [esi+136]
$L15137:

; 1841 : 
; 1842 :                 //
; 1843 :                 // find the first header with data...
; 1844 :                 //
; 1845 : 
; 1846 :                 while (!(CurrentHeader->DataUsed) && (!CurrentHeader->FrameExtent)) {

  0004c	83 7b 24 00	 cmp	 DWORD PTR [ebx+36], 0
  00050	74 ee		 je	 SHORT $L13442
$L13443:

; 1850 :                 }
; 1851 : 
; 1852 :                 //
; 1853 :                 // restore the pointer we changed
; 1854 :                 //
; 1855 : 
; 1856 : //                CurrentHeader->Data = (PVOID) ((ULONG_PTR) CurrentMdl->StartVa +
; 1857 : //                                               CurrentMdl->ByteOffset);
; 1858 : //
; 1859 :                 if (SRB->bMemPtrValid) { // safety first!

  00052	80 be a0 00 00
	00 00		 cmp	 BYTE PTR [esi+160], 0
  00059	74 0f		 je	 SHORT $L15136

; 1860 :                     DebugPrint((DebugLevelVerbose, "Restoring: Index:%x, Ptr:%x\n",
; 1861 :                             i, SRB->pMemPtrArray[i]));
; 1862 : 
; 1863 :                     CurrentHeader->Data = SRB->pMemPtrArray[i];

  0005b	8b 8e a4 00 00
	00		 mov	 ecx, DWORD PTR [esi+164]
  00061	8b 55 08	 mov	 edx, DWORD PTR tv403[ebp]
  00064	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00067	89 4b 28	 mov	 DWORD PTR [ebx+40], ecx
$L15136:

; 1864 :                 }
; 1865 : 
; 1866 :                 DebugPrint((DebugLevelVerbose, "'SCPioComplete: Irp = %x, header = %x, Data = %x\n",
; 1867 :                             Irp, CurrentHeader, CurrentHeader->Data));
; 1868 : 
; 1869 :                 //
; 1870 :                 // update to the next header
; 1871 :                 //
; 1872 :                 i++;

  0006a	83 45 08 04	 add	 DWORD PTR tv403[ebp], 4

; 1873 :                 CurrentHeader = ((PKSSTREAM_HEADER) ((PBYTE) CurrentHeader +
; 1874 :                                                      SRB->StreamHeaderSize));

  0006e	03 9e 88 00 00
	00		 add	 ebx, DWORD PTR [esi+136]
$L13449:

; 1875 : 
; 1876 :                 if (SRB->HwSRB.Command == SRB_READ_DATA) {
; 1877 : 
; 1878 :                     KeFlushIoBuffers(CurrentMdl,
; 1879 :                                      TRUE,
; 1880 :                                      FALSE);
; 1881 : 
; 1882 :                 }               // if data in
; 1883 :             }                   // if PIO
; 1884 :             //
; 1885 :             // Flush the adapter buffers if we had map registers => DMA.
; 1886 :             //
; 1887 : 
; 1888 :             if (SRB->MapRegisterBase) {

  00074	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00078	74 26		 je	 SHORT $L15105

; 1889 : 
; 1890 :                 //
; 1891 :                 // Since we are a master call I/O flush adapter buffers
; 1892 :                 // with a NULL adapter.
; 1893 :                 //
; 1894 : 
; 1895 :                 IoFlushAdapterBuffers(DeviceExtension->DmaAdapterObject,
; 1896 :                                       CurrentMdl,
; 1897 :                                       SRB->MapRegisterBase,
; 1898 :                                       MmGetMdlVirtualAddress(CurrentMdl),
; 1899 :                                       CurrentMdl->ByteCount,
; 1900 :                                       (BOOLEAN) (SRB->HwSRB.Command ==
; 1901 :                                                SRB_READ_DATA ? FALSE : TRUE)
; 1902 :                     );

  0007a	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0007e	8b 80 b4 00 00
	00		 mov	 eax, DWORD PTR [eax+180]
  00084	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00087	0f 95 c2	 setne	 dl
  0008a	52		 push	 edx
  0008b	ff 77 14	 push	 DWORD PTR [edi+20]
  0008e	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  00091	03 57 10	 add	 edx, DWORD PTR [edi+16]
  00094	52		 push	 edx
  00095	ff 76 5c	 push	 DWORD PTR [esi+92]
  00098	57		 push	 edi
  00099	50		 push	 eax
  0009a	ff 51 14	 call	 DWORD PTR [ecx+20]
  0009d	8b 45 fc	 mov	 eax, DWORD PTR _DeviceExtension$[ebp]
$L15105:

; 1903 : 
; 1904 :             }                   // if DMA
; 1905 :             CurrentMdl = CurrentMdl->Next;

  000a0	8b 3f		 mov	 edi, DWORD PTR [edi]
  000a2	85 ff		 test	 edi, edi
  000a4	75 8f		 jne	 SHORT $L13438
$L13439:

; 1906 : 
; 1907 : 
; 1908 :         }                       // while CurrentMdl
; 1909 : 
; 1910 :         //
; 1911 :         // flush the buffer for the SRB extension in case the adapter DMA'ed
; 1912 :         // to it.   JHavens says we must treat this as a READ.
; 1913 :         //
; 1914 : 
; 1915 :         //
; 1916 :         // Flush the adapter buffer for the SRB if we had map registers =>
; 1917 :         // DMA.
; 1918 :         //
; 1919 : 
; 1920 :         if (SRB->MapRegisterBase) {

  000a6	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  000a9	85 d2		 test	 edx, edx
  000ab	74 34		 je	 SHORT $L15125

; 1921 : 
; 1922 :             IoFlushAdapterBuffers(DeviceExtension->DmaAdapterObject,
; 1923 :                                   SRB->Mdl,
; 1924 :                                   SRB->MapRegisterBase,
; 1925 :                                   MmGetMdlVirtualAddress(
; 1926 :                                                          SRB->Mdl),
; 1927 :                                   SRB->Length,
; 1928 :                                   FALSE);

  000ad	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000b3	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  000b6	8b 58 18	 mov	 ebx, DWORD PTR [eax+24]
  000b9	03 58 10	 add	 ebx, DWORD PTR [eax+16]
  000bc	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  000bf	6a 00		 push	 0
  000c1	ff 76 68	 push	 DWORD PTR [esi+104]
  000c4	53		 push	 ebx
  000c5	52		 push	 edx
  000c6	50		 push	 eax
  000c7	51		 push	 ecx
  000c8	ff 57 14	 call	 DWORD PTR [edi+20]

; 1929 : 
; 1930 :             //
; 1931 :             // Free the map registers if DMA.
; 1932 :             //
; 1933 : 
; 1934 :             IoFreeMapRegisters(DeviceExtension->DmaAdapterObject,
; 1935 :                                SRB->MapRegisterBase,
; 1936 :                                SRB->HwSRB.NumberOfPhysicalPages);

  000cb	ff 76 40	 push	 DWORD PTR [esi+64]
  000ce	8b 45 fc	 mov	 eax, DWORD PTR _DeviceExtension$[ebp]
  000d1	8b 80 b4 00 00
	00		 mov	 eax, DWORD PTR [eax+180]
  000d7	ff 76 5c	 push	 DWORD PTR [esi+92]
  000da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000dd	50		 push	 eax
  000de	ff 51 1c	 call	 DWORD PTR [ecx+28]
$L15125:

; 1937 : 
; 1938 :         }                       // if MapRegisterBase
; 1939 :         //
; 1940 :         // free the extra data, if any.
; 1941 :         //
; 1942 : 
; 1943 :         if (IrpStack->Parameters.Others.Argument4 != NULL) {

  000e1	8b 45 f8	 mov	 eax, DWORD PTR _IrpStack$13433[ebp]
  000e4	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000e7	85 c0		 test	 eax, eax
  000e9	5f		 pop	 edi
  000ea	5b		 pop	 ebx
  000eb	74 07		 je	 SHORT $L13458

; 1944 : 
; 1945 :             TRAP;
; 1946 :             ExFreePool(IrpStack->Parameters.Others.Argument4);

  000ed	50		 push	 eax
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4
$L13458:

; 1947 : 
; 1948 :         }                       // if extradata
; 1949 :     }                           // if Irp
; 1950 :     //
; 1951 :     // call the generic completion handler
; 1952 :     //
; 1953 : 
; 1954 :     SCProcessCompletedRequest(SRB);

  000f4	56		 push	 esi
  000f5	e8 00 00 00 00	 call	 _SCProcessCompletedRequest@4
  000fa	5e		 pop	 esi

; 1955 : 
; 1956 : }                               // SCProcessCompletedDataRequest

  000fb	c9		 leave
  000fc	c2 04 00	 ret	 4
_SCProcessCompletedDataRequest@4 ENDP
_TEXT	ENDS
PUBLIC	_SCCheckFilterInstanceStreamsForIrp@8
; Function compile flags: /Ogsy
;	COMDAT _SCCheckFilterInstanceStreamsForIrp@8
_TEXT	SEGMENT
_FilterInstance$ = 8					; size = 4
_Irp$ = 12						; size = 4
_SCCheckFilterInstanceStreamsForIrp@8 PROC NEAR		; COMDAT

; 3362 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 3363 : 
; 3364 :     PSTREAM_OBJECT  StreamObject;
; 3365 :     PLIST_ENTRY     StreamListEntry,
; 3366 :                     StreamObjectEntry;
; 3367 : 
; 3368 :     StreamListEntry = StreamObjectEntry = &FilterInstance->FirstStream;

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _FilterInstance$[esp+4]
  00006	83 c7 10	 add	 edi, 16			; 00000010H

; 3369 : 
; 3370 :     while (StreamObjectEntry->Flink != StreamListEntry) {

  00009	8b 37		 mov	 esi, DWORD PTR [edi]
  0000b	eb 2e		 jmp	 SHORT $L15143
$L13811:

; 3371 : 
; 3372 :         StreamObjectEntry = StreamObjectEntry->Flink;
; 3373 : 
; 3374 :         //
; 3375 :         // follow the link to the stream
; 3376 :         // object
; 3377 :         //
; 3378 : 
; 3379 :         StreamObject = CONTAINING_RECORD(StreamObjectEntry,
; 3380 :                                          STREAM_OBJECT,
; 3381 :                                          NextStream);
; 3382 : 
; 3383 :         if (SCCheckRequestsForIrp(
; 3384 :                                   &StreamObject->DataPendingQueue, Irp, TRUE, StreamObject->DeviceExtension)) {

  0000d	ff 76 10	 push	 DWORD PTR [esi+16]
  00010	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  00013	6a 01		 push	 1
  00015	ff 74 24 18	 push	 DWORD PTR _Irp$[esp+12]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _SCCheckRequestsForIrp@16
  0001f	84 c0		 test	 al, al
  00021	75 23		 jne	 SHORT $L15142

; 3385 : 
; 3386 :             return (TRUE);
; 3387 :         }
; 3388 :         if (SCCheckRequestsForIrp(
; 3389 :                                   &StreamObject->ControlPendingQueue, Irp, TRUE, StreamObject->DeviceExtension)) {

  00023	ff 76 10	 push	 DWORD PTR [esi+16]
  00026	8d 46 f0	 lea	 eax, DWORD PTR [esi-16]
  00029	6a 01		 push	 1
  0002b	ff 74 24 18	 push	 DWORD PTR _Irp$[esp+12]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _SCCheckRequestsForIrp@16
  00035	84 c0		 test	 al, al
  00037	75 0d		 jne	 SHORT $L15142

; 3369 : 
; 3370 :     while (StreamObjectEntry->Flink != StreamListEntry) {

  00039	8b 36		 mov	 esi, DWORD PTR [esi]
$L15143:
  0003b	3b f7		 cmp	 esi, edi
  0003d	75 ce		 jne	 SHORT $L13811

; 3392 :         }
; 3393 :     }
; 3394 : 
; 3395 :     return (FALSE);

  0003f	32 c0		 xor	 al, al
$L13806:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 3396 : 
; 3397 : }                               // SCCheckFilterInstanceStreamsForIrp

  00043	c2 08 00	 ret	 8
$L15142:

; 3390 : 
; 3391 :             return (TRUE);

  00046	b0 01		 mov	 al, 1
  00048	eb f7		 jmp	 SHORT $L13806
_SCCheckFilterInstanceStreamsForIrp@8 ENDP
_TEXT	ENDS
PUBLIC	_SCReadRegistryValues@8
; Function compile flags: /Ogsy
;	COMDAT _SCReadRegistryValues@8
PAGE	SEGMENT
_handle$ = -4						; size = 4
_DeviceExtension$ = 8					; size = 4
_DataBuffer$ = 12					; size = 4
_PhysicalDeviceObject$ = 12				; size = 4
_SCReadRegistryValues@8 PROC NEAR			; COMDAT

; 4129 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4130 :     ULONG           i;
; 4131 :     NTSTATUS        Status;
; 4132 :     HANDLE          handle;
; 4133 :     ULONG           DataBuffer;
; 4134 : 
; 4135 :     PAGED_CODE();
; 4136 : 
; 4137 :     Status = IoOpenDeviceRegistryKey(PhysicalDeviceObject,
; 4138 :                                      PLUGPLAY_REGKEY_DRIVER,
; 4139 :                                      STANDARD_RIGHTS_ALL,
; 4140 :                                      &handle);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _handle$[ebp]
  00007	50		 push	 eax
  00008	68 00 00 1f 00	 push	 2031616			; 001f0000H
  0000d	6a 02		 push	 2
  0000f	ff 75 0c	 push	 DWORD PTR _PhysicalDeviceObject$[ebp]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoOpenDeviceRegistryKey@16

; 4141 : 
; 4142 :     //
; 4143 :     // loop through our table of strings,
; 4144 :     // reading the registry for each.
; 4145 :     //
; 4146 : 
; 4147 :     if (NT_SUCCESS(Status)) {

  00018	85 c0		 test	 eax, eax
  0001a	7c 4e		 jl	 SHORT $L13981
  0001c	56		 push	 esi
  0001d	57		 push	 edi

; 4148 : 
; 4149 :         for (i = 0; i < SIZEOF_ARRAY(RegistrySettings); i++) {

  0001e	8b 7d 08	 mov	 edi, DWORD PTR _DeviceExtension$[ebp]
  00021	33 f6		 xor	 esi, esi
$L13982:

; 4150 : 
; 4151 :             //
; 4152 :             // read the registry value and set
; 4153 :             // the flag if the setting is true.
; 4154 :             //
; 4155 : 
; 4156 :             //
; 4157 :             // Need to init each time besides 
; 4158 :             // we only obtain one byte in the DataBuffer
; 4159 :             //
; 4160 :             
; 4161 :             DataBuffer = 0;

  00023	83 65 0c 00	 and	 DWORD PTR _DataBuffer$[ebp], 0

; 4162 :             
; 4163 :             Status = SCGetRegistryValue(handle,
; 4164 :                                         RegistrySettings[i].String,
; 4165 :                                         RegistrySettings[i].StringLength,
; 4166 :                                         &DataBuffer,
; 4167 :                                         1);

  00027	6a 01		 push	 1
  00029	8d 45 0c	 lea	 eax, DWORD PTR _DataBuffer$[ebp]
  0002c	50		 push	 eax
  0002d	ff b6 04 00 00
	00		 push	 DWORD PTR _RegistrySettings[esi+4]
  00033	ff b6 00 00 00
	00		 push	 DWORD PTR _RegistrySettings[esi]
  00039	ff 75 fc	 push	 DWORD PTR _handle$[ebp]
  0003c	e8 00 00 00 00	 call	 _SCGetRegistryValue@20

; 4168 : 
; 4169 :             DebugPrint((DebugLevelInfo,
; 4170 :                        "Reg Key %S value %x\n",
; 4171 :                        RegistrySettings[i].String,
; 4172 :                        (BYTE)DataBuffer));             
; 4173 :                        
; 4174 :             if ((NT_SUCCESS(Status)) && DataBuffer) {

  00041	85 c0		 test	 eax, eax
  00043	7c 12		 jl	 SHORT $L13983
  00045	83 7d 0c 00	 cmp	 DWORD PTR _DataBuffer$[ebp], 0
  00049	74 0c		 je	 SHORT $L13983

; 4175 : 
; 4176 : 
; 4177 :                 //
; 4178 :                 // setting is true, so or in the
; 4179 :                 // appropriate flag
; 4180 :                 //
; 4181 : 
; 4182 :                 DeviceExtension->RegistryFlags |= RegistrySettings[i].Flags;                

  0004b	8b 86 08 00 00
	00		 mov	 eax, DWORD PTR _RegistrySettings[esi+8]
  00051	09 87 a8 00 00
	00		 or	 DWORD PTR [edi+168], eax
$L13983:
  00057	83 c6 0c	 add	 esi, 12			; 0000000cH
  0005a	83 fe 48	 cmp	 esi, 72			; 00000048H
  0005d	72 c4		 jb	 SHORT $L13982

; 4183 :             }                   // if true            
; 4184 :         }                       // while strings
; 4185 :         DebugPrint((DebugLevelInfo,"====DeviceObject %x DeviceExtenion %x has RegFlags %x\n",
; 4186 :                    DeviceExtension->DeviceObject,
; 4187 :                    DeviceExtension,
; 4188 :                    DeviceExtension->RegistryFlags ));
; 4189 :                    
; 4190 : 
; 4191 :         //
; 4192 :         // close the registry handle.
; 4193 :         //
; 4194 : 
; 4195 :         ZwClose(handle);

  0005f	ff 75 fc	 push	 DWORD PTR _handle$[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ZwClose@4
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
$L13981:

; 4196 : 
; 4197 :     }                           // status = success
; 4198 : }

  0006a	c9		 leave
  0006b	c2 08 00	 ret	 8
_SCReadRegistryValues@8 ENDP
PAGE	ENDS
PUBLIC	_SCFreeDeadEvents@4
EXTRN	__imp__KsDiscardEvent@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCFreeDeadEvents@4
_TEXT	SEGMENT
_EventList$ = -8					; size = 8
_DeviceExtension$ = 8					; size = 4
_SCFreeDeadEvents@4 PROC NEAR				; COMDAT

; 6235 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi

; 6236 :     LIST_ENTRY      EventList;
; 6237 :     PLIST_ENTRY     EventListEntry;
; 6238 :     PKSEVENT_ENTRY  EventEntry;
; 6239 :     KIRQL           Irql;
; 6240 : 
; 6241 :     //
; 6242 :     // capture the dead list at the appropriate synchronization level.
; 6243 :     //
; 6244 : 
; 6245 :     // hack to save code.  store the DeviceExtension* in the list entry.
; 6246 : 
; 6247 :     EventList.Flink = (PLIST_ENTRY) DeviceExtension;

  00007	8b 75 08	 mov	 esi, DWORD PTR _DeviceExtension$[ebp]
  0000a	57		 push	 edi

; 6248 : 
; 6249 :     KeAcquireSpinLock(&DeviceExtension->SpinLock, &Irql);

  0000b	8d be d8 00 00
	00		 lea	 edi, DWORD PTR [esi+216]
  00011	8b cf		 mov	 ecx, edi
  00013	89 75 f8	 mov	 DWORD PTR _EventList$[ebp], esi
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4
  0001c	8a d8		 mov	 bl, al

; 6250 : 
; 6251 :     DeviceExtension->SynchronizeExecution(
; 6252 :                                           DeviceExtension->InterruptObject,
; 6253 :                                           (PVOID) SCGetDeadListSynchronized,
; 6254 :                                           &EventList);

  0001e	8d 45 f8	 lea	 eax, DWORD PTR _EventList$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET FLAT:_SCGetDeadListSynchronized@4
  00027	ff b6 ac 00 00
	00		 push	 DWORD PTR [esi+172]
  0002d	ff 96 d4 00 00
	00		 call	 DWORD PTR [esi+212]

; 6255 : 
; 6256 :     KeReleaseSpinLock(&DeviceExtension->SpinLock, Irql);

  00033	8a d3		 mov	 dl, bl
  00035	8b cf		 mov	 ecx, edi
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8

; 6257 : 
; 6258 :     //
; 6259 :     // discard each event on the captured list
; 6260 :     //
; 6261 : 
; 6262 :     while (!IsListEmpty(&EventList)) {

  0003d	eb 12		 jmp	 SHORT $L15159
$L14378:

; 6263 : 
; 6264 : 
; 6265 :         EventListEntry = RemoveHeadList(&EventList);

  0003f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00041	8d 55 f8	 lea	 edx, DWORD PTR _EventList$[ebp]
  00044	89 45 f8	 mov	 DWORD PTR _EventList$[ebp], eax

; 6266 : 
; 6267 :         EventEntry = CONTAINING_RECORD(EventListEntry,
; 6268 :                                        KSEVENT_ENTRY,
; 6269 :                                        ListEntry);
; 6270 : 
; 6271 :         KsDiscardEvent(EventEntry);

  00047	51		 push	 ecx
  00048	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsDiscardEvent@4
$L15159:
  00051	8b 4d f8	 mov	 ecx, DWORD PTR _EventList$[ebp]
  00054	8d 45 f8	 lea	 eax, DWORD PTR _EventList$[ebp]
  00057	3b c8		 cmp	 ecx, eax
  00059	75 e4		 jne	 SHORT $L14378
  0005b	5f		 pop	 edi

; 6272 :     }                           // while not empty
; 6273 : 
; 6274 :     //
; 6275 :     // show event has been run
; 6276 :     //
; 6277 : 
; 6278 :     DeviceExtension->DeadEventItemQueued = FALSE;

  0005c	c6 86 e5 01 00
	00 00		 mov	 BYTE PTR [esi+485], 0
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx

; 6279 : 
; 6280 :     return;
; 6281 : }

  00065	c9		 leave
  00066	c2 04 00	 ret	 4
_SCFreeDeadEvents@4 ENDP
_TEXT	ENDS
PUBLIC	_SCSetUpForDMA@8
; Function compile flags: /Ogsy
;	COMDAT _SCSetUpForDMA@8
_TEXT	SEGMENT
_DeviceObject$ = 8					; size = 4
_Request$ = 12						; size = 4
_SCSetUpForDMA@8 PROC NEAR				; COMDAT

; 817  :     NTSTATUS        status;
; 818  : 
; 819  :     //
; 820  :     // Allocate the adapter channel with sufficient map registers
; 821  :     // for the transfer.
; 822  :     //
; 823  : 
; 824  :     status = IoAllocateAdapterChannel(
; 825  :     ((PDEVICE_EXTENSION) (DeviceObject->DeviceExtension))->DmaAdapterObject,
; 826  :                                       DeviceObject,
; 827  :                                    Request->HwSRB.NumberOfPhysicalPages + 1,    // one more for the SRB
; 828  :     // extension
; 829  :                                       StreamClassDmaCallback,
; 830  :                                       Request);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _Request$[esp-4]
  00004	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00007	56		 push	 esi
  00008	8b 74 24 08	 mov	 esi, DWORD PTR _DeviceObject$[esp]
  0000c	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0000f	8b 89 b4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+180]
  00015	57		 push	 edi
  00016	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00019	8b 7f 10	 mov	 edi, DWORD PTR [edi+16]
  0001c	52		 push	 edx
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:_StreamClassDmaCallback@16
  00022	40		 inc	 eax
  00023	50		 push	 eax
  00024	56		 push	 esi
  00025	51		 push	 ecx
  00026	ff d7		 call	 edi

; 831  : 
; 832  :     if (!NT_SUCCESS(status)) {

  00028	85 c0		 test	 eax, eax
  0002a	5f		 pop	 edi
  0002b	0f 9d c0	 setge	 al
  0002e	5e		 pop	 esi

; 833  :         return FALSE;
; 834  :     }
; 835  :     return TRUE;
; 836  : 
; 837  : }

  0002f	c2 08 00	 ret	 8
_SCSetUpForDMA@8 ENDP
_TEXT	ENDS
PUBLIC	_SCDequeueAndStartStreamDataRequest@4
; Function compile flags: /Ogsy
;	COMDAT _SCDequeueAndStartStreamDataRequest@4
_TEXT	SEGMENT
_StreamObject$ = 8					; size = 4
_SCDequeueAndStartStreamDataRequest@4 PROC NEAR		; COMDAT

; 200  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 201  :     PIRP            Irp;
; 202  :     PSTREAM_REQUEST_BLOCK Request;
; 203  :     PLIST_ENTRY     Entry;
; 204  :     BOOLEAN         Status;
; 205  :     PDEVICE_EXTENSION DeviceExtension = StreamObject->DeviceExtension;

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR _StreamObject$[esp+4]
  00006	8b 9e 14 01 00
	00		 mov	 ebx, DWORD PTR [esi+276]

; 206  : 
; 207  :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);
; 208  :     Entry = RemoveTailList(&StreamObject->DataPendingQueue);

  0000c	8d 86 ec 00 00
	00		 lea	 eax, DWORD PTR [esi+236]
  00012	57		 push	 edi
  00013	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00016	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00019	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001c	89 01		 mov	 DWORD PTR [ecx], eax

; 209  :     Irp = CONTAINING_RECORD(Entry,
; 210  :                             IRP,
; 211  :                             Tail.Overlay.ListEntry);
; 212  : 
; 213  :     ASSERT(Irp);
; 214  : 
; 215  : //    ASSERT((IoGetCurrentIrpStackLocation(Irp)->MajorFunction ==
; 216  : //                       IOCTL_KS_READ_STREAM) ||
; 217  : //            (IoGetCurrentIrpStackLocation(Irp)->MajorFunction ==
; 218  : //                        IOCTL_KS_WRITE_STREAM));
; 219  :     ASSERT((ULONG_PTR) Irp->Tail.Overlay.DriverContext[0] > 0x40000000);
; 220  : 
; 221  : 
; 222  :     DebugPrint((DebugLevelVerbose, "'SCStartStreamDataReq: Irp = %x, S# = %x\n",
; 223  :                 Irp, StreamObject->HwStreamObject.StreamNumber));
; 224  : 
; 225  :     //
; 226  :     // clear the ready flag as we are going to send one down.
; 227  :     //
; 228  : 
; 229  :     ASSERT(StreamObject->ReadyForNextDataReq);
; 230  : 
; 231  :     StreamObject->ReadyForNextDataReq = FALSE;
; 232  : 
; 233  :     //
; 234  :     // set the cancel routine to outstanding
; 235  :     //
; 236  : 
; 237  :     IoSetCancelRoutine(Irp, StreamClassCancelOutstandingIrp);

  0001e	8d 4f e0	 lea	 ecx, DWORD PTR [edi-32]
  00021	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:_StreamClassCancelOutstandingIrp@8
  00026	c6 86 55 01 00
	00 00		 mov	 BYTE PTR [esi+341], 0
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedExchange@8

; 238  : 
; 239  :     //
; 240  :     // release the spinlock.
; 241  :     //
; 242  : 
; 243  :     KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  00033	8d 8b d8 00 00
	00		 lea	 ecx, DWORD PTR [ebx+216]
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4

; 244  : 
; 245  :     //
; 246  :     // get the request packet from the IRP
; 247  :     //
; 248  : 
; 249  :     Request = Irp->Tail.Overlay.DriverContext[0];
; 250  : 
; 251  :     //
; 252  :     // build scatter/gather list if necessary
; 253  :     //
; 254  : 
; 255  :     if (StreamObject->HwStreamObject.Dma) {

  0003f	80 be cc 00 00
	00 00		 cmp	 BYTE PTR [esi+204], 0
  00046	8b 7f e8	 mov	 edi, DWORD PTR [edi-24]
  00049	74 0e		 je	 SHORT $L13089

; 256  : 
; 257  :         //
; 258  :         // allocate the adapter channel. call cannot fail as the only
; 259  :         // time it would is when there aren't enough map registers, and
; 260  :         // we've already checked for that condition.
; 261  :         //
; 262  : 
; 263  :         Status = SCSetUpForDMA(DeviceExtension->DeviceObject,
; 264  :                                Request);

  0004b	57		 push	 edi
  0004c	ff b3 a0 00 00
	00		 push	 DWORD PTR [ebx+160]
  00052	e8 00 00 00 00	 call	 _SCSetUpForDMA@8

; 265  :         ASSERT(Status);
; 266  : 
; 267  :         //
; 268  :         // DMA adapter allocation requires a
; 269  :         // callback, so just exit
; 270  :         //
; 271  : 
; 272  :         return (STATUS_PENDING);

  00057	eb 0d		 jmp	 SHORT $L15178
$L13089:

; 273  : 
; 274  :     }                           // if DMA
; 275  :     //
; 276  :     // start the request for the PIO case.
; 277  :     //
; 278  : 
; 279  :     SCStartMinidriverRequest(StreamObject,
; 280  :                              Request,
; 281  :                              (PVOID)
; 282  :                              StreamObject->HwStreamObject.ReceiveDataPacket);

  00059	ff b6 b4 00 00
	00		 push	 DWORD PTR [esi+180]
  0005f	57		 push	 edi
  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 _SCStartMinidriverRequest@12
$L15178:
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi

; 283  : 
; 284  :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);
; 285  :     return (STATUS_PENDING);

  00068	b8 03 01 00 00	 mov	 eax, 259		; 00000103H
  0006d	5b		 pop	 ebx

; 286  : 
; 287  : }

  0006e	c2 04 00	 ret	 4
_SCDequeueAndStartStreamDataRequest@4 ENDP
_TEXT	ENDS
PUBLIC	_SCStartRequestOnStream@8
; Function compile flags: /Ogsy
;	COMDAT _SCStartRequestOnStream@8
_TEXT	SEGMENT
_StreamObject$ = 8					; size = 4
_DeviceExtension$ = 12					; size = 4
_SCStartRequestOnStream@8 PROC NEAR			; COMDAT

; 1530 : {

  00000	53		 push	 ebx

; 1531 :     //
; 1532 :     // Check for a ready for next packet. Acquire spinlock to protect
; 1533 :     // READY bits.  Note that we don't snapshot the ready flags as we do with
; 1534 :     // the remaining notification flags, as we don't want to clear the flags
; 1535 :     // unconditionally in the snapshot in case there is not currently a
; 1536 :     // request pending.   Also, starting a request before the snapshot will
; 1537 :     // give a slight perf improvement.  Note that the flags can be set via
; 1538 :     // the minidriver while we are checking them, but since the minidriver
; 1539 :     // cannot clear them and the minidriver cannot call for a next request
; 1540 :     // more than once before it receives one, this is not a problem.
; 1541 :     //
; 1542 : 
; 1543 :     KeAcquireSpinLockAtDpcLevel(&DeviceExtension->SpinLock);

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR _DeviceExtension$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_@KefAcquireSpinLockAtDpcLevel@4
  0000d	81 c3 d8 00 00
	00		 add	 ebx, 216		; 000000d8H
  00013	8b cb		 mov	 ecx, ebx
  00015	ff d7		 call	 edi

; 1544 : 
; 1545 :     if ((StreamObject->ReadyForNextDataReq) &&
; 1546 :         (!IsListEmpty(&StreamObject->DataPendingQueue))) {

  00017	8b 74 24 10	 mov	 esi, DWORD PTR _StreamObject$[esp+8]
  0001b	80 be 55 01 00
	00 00		 cmp	 BYTE PTR [esi+341], 0
  00022	74 14		 je	 SHORT $L13380
  00024	8d 86 ec 00 00
	00		 lea	 eax, DWORD PTR [esi+236]
  0002a	39 00		 cmp	 DWORD PTR [eax], eax
  0002c	74 0a		 je	 SHORT $L13380

; 1547 : 
; 1548 :         //
; 1549 :         // start the request, which clears the ready flag and releases
; 1550 :         // the spinlock, then reobtain the spinlock.
; 1551 :         //
; 1552 : 
; 1553 :         SCDequeueAndStartStreamDataRequest(StreamObject);

  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _SCDequeueAndStartStreamDataRequest@4

; 1554 :         KeAcquireSpinLockAtDpcLevel(&DeviceExtension->SpinLock);

  00034	8b cb		 mov	 ecx, ebx
  00036	ff d7		 call	 edi
$L13380:

; 1555 : 
; 1556 :     }                           // if ready for data
; 1557 :     if ((StreamObject->ReadyForNextControlReq) &&
; 1558 :         (!IsListEmpty(&StreamObject->ControlPendingQueue))) {

  00038	80 be 54 01 00
	00 00		 cmp	 BYTE PTR [esi+340], 0
  0003f	74 12		 je	 SHORT $L13381
  00041	8d 86 f4 00 00
	00		 lea	 eax, DWORD PTR [esi+244]
  00047	39 00		 cmp	 DWORD PTR [eax], eax
  00049	74 08		 je	 SHORT $L13381

; 1559 : 
; 1560 :         //
; 1561 :         // start the request, which clears the ready flag and releases
; 1562 :         // the spinlock.
; 1563 :         //
; 1564 : 
; 1565 :         SCDequeueAndStartStreamControlRequest(StreamObject);

  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 _SCDequeueAndStartStreamControlRequest@4

; 1566 : 
; 1567 :     } else {

  00051	eb 08		 jmp	 SHORT $L13382
$L13381:

; 1568 : 
; 1569 :         KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  00053	8b cb		 mov	 ecx, ebx
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4
$L13382:
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx

; 1570 :     }                           // if ready for control
; 1571 : 
; 1572 :     return;
; 1573 : }

  0005e	c2 08 00	 ret	 8
_SCStartRequestOnStream@8 ENDP
_TEXT	ENDS
PUBLIC	_StreamClassDpc@16
EXTRN	__imp__KeQueryPerformanceCounter@4:NEAR
EXTRN	__aulldvrm:NEAR
EXTRN	__allmul:NEAR
EXTRN	__aulldiv:NEAR
; Function compile flags: /Ogsy
;	COMDAT _StreamClassDpc@16
_TEXT	SEGMENT
_ticks$13335 = -80					; size = 8
_SavedStreamInterruptData$ = -72			; size = 52
_SavedDeviceInterruptData$ = -20			; size = 52
_interruptContext$ = 32					; size = 16
_TimeContext$ = 48					; size = 32
tv355 = 80						; size = 4
tv217 = 84						; size = 8
_rate$13336 = 92					; size = 8
tv356 = 100						; size = 4
_Dpc$ = 112						; size = 4
_DeviceObject$ = 116					; size = 4
_Irp$ = 120						; size = 4
_Context$ = 124						; size = 4
_SavedIrql$13337 = 127					; size = 1
_StreamClassDpc@16 PROC NEAR				; COMDAT

; 1154 : {

  00000	55		 push	 ebp
  00001	8d 6c 24 98	 lea	 ebp, DWORD PTR [esp-104]
  00005	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H

; 1155 :     PSTREAM_OBJECT  StreamObject = Context,
; 1156 :                     NeedyStream;
; 1157 :     PDEVICE_EXTENSION DeviceExtension = DeviceObject->DeviceExtension;

  0000b	8b 45 74	 mov	 eax, DWORD PTR _DeviceObject$[ebp]
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 70 28	 mov	 esi, DWORD PTR [eax+40]

; 1158 :     INTERRUPT_CONTEXT interruptContext;
; 1159 :     INTERRUPT_DATA  SavedStreamInterruptData;
; 1160 :     INTERRUPT_DATA  SavedDeviceInterruptData;
; 1161 :     PSTREAM_REQUEST_BLOCK SRB;
; 1162 :     PERROR_LOG_ENTRY LogEntry;
; 1163 :     HW_TIME_CONTEXT TimeContext;
; 1164 : 
; 1165 :     UNREFERENCED_PARAMETER(Irp);
; 1166 :     UNREFERENCED_PARAMETER(Dpc);
; 1167 : 
; 1168 :     interruptContext.SavedStreamInterruptData = &SavedStreamInterruptData;

  00013	8d 45 b8	 lea	 eax, DWORD PTR _SavedStreamInterruptData$[ebp]
  00016	89 45 28	 mov	 DWORD PTR _interruptContext$[ebp+8], eax

; 1169 :     interruptContext.SavedDeviceInterruptData = &SavedDeviceInterruptData;
; 1170 :     interruptContext.DeviceExtension = DeviceExtension;
; 1171 : 
; 1172 :     DebugPrint((DebugLevelVerbose, "'StreamClassDpc: enter\n"));
; 1173 : 
; 1174 :     //
; 1175 :     // if a stream object is passed in, first
; 1176 :     // check if work is pending
; 1177 :     //
; 1178 : 
; 1179 :     if (StreamObject) {

  00019	33 db		 xor	 ebx, ebx
  0001b	39 5d 7c	 cmp	 DWORD PTR _Context$[ebp], ebx
  0001e	8d 45 ec	 lea	 eax, DWORD PTR _SavedDeviceInterruptData$[ebp]
  00021	57		 push	 edi
  00022	89 45 2c	 mov	 DWORD PTR _interruptContext$[ebp+12], eax
  00025	89 75 24	 mov	 DWORD PTR _interruptContext$[ebp+4], esi
  00028	74 09		 je	 SHORT $RestartDpc$13317

; 1180 : 
; 1181 :         SCStartRequestOnStream(StreamObject, DeviceExtension);

  0002a	56		 push	 esi
  0002b	ff 75 7c	 push	 DWORD PTR _Context$[ebp]
  0002e	e8 00 00 00 00	 call	 _SCStartRequestOnStream@8
$RestartDpc$13317:

; 1182 : 
; 1183 :     }                           // if streamobject
; 1184 : RestartDpc:
; 1185 : 
; 1186 :     //
; 1187 :     // Check for a ready for next packet on
; 1188 :     // the device.
; 1189 :     //
; 1190 : 
; 1191 :     KeAcquireSpinLockAtDpcLevel(&DeviceExtension->SpinLock);

  00033	8d be d8 00 00
	00		 lea	 edi, DWORD PTR [esi+216]
  00039	8b cf		 mov	 ecx, edi
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefAcquireSpinLockAtDpcLevel@4

; 1192 : 
; 1193 :     if ((DeviceExtension->ReadyForNextReq) &&
; 1194 :         (!IsListEmpty(&DeviceExtension->PendingQueue))) {

  00041	38 9e e4 01 00
	00		 cmp	 BYTE PTR [esi+484], bl
  00047	74 18		 je	 SHORT $L13318
  00049	8d 86 f0 00 00
	00		 lea	 eax, DWORD PTR [esi+240]
  0004f	39 00		 cmp	 DWORD PTR [eax], eax
  00051	74 0e		 je	 SHORT $L13318

; 1195 : 
; 1196 :         //
; 1197 :         // start the device request, which
; 1198 :         // clears the ready flag and
; 1199 :         // releases the spinlock.  Then
; 1200 :         // reacquire the spinloc.
; 1201 :         //
; 1202 : 
; 1203 :         SCDequeueAndStartDeviceRequest(DeviceExtension);

  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 _SCDequeueAndStartDeviceRequest@4

; 1204 :         KeAcquireSpinLockAtDpcLevel(&DeviceExtension->SpinLock);

  00059	8b cf		 mov	 ecx, edi
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefAcquireSpinLockAtDpcLevel@4
$L13318:

; 1205 : 
; 1206 :     }
; 1207 :     //
; 1208 :     // Get the interrupt state snapshot. This copies the interrupt state to
; 1209 :     // saved state where it can be processed. It also clears the interrupt
; 1210 :     // flags.  We acquired the device spinlock to protect the structure as
; 1211 :     // the minidriver could have requested a DPC call from this routine,
; 1212 :     // which could be preempted in the middle of minidriver's changing the
; 1213 :     // below structure, and we'd then take a snapshot of the structure while
; 1214 :     // it was changing.
; 1215 :     //
; 1216 : 
; 1217 :     interruptContext.NeedyStream = NULL;
; 1218 : 
; 1219 :     SavedDeviceInterruptData.CompletedSRB = NULL;
; 1220 :     SavedStreamInterruptData.CompletedSRB = NULL;
; 1221 :     SavedDeviceInterruptData.Flags = 0;
; 1222 :     SavedStreamInterruptData.Flags = 0;
; 1223 : 
; 1224 :     if (!DeviceExtension->SynchronizeExecution(DeviceExtension->InterruptObject,
; 1225 :                                                SCGetInterruptState,
; 1226 :                                                &interruptContext)) {

  00061	8d 45 20	 lea	 eax, DWORD PTR _interruptContext$[ebp]
  00064	50		 push	 eax
  00065	68 00 00 00 00	 push	 OFFSET FLAT:_SCGetInterruptState@4
  0006a	89 5d 20	 mov	 DWORD PTR _interruptContext$[ebp], ebx
  0006d	89 5d fc	 mov	 DWORD PTR _SavedDeviceInterruptData$[ebp+16], ebx
  00070	89 5d c8	 mov	 DWORD PTR _SavedStreamInterruptData$[ebp+16], ebx
  00073	89 5d ec	 mov	 DWORD PTR _SavedDeviceInterruptData$[ebp], ebx
  00076	89 5d b8	 mov	 DWORD PTR _SavedStreamInterruptData$[ebp], ebx
  00079	ff b6 ac 00 00
	00		 push	 DWORD PTR [esi+172]
  0007f	ff 96 d4 00 00
	00		 call	 DWORD PTR [esi+212]
  00085	84 c0		 test	 al, al

; 1229 :         return;
; 1230 :     }
; 1231 :     KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  00087	8b cf		 mov	 ecx, edi
  00089	0f 84 38 02 00
	00		 je	 $L15189
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4

; 1232 : 
; 1233 :     NeedyStream = interruptContext.NeedyStream;

  00095	8b 7d 20	 mov	 edi, DWORD PTR _interruptContext$[ebp]

; 1234 : 
; 1235 :     if (NeedyStream) {

  00098	3b fb		 cmp	 edi, ebx
  0009a	0f 84 86 01 00
	00		 je	 $L15195

; 1236 : 
; 1237 :         //
; 1238 :         // try to start a request on this
; 1239 :         // stream
; 1240 :         //
; 1241 : 
; 1242 :         SCStartRequestOnStream(NeedyStream, DeviceExtension);

  000a0	56		 push	 esi
  000a1	57		 push	 edi
  000a2	e8 00 00 00 00	 call	 _SCStartRequestOnStream@8

; 1243 : 
; 1244 :         //
; 1245 :         // Process any completed stream requests.
; 1246 :         //
; 1247 : 
; 1248 :         while (SavedStreamInterruptData.CompletedSRB != NULL) {

  000a7	eb 0d		 jmp	 SHORT $L15202
$L13326:

; 1249 : 
; 1250 :             //
; 1251 :             // Remove the request from the
; 1252 :             // linked-list.
; 1253 :             //
; 1254 : 
; 1255 :             SRB = CONTAINING_RECORD(SavedStreamInterruptData.CompletedSRB,
; 1256 :                                     STREAM_REQUEST_BLOCK,
; 1257 :                                     HwSRB);
; 1258 : 
; 1259 :             SavedStreamInterruptData.CompletedSRB = SRB->HwSRB.NextSRB;

  000a9	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]

; 1260 : 
; 1261 :             DebugPrint((DebugLevelTrace, "'SCDpc: Completing stream Irp %x, S# = %x, SRB = %x, Func = %x, Callback = %x, SRB->IRP = %x\n",
; 1262 :                    SRB->HwSRB.Irp, NeedyStream->HwStreamObject.StreamNumber,
; 1263 :                    SRB, SRB->HwSRB.Command, SRB->Callback, SRB->HwSRB.Irp));
; 1264 : 
; 1265 :             SCCallBackSrb(SRB, DeviceExtension);

  000ac	56		 push	 esi
  000ad	50		 push	 eax
  000ae	89 4d c8	 mov	 DWORD PTR _SavedStreamInterruptData$[ebp+16], ecx
  000b1	e8 00 00 00 00	 call	 _SCCallBackSrb@8
$L15202:
  000b6	8b 45 c8	 mov	 eax, DWORD PTR _SavedStreamInterruptData$[ebp+16]
  000b9	3b c3		 cmp	 eax, ebx
  000bb	75 ec		 jne	 SHORT $L13326

; 1266 : 
; 1267 :         }
; 1268 : 
; 1269 :         //
; 1270 :         // Check for timer requests.
; 1271 :         //
; 1272 : 
; 1273 :         if (SavedStreamInterruptData.Flags & INTERRUPT_FLAGS_TIMER_CALL_REQUEST) {

  000bd	f6 45 b8 02	 test	 BYTE PTR _SavedStreamInterruptData$[ebp], 2
  000c1	74 0a		 je	 SHORT $L13332

; 1274 : 
; 1275 :             SCProcessTimerRequest(&NeedyStream->ComObj,
; 1276 :                                   &SavedStreamInterruptData);

  000c3	8d 45 b8	 lea	 eax, DWORD PTR _SavedStreamInterruptData$[ebp]
  000c6	50		 push	 eax
  000c7	57		 push	 edi
  000c8	e8 00 00 00 00	 call	 _SCProcessTimerRequest@8
$L13332:

; 1277 :         }
; 1278 :         //
; 1279 :         // check to see if a change priority call has been requested.
; 1280 :         //
; 1281 : 
; 1282 :         if (SavedStreamInterruptData.Flags &
; 1283 :             INTERRUPT_FLAGS_PRIORITY_CHANGE_REQUEST) {

  000cd	f6 45 b8 04	 test	 BYTE PTR _SavedStreamInterruptData$[ebp], 4
  000d1	74 0b		 je	 SHORT $L13333

; 1284 : 
; 1285 :             SCProcessPriorityChangeRequest(&NeedyStream->ComObj,
; 1286 :                                            &SavedStreamInterruptData,
; 1287 :                                            DeviceExtension);

  000d3	56		 push	 esi
  000d4	8d 45 b8	 lea	 eax, DWORD PTR _SavedStreamInterruptData$[ebp]
  000d7	50		 push	 eax
  000d8	57		 push	 edi
  000d9	e8 00 00 00 00	 call	 _SCProcessPriorityChangeRequest@12
$L13333:

; 1288 :         }
; 1289 :         //
; 1290 :         // Check for master clock queries.
; 1291 :         //
; 1292 : 
; 1293 :         if (SavedStreamInterruptData.Flags & INTERRUPT_FLAGS_CLOCK_QUERY_REQUEST) {

  000de	f6 45 b8 10	 test	 BYTE PTR _SavedStreamInterruptData$[ebp], 16 ; 00000010H
  000e2	0f 84 3e 01 00
	00		 je	 $L15195

; 1294 : 
; 1295 :             LARGE_INTEGER   ticks;
; 1296 :             ULONGLONG       rate;
; 1297 :             KIRQL           SavedIrql;
; 1298 : 
; 1299 :             //
; 1300 :             // call the master clock's entry point then call the minidriver's
; 1301 :             // callback procedure to report the time.
; 1302 :             //
; 1303 : 
; 1304 :             TimeContext.HwDeviceExtension = DeviceExtension->HwDeviceExtension;

  000e8	8b 86 c8 00 00
	00		 mov	 eax, DWORD PTR [esi+200]
  000ee	89 45 30	 mov	 DWORD PTR _TimeContext$[ebp], eax

; 1305 :             TimeContext.HwStreamObject = &NeedyStream->HwStreamObject;

  000f1	8d 87 a8 00 00
	00		 lea	 eax, DWORD PTR [edi+168]
  000f7	89 45 34	 mov	 DWORD PTR _TimeContext$[ebp+4], eax

; 1306 :             TimeContext.Function = SavedStreamInterruptData.HwQueryClockFunction;

  000fa	8b 45 e8	 mov	 eax, DWORD PTR _SavedStreamInterruptData$[ebp+48]

; 1307 : 
; 1308 :             //
; 1309 :             // take the lock so MasterCliockinfo won't disapear under us
; 1310 :             //
; 1311 :             KeAcquireSpinLock( &NeedyStream->LockUseMasterClock, &SavedIrql );

  000fd	8d 8f 3c 01 00
	00		 lea	 ecx, DWORD PTR [edi+316]
  00103	89 45 38	 mov	 DWORD PTR _TimeContext$[ebp+8], eax
  00106	89 4d 64	 mov	 DWORD PTR tv356[ebp], ecx
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4

; 1312 : 
; 1313 :             if ( NULL == NeedyStream->MasterClockInfo ) {

  0010f	39 9f 40 01 00
	00		 cmp	 DWORD PTR [edi+320], ebx
  00115	8a d0		 mov	 dl, al
  00117	88 55 7f	 mov	 BYTE PTR _SavedIrql$13337[ebp], dl
  0011a	75 0d		 jne	 SHORT $L13339

; 1314 :                 ASSERT( 0 && "Mini driver queries clock while we have no master clock");
; 1315 :                 //
; 1316 :                 // give a hint that something is wrong via Time, since we return void.
; 1317 :                 //
; 1318 :                 TimeContext.Time = (ULONGLONG)-1;

  0011c	83 4d 40 ff	 or	 DWORD PTR _TimeContext$[ebp+16], -1
  00120	83 4d 44 ff	 or	 DWORD PTR _TimeContext$[ebp+20], -1

; 1319 :                 goto callminidriver;

  00124	e9 b8 00 00 00	 jmp	 $callminidriver$13342
$L13339:

; 1320 :             }
; 1321 :                 
; 1322 : 
; 1323 :             switch (SavedStreamInterruptData.HwQueryClockFunction) {

  00129	8b 45 e8	 mov	 eax, DWORD PTR _SavedStreamInterruptData$[ebp+48]
  0012c	2b c3		 sub	 eax, ebx
  0012e	0f 84 99 00 00
	00		 je	 $L13347
  00134	48		 dec	 eax
  00135	74 0e		 je	 SHORT $L13348

; 1387 : 
; 1388 :                 }
; 1389 :                 break;
; 1390 : 
; 1391 : 
; 1392 :             default:
; 1393 :                 KeReleaseSpinLock( &NeedyStream->LockUseMasterClock, SavedIrql );                            

  00137	8b 4d 64	 mov	 ecx, DWORD PTR tv356[ebp]
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8
  00140	e9 e1 00 00 00	 jmp	 $L15195
$L13348:

; 1331 : 
; 1332 :                 goto callminidriver;
; 1333 : 
; 1334 :             case TIME_READ_ONBOARD_CLOCK:
; 1335 : 
; 1336 :                 TimeContext.Time = NeedyStream->MasterClockInfo->
; 1337 :                     FunctionTable.GetTime(
; 1338 :                              NeedyStream->MasterClockInfo->ClockFileObject);

  00145	8b 87 40 01 00
	00		 mov	 eax, DWORD PTR [edi+320]
  0014b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014d	ff 50 04	 call	 DWORD PTR [eax+4]
  00150	89 45 40	 mov	 DWORD PTR _TimeContext$[ebp+16], eax

; 1339 : 
; 1340 :                 //
; 1341 :                 // timestamp the value as close as possible
; 1342 :                 //
; 1343 : 
; 1344 :                 ticks = KeQueryPerformanceCounter((PLARGE_INTEGER) & rate);

  00153	8d 45 5c	 lea	 eax, DWORD PTR _rate$13336[ebp]
  00156	50		 push	 eax
  00157	89 55 44	 mov	 DWORD PTR _TimeContext$[ebp+20], edx
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeQueryPerformanceCounter@4

; 1345 : 
; 1346 :                 TimeContext.SystemTime = KSCONVERT_PERFORMANCE_TIME( rate, ticks );

  00160	ff 75 60	 push	 DWORD PTR _rate$13336[ebp+4]
  00163	89 45 b0	 mov	 DWORD PTR _ticks$13335[ebp], eax
  00166	ff 75 5c	 push	 DWORD PTR _rate$13336[ebp]
  00169	bf 80 96 98 00	 mov	 edi, 10000000		; 00989680H
  0016e	8b c2		 mov	 eax, edx
  00170	8b cf		 mov	 ecx, edi
  00172	f7 e1		 mul	 ecx
  00174	52		 push	 edx
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 __aulldvrm
  0017b	89 45 54	 mov	 DWORD PTR tv217[ebp], eax
  0017e	8b 45 b0	 mov	 eax, DWORD PTR _ticks$13335[ebp]
  00181	89 55 58	 mov	 DWORD PTR tv217[ebp+4], edx
  00184	f7 e7		 mul	 edi
  00186	6a 01		 push	 1
  00188	6a 00		 push	 0
  0018a	8b f8		 mov	 edi, eax
  0018c	53		 push	 ebx
  0018d	8b c2		 mov	 eax, edx
  0018f	51		 push	 ecx
  00190	89 45 50	 mov	 DWORD PTR tv355[ebp], eax
  00193	e8 00 00 00 00	 call	 __allmul
  00198	ff 75 60	 push	 DWORD PTR _rate$13336[ebp+4]
  0019b	03 f8		 add	 edi, eax
  0019d	ff 75 5c	 push	 DWORD PTR _rate$13336[ebp]
  001a0	8b 45 50	 mov	 eax, DWORD PTR tv355[ebp]
  001a3	13 c2		 adc	 eax, edx
  001a5	50		 push	 eax
  001a6	57		 push	 edi
  001a7	e8 00 00 00 00	 call	 __aulldiv
  001ac	6a 01		 push	 1
  001ae	6a 00		 push	 0
  001b0	ff 75 58	 push	 DWORD PTR tv217[ebp+4]
  001b3	8b f8		 mov	 edi, eax
  001b5	ff 75 54	 push	 DWORD PTR tv217[ebp]
  001b8	8b da		 mov	 ebx, edx
  001ba	e8 00 00 00 00	 call	 __allmul
  001bf	03 f8		 add	 edi, eax
  001c1	13 da		 adc	 ebx, edx
  001c3	89 5d 4c	 mov	 DWORD PTR _TimeContext$[ebp+28], ebx
  001c6	89 7d 48	 mov	 DWORD PTR _TimeContext$[ebp+24], edi
  001c9	33 db		 xor	 ebx, ebx
  001cb	eb 14		 jmp	 SHORT $callminidriver$13342
$L13347:

; 1324 : 
; 1325 :             case TIME_GET_STREAM_TIME:
; 1326 : 
; 1327 :                 TimeContext.Time = NeedyStream->MasterClockInfo->
; 1328 :                     FunctionTable.GetCorrelatedTime(
; 1329 :                               NeedyStream->MasterClockInfo->ClockFileObject,
; 1330 :                                                     &TimeContext.SystemTime);

  001cd	8b bf 40 01 00
	00		 mov	 edi, DWORD PTR [edi+320]
  001d3	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001d5	8d 55 48	 lea	 edx, DWORD PTR _TimeContext$[ebp+24]
  001d8	ff 57 0c	 call	 DWORD PTR [edi+12]
  001db	89 45 40	 mov	 DWORD PTR _TimeContext$[ebp+16], eax
  001de	89 55 44	 mov	 DWORD PTR _TimeContext$[ebp+20], edx
$callminidriver$13342:

; 1347 :                     
; 1348 : 
; 1349 :         callminidriver:
; 1350 : 
; 1351 :                 //
; 1352 :                 // finish using MasterClockInfo.
; 1353 :                 //
; 1354 :                 
; 1355 :                 KeReleaseSpinLock( &NeedyStream->LockUseMasterClock, SavedIrql );                            

  001e1	8a 55 7f	 mov	 dl, BYTE PTR _SavedIrql$13337[ebp]
  001e4	8b 4d 64	 mov	 ecx, DWORD PTR tv356[ebp]
  001e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8

; 1356 : 
; 1357 :                 //
; 1358 :                 // call the minidriver's callback procedure
; 1359 :                 //
; 1360 : 
; 1361 : 
; 1362 :                 if (!DeviceExtension->NoSync) {

  001ed	8d be 58 01 00
	00		 lea	 edi, DWORD PTR [esi+344]
  001f3	38 1f		 cmp	 BYTE PTR [edi], bl
  001f5	75 0c		 jne	 SHORT $L13355

; 1363 : 
; 1364 :                     //
; 1365 :                     // Acquire the device spinlock.
; 1366 :                     //
; 1367 : 
; 1368 :                     KeAcquireSpinLockAtDpcLevel(&DeviceExtension->SpinLock);

  001f7	8d 8e d8 00 00
	00		 lea	 ecx, DWORD PTR [esi+216]
  001fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefAcquireSpinLockAtDpcLevel@4
$L13355:

; 1369 : 
; 1370 :                 }
; 1371 :                 DebugPrint((DebugLevelTrace, "'SCDPC: calling time func, S# = %x, Command = %x\n",
; 1372 :                             NeedyStream->HwStreamObject.StreamNumber, TimeContext.Function));
; 1373 : 
; 1374 :                 DeviceExtension->SynchronizeExecution(
; 1375 :                                            DeviceExtension->InterruptObject,
; 1376 :                                                       (PKSYNCHRONIZE_ROUTINE) SavedStreamInterruptData.HwQueryClockRoutine,
; 1377 :                                                       &TimeContext
; 1378 :                     );

  00203	8d 45 30	 lea	 eax, DWORD PTR _TimeContext$[ebp]
  00206	50		 push	 eax
  00207	ff 75 e4	 push	 DWORD PTR _SavedStreamInterruptData$[ebp+44]
  0020a	ff b6 ac 00 00
	00		 push	 DWORD PTR [esi+172]
  00210	ff 96 d4 00 00
	00		 call	 DWORD PTR [esi+212]

; 1379 : 
; 1380 :                 if (!DeviceExtension->NoSync) {

  00216	38 1f		 cmp	 BYTE PTR [edi], bl
  00218	75 0c		 jne	 SHORT $L15195

; 1381 : 
; 1382 :                     //
; 1383 :                     // Release the spinlock.
; 1384 :                     //
; 1385 : 
; 1386 :                     KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  0021a	8d 8e d8 00 00
	00		 lea	 ecx, DWORD PTR [esi+216]
  00220	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4
$L15195:

; 1394 :                 ASSERT(0);
; 1395 :             }                   // switch clock func
; 1396 :         }                       // if queryclock
; 1397 :     }                           // if needystream
; 1398 :     //
; 1399 :     // Check for an error log request.
; 1400 :     //
; 1401 : 
; 1402 :     if (SavedDeviceInterruptData.Flags & INTERRUPT_FLAGS_LOG_ERROR) {

  00226	f6 45 ec 08	 test	 BYTE PTR _SavedDeviceInterruptData$[ebp], 8
  0022a	74 20		 je	 SHORT $L15188

; 1403 : 
; 1404 :         //
; 1405 :         // Process the error log request.
; 1406 :         //
; 1407 : 
; 1408 :         LogEntry = &SavedDeviceInterruptData.LogEntry;
; 1409 : 
; 1410 :         SCLogError(DeviceObject,
; 1411 :                    LogEntry->SequenceNumber,
; 1412 :                    LogEntry->ErrorCode,
; 1413 :                    LogEntry->UniqueId
; 1414 :             );

  0022c	ff 75 f8	 push	 DWORD PTR _SavedDeviceInterruptData$[ebp+12]
  0022f	ff 75 f0	 push	 DWORD PTR _SavedDeviceInterruptData$[ebp+4]
  00232	ff 75 f4	 push	 DWORD PTR _SavedDeviceInterruptData$[ebp+8]
  00235	ff 75 74	 push	 DWORD PTR _DeviceObject$[ebp]
  00238	e8 00 00 00 00	 call	 _SCLogError@16

; 1415 : 
; 1416 :     }                           // if log error
; 1417 :     //
; 1418 :     // Process any completed device requests.
; 1419 :     //
; 1420 : 
; 1421 :     while (SavedDeviceInterruptData.CompletedSRB != NULL) {

  0023d	eb 0d		 jmp	 SHORT $L15188
$L13363:

; 1422 : 
; 1423 :         //
; 1424 :         // Remove the request from the linked-list.
; 1425 :         //
; 1426 : 
; 1427 :         SRB = CONTAINING_RECORD(SavedDeviceInterruptData.CompletedSRB,
; 1428 :                                 STREAM_REQUEST_BLOCK,
; 1429 :                                 HwSRB);
; 1430 : 
; 1431 :         SavedDeviceInterruptData.CompletedSRB = SRB->HwSRB.NextSRB;

  0023f	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]

; 1432 : 
; 1433 :         DebugPrint((DebugLevelTrace, "'SCDpc: Completing device Irp %x\n", SRB->HwSRB.Irp));
; 1434 : 
; 1435 :         SCCallBackSrb(SRB, DeviceExtension);

  00242	56		 push	 esi
  00243	50		 push	 eax
  00244	89 4d fc	 mov	 DWORD PTR _SavedDeviceInterruptData$[ebp+16], ecx
  00247	e8 00 00 00 00	 call	 _SCCallBackSrb@8
$L15188:
  0024c	8b 45 fc	 mov	 eax, DWORD PTR _SavedDeviceInterruptData$[ebp+16]
  0024f	3b c3		 cmp	 eax, ebx
  00251	75 ec		 jne	 SHORT $L13363

; 1436 :     }
; 1437 : 
; 1438 :     //
; 1439 :     // Check for device timer requests.
; 1440 :     //
; 1441 : 
; 1442 :     if (SavedDeviceInterruptData.Flags & INTERRUPT_FLAGS_TIMER_CALL_REQUEST) {

  00253	f6 45 ec 02	 test	 BYTE PTR _SavedDeviceInterruptData$[ebp], 2
  00257	74 0a		 je	 SHORT $L13369

; 1443 : 
; 1444 :         SCProcessTimerRequest(&DeviceExtension->ComObj,
; 1445 :                               &SavedDeviceInterruptData);

  00259	8d 45 ec	 lea	 eax, DWORD PTR _SavedDeviceInterruptData$[ebp]
  0025c	50		 push	 eax
  0025d	56		 push	 esi
  0025e	e8 00 00 00 00	 call	 _SCProcessTimerRequest@8
$L13369:

; 1446 :     }
; 1447 :     //
; 1448 :     // check if we have any dead events that need discarding.  if so, we'll
; 1449 :     // schedule a work item to get rid of them.
; 1450 :     //
; 1451 : 
; 1452 :     if ((!IsListEmpty(&DeviceExtension->DeadEventList)) &&
; 1453 :         (!(DeviceExtension->DeadEventItemQueued))) {

  00263	8d 86 9c 01 00
	00		 lea	 eax, DWORD PTR [esi+412]
  00269	39 00		 cmp	 DWORD PTR [eax], eax
  0026b	74 1c		 je	 SHORT $L15197
  0026d	8d 86 e5 01 00
	00		 lea	 eax, DWORD PTR [esi+485]
  00273	38 18		 cmp	 BYTE PTR [eax], bl
  00275	75 12		 jne	 SHORT $L15197

; 1454 : 
; 1455 :         DeviceExtension->DeadEventItemQueued = TRUE;

  00277	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1456 : 
; 1457 :         ExQueueWorkItem(&DeviceExtension->EventWorkItem,
; 1458 :                         DelayedWorkQueue);

  0027a	6a 01		 push	 1
  0027c	8d 86 a4 01 00
	00		 lea	 eax, DWORD PTR [esi+420]
  00282	50		 push	 eax
  00283	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExQueueWorkItem@8
$L15197:

; 1459 :     }
; 1460 :     //
; 1461 :     // check to see if a change priority call
; 1462 :     // has been requested for the device.
; 1463 :     //
; 1464 : 
; 1465 :     if (SavedDeviceInterruptData.Flags &
; 1466 :         INTERRUPT_FLAGS_PRIORITY_CHANGE_REQUEST) {

  00289	f6 45 ec 04	 test	 BYTE PTR _SavedDeviceInterruptData$[ebp], 4
  0028d	74 0b		 je	 SHORT $L13371

; 1467 : 
; 1468 :         SCProcessPriorityChangeRequest(&DeviceExtension->ComObj,
; 1469 :                                        &SavedDeviceInterruptData,
; 1470 :                                        DeviceExtension);

  0028f	56		 push	 esi
  00290	8d 45 ec	 lea	 eax, DWORD PTR _SavedDeviceInterruptData$[ebp]
  00293	50		 push	 eax
  00294	56		 push	 esi
  00295	e8 00 00 00 00	 call	 _SCProcessPriorityChangeRequest@12
$L13371:

; 1471 : 
; 1472 :     }                           // if change priority
; 1473 :     //
; 1474 :     // Check for stream rescan request.
; 1475 :     //
; 1476 : 
; 1477 :     if (SavedDeviceInterruptData.Flags & INTERRUPT_FLAGS_NEED_STREAM_RESCAN) {

  0029a	f6 45 ec 20	 test	 BYTE PTR _SavedDeviceInterruptData$[ebp], 32 ; 00000020H
  0029e	74 0f		 je	 SHORT $L13372

; 1478 : 
; 1479 :         TRAP;
; 1480 :         ExQueueWorkItem(&DeviceExtension->RescanWorkItem,
; 1481 :                         DelayedWorkQueue);

  002a0	6a 01		 push	 1
  002a2	8d 86 b4 01 00
	00		 lea	 eax, DWORD PTR [esi+436]
  002a8	50		 push	 eax
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExQueueWorkItem@8
$L13372:

; 1482 :     }
; 1483 :     //
; 1484 :     // Check for minidriver work requests. Note this is an unsynchronized
; 1485 :     // test on bits that can be set by the interrupt routine; however,
; 1486 :     // the worst that can happen is that the completion DPC checks for work
; 1487 :     // twice.
; 1488 :     //
; 1489 : 
; 1490 :     if ((DeviceExtension->NeedyStream)
; 1491 :         || (DeviceExtension->ComObj.InterruptData.Flags &
; 1492 :             INTERRUPT_FLAGS_NOTIFICATION_REQUIRED)) {

  002af	39 9e 30 01 00
	00		 cmp	 DWORD PTR [esi+304], ebx
  002b5	0f 85 78 fd ff
	ff		 jne	 $RestartDpc$13317
  002bb	f6 46 08 01	 test	 BYTE PTR [esi+8], 1
  002bf	0f 85 6e fd ff
	ff		 jne	 $RestartDpc$13317

; 1493 : 
; 1494 :         //
; 1495 :         // Start over from the top.
; 1496 :         //
; 1497 : 
; 1498 :         DebugPrint((DebugLevelVerbose, "'StreamClassDpc: restarting\n"));
; 1499 :         goto RestartDpc;

  002c5	eb 06		 jmp	 SHORT $L13373
$L15189:

; 1227 : 
; 1228 :         KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  002c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4
$L13373:
  002cd	5f		 pop	 edi
  002ce	5e		 pop	 esi
  002cf	5b		 pop	 ebx

; 1500 :     }
; 1501 :     return;
; 1502 : 
; 1503 : }                               // end StreamClassDpc()

  002d0	83 c5 68	 add	 ebp, 104		; 00000068H
  002d3	c9		 leave
  002d4	c2 10 00	 ret	 16			; 00000010H
_StreamClassDpc@16 ENDP
_TEXT	ENDS
PUBLIC	_SCMinidriverStreamTimerDpc@16
; Function compile flags: /Ogsy
;	COMDAT _SCMinidriverStreamTimerDpc@16
_TEXT	SEGMENT
_Dpc$ = 8						; size = 4
_Context$ = 12						; size = 4
_SystemArgument1$ = 16					; size = 4
_SystemArgument2$ = 20					; size = 4
_SCMinidriverStreamTimerDpc@16 PROC NEAR		; COMDAT

; 1987 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1988 :     PSTREAM_OBJECT  StreamObject = ((PSTREAM_OBJECT) Context);
; 1989 :     PDEVICE_EXTENSION DeviceExtension = StreamObject->DeviceExtension;

  00002	8b 7c 24 10	 mov	 edi, DWORD PTR _Context$[esp+4]
  00006	8b b7 14 01 00
	00		 mov	 esi, DWORD PTR [edi+276]

; 1990 : 
; 1991 :     //
; 1992 :     // Acquire the device spinlock if synchronized.
; 1993 :     //
; 1994 : 
; 1995 :     if (!(DeviceExtension->NoSync)) {

  0000c	80 be 58 01 00
	00 00		 cmp	 BYTE PTR [esi+344], 0
  00013	75 0c		 jne	 SHORT $L13471

; 1996 : 
; 1997 :         KeAcquireSpinLockAtDpcLevel(&DeviceExtension->SpinLock);

  00015	8d 8e d8 00 00
	00		 lea	 ecx, DWORD PTR [esi+216]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefAcquireSpinLockAtDpcLevel@4
$L13471:

; 1998 :     }
; 1999 :     //
; 2000 :     // Make sure the timer routine is still
; 2001 :     // desired.
; 2002 :     //
; 2003 : 
; 2004 :     if (StreamObject->ComObj.HwTimerRoutine != NULL) {

  00021	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  00024	85 c0		 test	 eax, eax
  00026	74 10		 je	 SHORT $L13473

; 2005 : 
; 2006 :         DebugPrint((DebugLevelTrace, "'SCTimerDpc: Calling MD timer callback, S# = %x, Routine = %p\n",
; 2007 :                     StreamObject->HwStreamObject.StreamNumber, StreamObject->ComObj.HwTimerRoutine));
; 2008 : 
; 2009 :         DeviceExtension->SynchronizeExecution(
; 2010 :                                            DeviceExtension->InterruptObject,
; 2011 :                 (PKSYNCHRONIZE_ROUTINE) StreamObject->ComObj.HwTimerRoutine,
; 2012 :                                          StreamObject->ComObj.HwTimerContext
; 2013 :             );

  00028	ff 77 40	 push	 DWORD PTR [edi+64]
  0002b	50		 push	 eax
  0002c	ff b6 ac 00 00
	00		 push	 DWORD PTR [esi+172]
  00032	ff 96 d4 00 00
	00		 call	 DWORD PTR [esi+212]
$L13473:

; 2014 : 
; 2015 :     }
; 2016 :     //
; 2017 :     // Release the spinlock if we're synchronized.
; 2018 :     //
; 2019 : 
; 2020 :     if (!(DeviceExtension->NoSync)) {

  00038	80 be 58 01 00
	00 00		 cmp	 BYTE PTR [esi+344], 0
  0003f	75 0c		 jne	 SHORT $L13475

; 2021 : 
; 2022 :         KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  00041	8d 8e d8 00 00
	00		 lea	 ecx, DWORD PTR [esi+216]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4
$L13475:

; 2023 :     }
; 2024 :     //
; 2025 :     // Call the DPC directly to check for work.
; 2026 :     //
; 2027 : 
; 2028 :     StreamClassDpc(NULL,
; 2029 :                    DeviceExtension->DeviceObject,
; 2030 :                    NULL,
; 2031 :                    StreamObject);

  0004d	57		 push	 edi
  0004e	6a 00		 push	 0
  00050	ff b6 a0 00 00
	00		 push	 DWORD PTR [esi+160]
  00056	6a 00		 push	 0
  00058	e8 00 00 00 00	 call	 _StreamClassDpc@16
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi

; 2032 : 
; 2033 : }

  0005f	c2 10 00	 ret	 16			; 00000010H
_SCMinidriverStreamTimerDpc@16 ENDP
_TEXT	ENDS
PUBLIC	_SCMinidriverDeviceTimerDpc@16
; Function compile flags: /Ogsy
;	COMDAT _SCMinidriverDeviceTimerDpc@16
_TEXT	SEGMENT
_Dpc$ = 8						; size = 4
_Context$ = 12						; size = 4
_SystemArgument1$ = 16					; size = 4
_SystemArgument2$ = 20					; size = 4
_SCMinidriverDeviceTimerDpc@16 PROC NEAR		; COMDAT

; 2067 : {

  00000	56		 push	 esi

; 2068 :     PDEVICE_EXTENSION DeviceExtension = Context;
; 2069 : 
; 2070 :     //
; 2071 :     // Acquire the device spinlock.
; 2072 :     //
; 2073 : 
; 2074 :     KeAcquireSpinLockAtDpcLevel(&DeviceExtension->SpinLock);

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _Context$[esp]
  00005	57		 push	 edi
  00006	8d be d8 00 00
	00		 lea	 edi, DWORD PTR [esi+216]
  0000c	8b cf		 mov	 ecx, edi
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefAcquireSpinLockAtDpcLevel@4

; 2075 : 
; 2076 :     //
; 2077 :     // Make sure the timer routine is still
; 2078 :     // desired.
; 2079 :     //
; 2080 : 
; 2081 :     if (DeviceExtension->ComObj.HwTimerRoutine != NULL) {

  00014	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00017	85 c0		 test	 eax, eax
  00019	74 10		 je	 SHORT $L13489

; 2082 : 
; 2083 :         DeviceExtension->SynchronizeExecution(
; 2084 :                                            DeviceExtension->InterruptObject,
; 2085 :              (PKSYNCHRONIZE_ROUTINE) DeviceExtension->ComObj.HwTimerRoutine,
; 2086 :                                       DeviceExtension->ComObj.HwTimerContext
; 2087 :             );

  0001b	ff 76 40	 push	 DWORD PTR [esi+64]
  0001e	50		 push	 eax
  0001f	ff b6 ac 00 00
	00		 push	 DWORD PTR [esi+172]
  00025	ff 96 d4 00 00
	00		 call	 DWORD PTR [esi+212]
$L13489:

; 2088 : 
; 2089 :     }
; 2090 :     //
; 2091 :     // Release the spinlock.
; 2092 :     //
; 2093 : 
; 2094 :     KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  0002b	8b cf		 mov	 ecx, edi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4

; 2095 : 
; 2096 :     //
; 2097 :     // Call the DPC directly to check for
; 2098 :     // work.
; 2099 :     //
; 2100 : 
; 2101 :     StreamClassDpc(NULL,
; 2102 :                    DeviceExtension->DeviceObject,
; 2103 :                    NULL,
; 2104 :                    NULL);

  00033	6a 00		 push	 0
  00035	6a 00		 push	 0
  00037	ff b6 a0 00 00
	00		 push	 DWORD PTR [esi+160]
  0003d	6a 00		 push	 0
  0003f	e8 00 00 00 00	 call	 _StreamClassDpc@16
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 2105 : 
; 2106 : }

  00046	c2 10 00	 ret	 16			; 00000010H
_SCMinidriverDeviceTimerDpc@16 ENDP
_TEXT	ENDS
PUBLIC	_SCIssueRequestToDevice@24
EXTRN	__imp_@KfLowerIrql@4:NEAR
EXTRN	__imp_@KfRaiseIrql@4:NEAR
EXTRN	_StreamClassCancelPendingIrp@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCIssueRequestToDevice@24
_TEXT	SEGMENT
tv192 = -4						; size = 4
_DeviceExtension$ = 8					; size = 4
_irql$ = 11						; size = 1
_StreamObject$ = 12					; size = 4
_Request$ = 16						; size = 4
_MinidriverRoutine$ = 20				; size = 4
_Queue$ = 24						; size = 4
tv210 = 28						; size = 4
_Irp$ = 28						; size = 4
_oldIrql$13773 = 31					; size = 1
_SCIssueRequestToDevice@24 PROC NEAR			; COMDAT

; 3216 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 3217 :     KIRQL           irql;
; 3218 :         
; 3219 :     KeAcquireSpinLock(&DeviceExtension->SpinLock, &irql);

  00007	8b 7d 08	 mov	 edi, DWORD PTR _DeviceExtension$[ebp]
  0000a	8d 8f d8 00 00
	00		 lea	 ecx, DWORD PTR [edi+216]
  00010	89 4d fc	 mov	 DWORD PTR tv192[ebp], ecx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfAcquireSpinLock@4

; 3220 : 
; 3221 :     if (DeviceExtension->NoSync) {

  00019	33 db		 xor	 ebx, ebx
  0001b	38 9f 58 01 00
	00		 cmp	 BYTE PTR [edi+344], bl
  00021	88 45 0b	 mov	 BYTE PTR _irql$[ebp], al
  00024	0f 84 98 00 00
	00		 je	 $L13762

; 3222 : 
; 3223 :         //
; 3224 :         // place the request on the
; 3225 :         // outstanding queue and call it down
; 3226 :         // immediately
; 3227 :         //
; 3228 : 
; 3229 :         ASSERT((DeviceExtension->BeginMinidriverCallin == SCBeginSynchronizedMinidriverCallin) ||
; 3230 :                (DeviceExtension->BeginMinidriverCallin == SCBeginUnsynchronizedMinidriverCallin));
; 3231 : 
; 3232 :         Request->Flags |= SRB_FLAGS_IS_ACTIVE;

  0002a	8b 75 10	 mov	 esi, DWORD PTR _Request$[ebp]
  0002d	83 4e 4c 01	 or	 DWORD PTR [esi+76], 1

; 3233 :         
; 3234 :         InsertHeadList(
; 3235 :                        &DeviceExtension->OutstandingQueue,
; 3236 :                        &Request->SRBListEntry);

  00031	8d 8f f8 00 00
	00		 lea	 ecx, DWORD PTR [edi+248]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	8d 46 70	 lea	 eax, DWORD PTR [esi+112]
  0003c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0003f	89 10		 mov	 DWORD PTR [eax], edx
  00041	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00044	89 01		 mov	 DWORD PTR [ecx], eax

; 3237 : 
; 3238 :         IoSetCancelRoutine(Irp, StreamClassCancelOutstandingIrp);

  00046	8b 4d 1c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00049	83 c1 38	 add	 ecx, 56			; 00000038H
  0004c	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:_StreamClassCancelOutstandingIrp@8
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedExchange@8

; 3239 : 
; 3240 :         KeReleaseSpinLock(&DeviceExtension->SpinLock, irql);

  00057	8a 55 0b	 mov	 dl, BYTE PTR _irql$[ebp]
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR tv192[ebp]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8

; 3241 : 
; 3242 :         if ((StreamObject) && (StreamObject->HwStreamObject.Dma) &&
; 3243 :             (Request->HwSRB.Flags & SRB_HW_FLAGS_DATA_TRANSFER)) {

  00063	8b 45 0c	 mov	 eax, DWORD PTR _StreamObject$[ebp]
  00066	3b c3		 cmp	 eax, ebx
  00068	74 4f		 je	 SHORT $L13772
  0006a	38 98 cc 00 00
	00		 cmp	 BYTE PTR [eax+204], bl
  00070	74 47		 je	 SHORT $L13772
  00072	f6 46 30 01	 test	 BYTE PTR [esi+48], 1
  00076	74 41		 je	 SHORT $L13772

; 3244 : 
; 3245 :             //
; 3246 :             // allocate the adapter channel. call cannot fail as the only
; 3247 :             // time it would is when there aren't enough map registers, and
; 3248 :             // we've already checked for that condition.  Block waiting til
; 3249 :             // it's allocated.
; 3250 :             //
; 3251 :             KIRQL oldIrql;
; 3252 : 
; 3253 :             KeInitializeEvent(&Request->DmaEvent, SynchronizationEvent, FALSE);

  00078	53		 push	 ebx
  00079	8d 86 90 00 00
	00		 lea	 eax, DWORD PTR [esi+144]
  0007f	6a 01		 push	 1
  00081	50		 push	 eax
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeEvent@12

; 3254 : 
; 3255 :             ASSERT( PASSIVE_LEVEL == KeGetCurrentIrql());
; 3256 : 
; 3257 :             KeRaiseIrql( DISPATCH_LEVEL, &oldIrql );

  00088	b1 02		 mov	 cl, 2
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfRaiseIrql@4

; 3258 :             SCSetUpForDMA(DeviceExtension->DeviceObject,
; 3259 :                           Request);

  00090	56		 push	 esi
  00091	ff b7 a0 00 00
	00		 push	 DWORD PTR [edi+160]
  00097	88 45 1f	 mov	 BYTE PTR _oldIrql$13773[ebp], al
  0009a	e8 00 00 00 00	 call	 _SCSetUpForDMA@8

; 3260 :             KeLowerIrql( oldIrql );

  0009f	8a 4d 1f	 mov	 cl, BYTE PTR _oldIrql$13773[ebp]
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4

; 3261 : 
; 3262 :             KeWaitForSingleObject(&Request->DmaEvent, Executive, KernelMode, FALSE, NULL);

  000a8	53		 push	 ebx
  000a9	53		 push	 ebx
  000aa	53		 push	 ebx
  000ab	53		 push	 ebx
  000ac	8d 86 90 00 00
	00		 lea	 eax, DWORD PTR [esi+144]
  000b2	50		 push	 eax
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20
$L13772:

; 3263 : 
; 3264 : 
; 3265 :         }
; 3266 :         // this could open a race window. It should be protected in spinlock.
; 3267 :         //Request->Flags |= SRB_FLAGS_IS_ACTIVE;
; 3268 : 
; 3269 :         ((PHW_RECEIVE_STREAM_CONTROL_SRB) (MinidriverRoutine))
; 3270 :             (&Request->HwSRB);

  000b9	56		 push	 esi
  000ba	ff 55 14	 call	 DWORD PTR _MinidriverRoutine$[ebp]

; 3271 : 
; 3272 :     } else {

  000bd	e9 98 00 00 00	 jmp	 $L13777
$L13762:

; 3273 : 
; 3274 :         //
; 3275 :         // insert the item on the queue
; 3276 :         //
; 3277 : 
; 3278 :         InsertHeadList(
; 3279 :                        Queue,
; 3280 :                        &Irp->Tail.Overlay.ListEntry);

  000c2	8b 4d 18	 mov	 ecx, DWORD PTR _Queue$[ebp]
  000c5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c7	8b 75 1c	 mov	 esi, DWORD PTR _Irp$[ebp]
  000ca	8d 46 58	 lea	 eax, DWORD PTR [esi+88]
  000cd	89 10		 mov	 DWORD PTR [eax], edx
  000cf	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000d2	89 42 04	 mov	 DWORD PTR [edx+4], eax
  000d5	89 01		 mov	 DWORD PTR [ecx], eax

; 3281 : 
; 3282 :         //
; 3283 :         // set the cancel routine to pending
; 3284 :         //
; 3285 : 
; 3286 :         IoSetCancelRoutine(Irp, StreamClassCancelPendingIrp);

  000d7	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  000da	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:_StreamClassCancelPendingIrp@8
  000df	89 4d 1c	 mov	 DWORD PTR tv210[ebp], ecx
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedExchange@8

; 3287 : 
; 3288 :         //
; 3289 :         // check to see if the IRP is already cancelled.
; 3290 :         //
; 3291 : 
; 3292 :         if (Irp->Cancel) {

  000e8	38 5e 24	 cmp	 BYTE PTR [esi+36], bl
  000eb	74 4b		 je	 SHORT $L13786

; 3293 : 
; 3294 :             //
; 3295 :             // the IRP is cancelled.   Make sure that the cancel routine
; 3296 :             // will be called.
; 3297 :             //
; 3298 : 
; 3299 :             if (IoSetCancelRoutine(Irp, NULL)) {

  000ed	8b 4d 1c	 mov	 ecx, DWORD PTR tv210[ebp]
  000f0	33 d2		 xor	 edx, edx
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedExchange@8
  000f8	85 c0		 test	 eax, eax

; 3300 : 
; 3301 :                 //
; 3302 :                 // wow, the cancel routine will not be invoked.
; 3303 :                 // dequeue the request ourselves and complete
; 3304 :                 // with cancelled status.
; 3305 : 
; 3306 :                 RemoveEntryList(&Request->SRBListEntry);
; 3307 :                 KeReleaseSpinLock(&DeviceExtension->SpinLock, irql);

  000fa	8a 55 0b	 mov	 dl, BYTE PTR _irql$[ebp]
  000fd	74 2e		 je	 SHORT $L13796
  000ff	8b 75 10	 mov	 esi, DWORD PTR _Request$[ebp]
  00102	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00105	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00108	89 01		 mov	 DWORD PTR [ecx], eax
  0010a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0010d	8b 4d fc	 mov	 ecx, DWORD PTR tv192[ebp]
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8

; 3308 : 
; 3309 :                 //
; 3310 :                 // free the SRB and MDL
; 3311 :                 //
; 3312 : 
; 3313 :                 IoFreeMdl(Request->Mdl);

  00116	ff 76 58	 push	 DWORD PTR [esi+88]
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoFreeMdl@4

; 3314 : 
; 3315 :                 ExFreePool(Request);

  0011f	56		 push	 esi
  00120	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4

; 3316 :                 return (STATUS_CANCELLED);

  00126	b8 20 01 00 c0	 mov	 eax, -1073741536	; c0000120H
  0012b	eb 32		 jmp	 SHORT $L13760
$L13796:

; 3317 : 
; 3318 :             } else {            // if we must cancel
; 3319 : 
; 3320 :                 KeReleaseSpinLock(&DeviceExtension->SpinLock, irql);

  0012d	8b 4d fc	 mov	 ecx, DWORD PTR tv192[ebp]
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfReleaseSpinLock@8

; 3321 :             }                   // if we must cancel
; 3322 : 
; 3323 :             return (STATUS_PENDING);

  00136	eb 22		 jmp	 SHORT $L13777
$L13786:

; 3324 :         }                       // if cancelled
; 3325 :         KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  00138	8b 4d fc	 mov	 ecx, DWORD PTR tv192[ebp]
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4

; 3326 : 
; 3327 :         //
; 3328 :         // call the DPC routine directly. GUBGUB questionable performance improvement chance
; 3329 :         // BGP - is this really
; 3330 :         // faster than scheduling it?
; 3331 :         //
; 3332 : 
; 3333 :         StreamClassDpc(NULL, DeviceExtension->DeviceObject, Irp, StreamObject);

  00141	ff 75 0c	 push	 DWORD PTR _StreamObject$[ebp]
  00144	56		 push	 esi
  00145	ff b7 a0 00 00
	00		 push	 DWORD PTR [edi+160]
  0014b	53		 push	 ebx
  0014c	e8 00 00 00 00	 call	 _StreamClassDpc@16

; 3334 : 
; 3335 :         KeLowerIrql(irql);

  00151	8a 4d 0b	 mov	 cl, BYTE PTR _irql$[ebp]
  00154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4
$L13777:

; 3336 :     }
; 3337 :     return (STATUS_PENDING);

  0015a	b8 03 01 00 00	 mov	 eax, 259		; 00000103H
$L13760:
  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	5b		 pop	 ebx

; 3338 : }

  00162	c9		 leave
  00163	c2 18 00	 ret	 24			; 00000018H
_SCIssueRequestToDevice@24 ENDP
_TEXT	ENDS
PUBLIC	_SCEndUnsynchronizedMinidriverDeviceCallin@8
; Function compile flags: /Ogsy
;	COMDAT _SCEndUnsynchronizedMinidriverDeviceCallin@8
_TEXT	SEGMENT
_DeviceExtension$ = 8					; size = 4
_Irql$ = 12						; size = 4
_SCEndUnsynchronizedMinidriverDeviceCallin@8 PROC NEAR	; COMDAT

; 5126 : {

  00000	56		 push	 esi

; 5127 :     KeReleaseSpinLockFromDpcLevel(&DeviceExtension->SpinLock);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _DeviceExtension$[esp]
  00005	8d 8e d8 00 00
	00		 lea	 ecx, DWORD PTR [esi+216]
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4

; 5128 :     DeviceExtension->ComObj.InterruptData.Flags |= INTERRUPT_FLAGS_NOTIFICATION_REQUIRED;

  00011	83 4e 08 01	 or	 DWORD PTR [esi+8], 1

; 5129 :     StreamClassDpc(NULL,
; 5130 :                    DeviceExtension->DeviceObject,
; 5131 :                    NULL,
; 5132 :                    NULL);

  00015	33 c0		 xor	 eax, eax
  00017	50		 push	 eax
  00018	50		 push	 eax
  00019	ff b6 a0 00 00
	00		 push	 DWORD PTR [esi+160]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _StreamClassDpc@16

; 5133 :     KeLowerIrql(*Irql);

  00025	8b 44 24 0c	 mov	 eax, DWORD PTR _Irql$[esp]
  00029	8a 08		 mov	 cl, BYTE PTR [eax]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4
  00031	5e		 pop	 esi

; 5134 :     return;
; 5135 : }

  00032	c2 08 00	 ret	 8
_SCEndUnsynchronizedMinidriverDeviceCallin@8 ENDP
_TEXT	ENDS
PUBLIC	_SCEndUnsynchronizedMinidriverStreamCallin@8
; Function compile flags: /Ogsy
;	COMDAT _SCEndUnsynchronizedMinidriverStreamCallin@8
_TEXT	SEGMENT
_StreamObject$ = 8					; size = 4
_Irql$ = 12						; size = 4
_SCEndUnsynchronizedMinidriverStreamCallin@8 PROC NEAR	; COMDAT

; 5159 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 5160 :     KeReleaseSpinLockFromDpcLevel(&StreamObject->DeviceExtension->SpinLock);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _StreamObject$[esp+4]
  00006	8d b7 14 01 00
	00		 lea	 esi, DWORD PTR [edi+276]
  0000c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000e	81 c1 d8 00 00
	00		 add	 ecx, 216		; 000000d8H
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KefReleaseSpinLockFromDpcLevel@4

; 5161 :     SCRequestDpcForStream(StreamObject);

  0001a	57		 push	 edi
  0001b	e8 00 00 00 00	 call	 _SCRequestDpcForStream@4

; 5162 : 
; 5163 :     StreamClassDpc(NULL,
; 5164 :                    StreamObject->DeviceExtension->DeviceObject,
; 5165 :                    NULL,
; 5166 :                    StreamObject);

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	57		 push	 edi
  00023	6a 00		 push	 0
  00025	ff b0 a0 00 00
	00		 push	 DWORD PTR [eax+160]
  0002b	6a 00		 push	 0
  0002d	e8 00 00 00 00	 call	 _StreamClassDpc@16

; 5167 :     KeLowerIrql(*Irql);

  00032	8b 44 24 10	 mov	 eax, DWORD PTR _Irql$[esp+4]
  00036	8a 08		 mov	 cl, BYTE PTR [eax]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 5168 :     return;
; 5169 : }

  00040	c2 08 00	 ret	 8
_SCEndUnsynchronizedMinidriverStreamCallin@8 ENDP
_TEXT	ENDS
PUBLIC	_SCSubmitRequest@44
; Function compile flags: /Ogsy
;	COMDAT _SCSubmitRequest@44
PAGE	SEGMENT
_StreamObject$ = -4					; size = 4
_Command$ = 8						; size = 4
_Buffer$ = 12						; size = 4
_DataSize$ = 16						; size = 4
_Callback$ = 20						; size = 4
_DeviceExtension$ = 24					; size = 4
_InstanceExtension$ = 28				; size = 4
_HwStreamObject$ = 32					; size = 4
_Irp$ = 36						; size = 4
_RequestIssued$ = 40					; size = 4
_Queue$ = 44						; size = 4
_MinidriverRoutine$ = 48				; size = 4
_SCSubmitRequest@44 PROC NEAR				; COMDAT

; 2767 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2768 :     PSTREAM_OBJECT  StreamObject = 0;

  00006	33 ff		 xor	 edi, edi

; 2769 :     PSTREAM_REQUEST_BLOCK Request = SCBuildRequestPacket(DeviceExtension,
; 2770 :                                                          Irp,
; 2771 :                                                          0,
; 2772 :                                                          0);

  00008	57		 push	 edi
  00009	57		 push	 edi
  0000a	ff 75 24	 push	 DWORD PTR _Irp$[ebp]
  0000d	89 7d fc	 mov	 DWORD PTR _StreamObject$[ebp], edi
  00010	ff 75 18	 push	 DWORD PTR _DeviceExtension$[ebp]
  00013	e8 00 00 00 00	 call	 _SCBuildRequestPacket@16
  00018	8b f0		 mov	 esi, eax

; 2773 :     NTSTATUS        Status;
; 2774 : 
; 2775 :     PAGED_CODE();
; 2776 : 
; 2777 :     //
; 2778 :     // assume request will be successfully issued.
; 2779 :     //
; 2780 : 
; 2781 :     *RequestIssued = TRUE;
; 2782 : 
; 2783 : 
; 2784 :     //
; 2785 :     // if the alloc failed, call the callback procedure with a null SRB
; 2786 :     //
; 2787 : 
; 2788 :     if (!Request) {

  0001a	3b f7		 cmp	 esi, edi
  0001c	8b 45 28	 mov	 eax, DWORD PTR _RequestIssued$[ebp]
  0001f	c6 00 01	 mov	 BYTE PTR [eax], 1
  00022	75 0d		 jne	 SHORT $L13684

; 2789 : 
; 2790 :         *RequestIssued = FALSE;

  00024	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2791 :         return (STATUS_INSUFFICIENT_RESOURCES);

  00027	b8 9a 00 00 c0	 mov	 eax, -1073741670	; c000009aH
  0002c	e9 96 00 00 00	 jmp	 $L13680
$L13684:
  00031	53		 push	 ebx

; 2792 :     }
; 2793 :     if (HwStreamObject) {

  00032	8b 5d 20	 mov	 ebx, DWORD PTR _HwStreamObject$[ebp]
  00035	3b df		 cmp	 ebx, edi
  00037	74 1f		 je	 SHORT $L13691

; 2794 :         StreamObject = CONTAINING_RECORD(
; 2795 :                                          HwStreamObject,
; 2796 :                                          STREAM_OBJECT,
; 2797 :                                          HwStreamObject
; 2798 :             );
; 2799 : 
; 2800 : 
; 2801 :         //
; 2802 :         // hack.  we need to set the stream request flag if this is a stream
; 2803 :         // request.  the only case that we would NOT set this when a stream
; 2804 :         // object is passed in is on an OPEN or CLOSE, where the stream
; 2805 :         // object is
; 2806 :         // passed in on a device request.  special case this.  if later
; 2807 :         // this assumption changes, an assert will be hit in lowerapi.
; 2808 :         //
; 2809 : 
; 2810 :         if ((Command != SRB_OPEN_STREAM) && (Command != SRB_CLOSE_STREAM)) {

  00039	81 7d 08 01 01
	00 00		 cmp	 DWORD PTR _Command$[ebp], 257 ; 00000101H
  00040	8d 83 58 ff ff
	ff		 lea	 eax, DWORD PTR [ebx-168]
  00046	89 45 fc	 mov	 DWORD PTR _StreamObject$[ebp], eax
  00049	74 0d		 je	 SHORT $L13691
  0004b	81 7d 08 02 01
	00 00		 cmp	 DWORD PTR _Command$[ebp], 258 ; 00000102H
  00052	74 04		 je	 SHORT $L13691

; 2811 : 
; 2812 :             Request->HwSRB.Flags |= SRB_HW_FLAGS_STREAM_REQUEST;

  00054	83 4e 30 02	 or	 DWORD PTR [esi+48], 2
$L13691:

; 2813 :         }
; 2814 :     }
; 2815 :     //
; 2816 :     // initialize event for blocking for completion
; 2817 :     //
; 2818 : 
; 2819 :     KeInitializeEvent(&Request->Event, SynchronizationEvent, FALSE);

  00058	6a 00		 push	 0
  0005a	6a 01		 push	 1
  0005c	8d 7e 78	 lea	 edi, DWORD PTR [esi+120]
  0005f	57		 push	 edi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeEvent@12

; 2820 : 
; 2821 :     Request->HwSRB.Command = Command;
; 2822 : 
; 2823 :     Request->Callback = SCSignalSRBEvent;
; 2824 :     Request->HwSRB.HwInstanceExtension = InstanceExtension;
; 2825 :     Request->HwSRB.StreamObject = HwStreamObject;
; 2826 :     Request->HwSRB.CommandData.StreamBuffer = Buffer;
; 2827 :     Request->HwSRB.HwDeviceExtension = DeviceExtension->HwDeviceExtension;
; 2828 :     Request->HwSRB.NumberOfBytesToTransfer = DataSize;
; 2829 :     Request->DoNotCallBack = FALSE;
; 2830 : 
; 2831 :     //
; 2832 :     // call routine to actually submit request to the device
; 2833 :     //
; 2834 : 
; 2835 :     Status = SCIssueRequestToDevice(DeviceExtension,
; 2836 :                                     StreamObject,
; 2837 :                                     Request,
; 2838 :                                     MinidriverRoutine,
; 2839 :                                     Queue,
; 2840 :                                     Irp);

  00066	ff 75 24	 push	 DWORD PTR _Irp$[ebp]
  00069	8b 45 08	 mov	 eax, DWORD PTR _Command$[ebp]
  0006c	ff 75 2c	 push	 DWORD PTR _Queue$[ebp]
  0006f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00072	8b 45 1c	 mov	 eax, DWORD PTR _InstanceExtension$[ebp]
  00075	ff 75 30	 push	 DWORD PTR _MinidriverRoutine$[ebp]
  00078	89 46 34	 mov	 DWORD PTR [esi+52], eax
  0007b	8b 45 0c	 mov	 eax, DWORD PTR _Buffer$[ebp]
  0007e	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00081	8b 45 18	 mov	 eax, DWORD PTR _DeviceExtension$[ebp]
  00084	56		 push	 esi
  00085	ff 75 fc	 push	 DWORD PTR _StreamObject$[ebp]
  00088	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], OFFSET FLAT:_SCSignalSRBEvent@4
  0008f	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00092	8b 88 c8 00 00
	00		 mov	 ecx, DWORD PTR [eax+200]
  00098	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0009b	8b 4d 10	 mov	 ecx, DWORD PTR _DataSize$[ebp]
  0009e	50		 push	 eax
  0009f	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  000a2	c6 86 8c 00 00
	00 00		 mov	 BYTE PTR [esi+140], 0
  000a9	e8 00 00 00 00	 call	 _SCIssueRequestToDevice@24

; 2841 : 
; 2842 :     //
; 2843 :     // block waiting for completion if pending
; 2844 :     //
; 2845 : 
; 2846 :     if (Status == STATUS_PENDING) {

  000ae	3d 03 01 00 00	 cmp	 eax, 259		; 00000103H
  000b3	5b		 pop	 ebx
  000b4	75 0d		 jne	 SHORT $L13693

; 2847 :         KeWaitForSingleObject(&Request->Event, Executive, KernelMode, FALSE, NULL);

  000b6	33 c0		 xor	 eax, eax
  000b8	50		 push	 eax
  000b9	50		 push	 eax
  000ba	50		 push	 eax
  000bb	50		 push	 eax
  000bc	57		 push	 edi
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20
$L13693:

; 2848 :     }
; 2849 :     return (Callback(Request));

  000c3	56		 push	 esi
  000c4	ff 55 14	 call	 DWORD PTR _Callback$[ebp]
$L13680:
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi

; 2850 : 
; 2851 : }

  000c9	c9		 leave
  000ca	c2 2c 00	 ret	 44			; 0000002cH
_SCSubmitRequest@44 ENDP
PAGE	ENDS
PUBLIC	_SCProcessDataTransfer@12
EXTRN	__imp__KsProbeStreamIrp@12:NEAR
EXTRN	__imp__KsAllocateExtraData@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCProcessDataTransfer@12
PAGE	SEGMENT
_Flags$ = -20						; size = 4
_HeaderSize$ = -16					; size = 4
_NumberOfBuffers$ = -12					; size = 4
_NumberOfPages$ = -8					; size = 4
_ExtraSize$ = -4					; size = 4
_DeviceExtension$ = 8					; size = 4
_OutputBuffer$ = 12					; size = 4
_Irp$ = 12						; size = 4
_Command$ = 16						; size = 4
_SCProcessDataTransfer@12 PROC NEAR			; COMDAT

; 2904 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 2905 :     PIO_STACK_LOCATION IrpStack = IoGetCurrentIrpStackLocation(Irp);

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _Irp$[ebp]
  0000a	56		 push	 esi
  0000b	8b 73 60	 mov	 esi, DWORD PTR [ebx+96]

; 2906 :     PSTREAM_REQUEST_BLOCK Request;
; 2907 :     PSTREAM_OBJECT  StreamObject = IrpStack->FileObject->FsContext;

  0000e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00011	57		 push	 edi
  00012	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]

; 2908 :     NTSTATUS        Status;
; 2909 :     PKSSTREAM_HEADER OutputBuffer = NULL;

  00015	33 c0		 xor	 eax, eax
  00017	89 45 0c	 mov	 DWORD PTR _OutputBuffer$[ebp], eax

; 2910 :     ULONG           NumberOfPages = 0,
; 2911 :                     NumberOfBuffers = 0;
; 2912 :     ULONG           Flags =
; 2913 :                         KSPROBE_STREAMWRITE | 
; 2914 :                         KSPROBE_ALLOCATEMDL | 
; 2915 :                         KSPROBE_PROBEANDLOCK | 
; 2916 :                         KSPROBE_ALLOWFORMATCHANGE;
; 2917 :     ULONG           HeaderSize=0; // prefixbug 17392
; 2918 :     ULONG           ExtraSize=0; // prefixbug 17391
; 2919 :     #if DBG
; 2920 :     PMDL            CurrentMdl;
; 2921 :     #endif
; 2922 :     PVOID           pMemPtrArray = NULL;
; 2923 : 
; 2924 : 
; 2925 :     PAGED_CODE();
; 2926 : 
; 2927 :     //
; 2928 :     // if we are flushing, we must error any I/O during this period.
; 2929 :     //
; 2930 : 
; 2931 :     if (StreamObject->InFlush) {

  0001a	38 87 57 01 00
	00		 cmp	 BYTE PTR [edi+343], al
  00020	89 45 f8	 mov	 DWORD PTR _NumberOfPages$[ebp], eax
  00023	89 45 f4	 mov	 DWORD PTR _NumberOfBuffers$[ebp], eax
  00026	c7 45 ec b1 00
	00 00		 mov	 DWORD PTR _Flags$[ebp], 177 ; 000000b1H
  0002d	89 45 f0	 mov	 DWORD PTR _HeaderSize$[ebp], eax
  00030	89 45 fc	 mov	 DWORD PTR _ExtraSize$[ebp], eax
  00033	74 0a		 je	 SHORT $L13718

; 2932 : 
; 2933 : 
; 2934 :         DebugPrint((DebugLevelError,
; 2935 :                     "'StreamDispatchIOControl: Aborting IRP during flush!"));
; 2936 :         TRAP;
; 2937 : 
; 2938 :         return (STATUS_DEVICE_NOT_READY);

  00035	b8 a3 00 00 c0	 mov	 eax, -1073741661	; c00000a3H
  0003a	e9 8d 01 00 00	 jmp	 $L13704
$L13718:

; 2939 : 
; 2940 :     }                           // if flushing
; 2941 :     Irp->IoStatus.Information = 0;

  0003f	89 43 1c	 mov	 DWORD PTR [ebx+28], eax

; 2942 : 
; 2943 :     #if DBG
; 2944 :     DeviceExtension->NumberOfRequests++;
; 2945 :     #endif
; 2946 : 
; 2947 :     if (IrpStack->Parameters.DeviceIoControl.OutputBufferLength) {

  00042	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00045	3b c8		 cmp	 ecx, eax
  00047	0f 84 aa 00 00
	00		 je	 $L15240

; 2948 : 
; 2949 :         //
; 2950 :         // get the size of the header and the expansion from the minidriver.
; 2951 :         //
; 2952 : 
; 2953 :         HeaderSize = StreamObject->HwStreamObject.StreamHeaderMediaSpecific +
; 2954 :             sizeof(KSSTREAM_HEADER);

  0004d	8b 87 d4 00 00
	00		 mov	 eax, DWORD PTR [edi+212]

; 2955 :         ExtraSize = StreamObject->HwStreamObject.StreamHeaderWorkspace;

  00053	8b 97 d8 00 00
	00		 mov	 edx, DWORD PTR [edi+216]
  00059	83 c0 30	 add	 eax, 48			; 00000030H

; 2956 : 
; 2957 :         //
; 2958 :         // we assumed this was a write. do additional processing if a read.
; 2959 :         //
; 2960 : 
; 2961 :         if (Command == SRB_READ_DATA) {

  0005c	83 7d 10 00	 cmp	 DWORD PTR _Command$[ebp], 0
  00060	89 45 f0	 mov	 DWORD PTR _HeaderSize$[ebp], eax
  00063	89 55 fc	 mov	 DWORD PTR _ExtraSize$[ebp], edx
  00066	75 0a		 jne	 SHORT $L15242

; 2962 : 
; 2963 :             Flags =
; 2964 :                 KSPROBE_STREAMREAD | KSPROBE_ALLOCATEMDL | KSPROBE_PROBEANDLOCK;

  00068	c7 45 ec 30 00
	00 00		 mov	 DWORD PTR _Flags$[ebp], 48 ; 00000030H

; 2965 : 
; 2966 :             //
; 2967 :             // this is a read, so set the information field in the irp to
; 2968 :             // copy back the headers when the I/O is complete.
; 2969 :             //
; 2970 : 
; 2971 :             Irp->IoStatus.Information =
; 2972 :                 IrpStack->Parameters.DeviceIoControl.OutputBufferLength;

  0006f	89 4b 1c	 mov	 DWORD PTR [ebx+28], ecx
$L15242:

; 2973 : 
; 2974 :         }
; 2975 :         //
; 2976 :         // lock and probe the buffer
; 2977 :         //
; 2978 :         DebugPrint((DebugLevelVerbose, "Stream: HeaderSize:%x\n",HeaderSize));
; 2979 :         DebugPrint((DebugLevelVerbose, "Stream: sizeof(KSSSTREAM_HEADER):%x\n",sizeof(KSSTREAM_HEADER)));
; 2980 :         DebugPrint((DebugLevelVerbose, "Stream: MediaSpecific:%x\n",StreamObject->HwStreamObject.StreamHeaderMediaSpecific));
; 2981 :         DebugPrint((DebugLevelVerbose, "Stream: StreamHeader->Size:%x\n",((PKSSTREAM_HEADER)(Irp->UserBuffer))->Size));
; 2982 : 
; 2983 : 
; 2984 :         if (!NT_SUCCESS(Status =
; 2985 :                         KsProbeStreamIrp(Irp,
; 2986 :                                          Flags,
; 2987 :                                          HeaderSize))) {

  00072	50		 push	 eax
  00073	ff 75 ec	 push	 DWORD PTR _Flags$[ebp]
  00076	53		 push	 ebx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsProbeStreamIrp@12
  0007d	85 c0		 test	 eax, eax

; 2988 : 
; 2989 :             DebugPrint((DebugLevelError, "Stream: ProbeStreamIrp failed!"));
; 2990 : 
; 2991 :             return (Status);

  0007f	0f 8c 47 01 00
	00		 jl	 $L13704

; 2992 : 
; 2993 :         }
; 2994 :         if (!ExtraSize) {

  00085	83 7d fc 00	 cmp	 DWORD PTR _ExtraSize$[ebp], 0
  00089	75 0c		 jne	 SHORT $L13725

; 2995 : 
; 2996 :             OutputBuffer = (PKSSTREAM_HEADER)
; 2997 :                 Irp->AssociatedIrp.SystemBuffer;

  0008b	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0008e	89 45 0c	 mov	 DWORD PTR _OutputBuffer$[ebp], eax

; 2998 : 
; 2999 :             IrpStack->Parameters.Others.Argument4 = NULL;

  00091	83 66 10 00	 and	 DWORD PTR [esi+16], 0

; 3000 :         } else {

  00095	eb 1c		 jmp	 SHORT $L13728
$L13725:

; 3001 : 
; 3002 :             TRAP;
; 3003 :             if (!NT_SUCCESS(Status = KsAllocateExtraData(Irp,
; 3004 :                                                          ExtraSize,
; 3005 :                                                          &OutputBuffer))) {

  00097	8d 45 0c	 lea	 eax, DWORD PTR _OutputBuffer$[ebp]
  0009a	50		 push	 eax
  0009b	ff 75 fc	 push	 DWORD PTR _ExtraSize$[ebp]
  0009e	53		 push	 ebx
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsAllocateExtraData@12
  000a5	85 c0		 test	 eax, eax

; 3006 : 
; 3007 : 
; 3008 :                 DebugPrint((DebugLevelError, "Stream: AllocExtraData failed!"));
; 3009 : 
; 3010 :                 return (Status);

  000a7	0f 8c 1f 01 00
	00		 jl	 $L13704

; 3011 :             }                   // if not success
; 3012 :             IrpStack->Parameters.Others.Argument4 = OutputBuffer;

  000ad	8b 45 0c	 mov	 eax, DWORD PTR _OutputBuffer$[ebp]
  000b0	89 46 10	 mov	 DWORD PTR [esi+16], eax
$L13728:

; 3013 : 
; 3014 : 
; 3015 :         }
; 3016 : 
; 3017 : 
; 3018 :         #if DBG
; 3019 : 
; 3020 :         //
; 3021 :         // assert the MDL list.
; 3022 :         //
; 3023 : 
; 3024 :         CurrentMdl = Irp->MdlAddress;
; 3025 : 
; 3026 :         while (CurrentMdl) {
; 3027 : 
; 3028 :             CurrentMdl = CurrentMdl->Next;
; 3029 :         }                       // while
; 3030 :         #endif
; 3031 : 
; 3032 :         //
; 3033 :         // calculate the # of buffers.
; 3034 :         //
; 3035 : 
; 3036 :         NumberOfBuffers = IrpStack->Parameters.
; 3037 :             DeviceIoControl.OutputBufferLength / HeaderSize;

  000b3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b6	8b 4d f0	 mov	 ecx, DWORD PTR _HeaderSize$[ebp]
  000b9	33 d2		 xor	 edx, edx
  000bb	f7 f1		 div	 ecx

; 3038 : 
; 3039 : 
; 3040 :         //
; 3041 :         // do addtional processing on the data buffers.
; 3042 :         //
; 3043 :         if (StreamObject->HwStreamObject.Dma) {     // an optimization

  000bd	80 bf cc 00 00
	00 00		 cmp	 BYTE PTR [edi+204], 0
  000c4	89 45 f4	 mov	 DWORD PTR _NumberOfBuffers$[ebp], eax
  000c7	74 1f		 je	 SHORT $L13731

; 3044 :             SCProcessDmaDataBuffers(OutputBuffer,
; 3045 :                              NumberOfBuffers,
; 3046 :                              StreamObject,
; 3047 :                              Irp->MdlAddress,
; 3048 :                              &NumberOfPages,
; 3049 :                              HeaderSize + ExtraSize,
; 3050 :                              (BOOLEAN) (Command == SRB_WRITE_DATA));

  000c9	83 7d 10 01	 cmp	 DWORD PTR _Command$[ebp], 1
  000cd	0f 94 c2	 sete	 dl
  000d0	52		 push	 edx
  000d1	8b 55 fc	 mov	 edx, DWORD PTR _ExtraSize$[ebp]
  000d4	03 d1		 add	 edx, ecx
  000d6	52		 push	 edx
  000d7	8d 4d f8	 lea	 ecx, DWORD PTR _NumberOfPages$[ebp]
  000da	51		 push	 ecx
  000db	ff 73 04	 push	 DWORD PTR [ebx+4]
  000de	57		 push	 edi
  000df	50		 push	 eax
  000e0	ff 75 0c	 push	 DWORD PTR _OutputBuffer$[ebp]
  000e3	e8 00 00 00 00	 call	 _SCProcessDmaDataBuffers@28
$L13731:

; 3051 :         }
; 3052 :         //
; 3053 :         // if number of pages is > than the max supported, return error.
; 3054 :         // Allow
; 3055 :         // for one extra map register for the SRB extension.
; 3056 :         //
; 3057 :         // GUBGUB - This is really a workitem to make it correct. 
; 3058 :         // need to break up requests that have too many elements.
; 3059 :         //
; 3060 : 
; 3061 :         if (NumberOfPages > (DeviceExtension->NumberOfMapRegisters - 1)) {

  000e8	8b 45 08	 mov	 eax, DWORD PTR _DeviceExtension$[ebp]
  000eb	8b 80 b8 00 00
	00		 mov	 eax, DWORD PTR [eax+184]
  000f1	48		 dec	 eax
  000f2	39 45 f8	 cmp	 DWORD PTR _NumberOfPages$[ebp], eax

; 3062 : 
; 3063 :             return (STATUS_INSUFFICIENT_RESOURCES);

  000f5	77 1d		 ja	 SHORT $L15243
$L15240:

; 3064 :         }
; 3065 :     }                           // if BufferSize
; 3066 :     //
; 3067 :     // build an SRB and alloc workspace for the request.   Allocate
; 3068 :     // scatter/gather space also if needed.
; 3069 :     //
; 3070 : 
; 3071 :     Request = SCBuildRequestPacket(DeviceExtension,
; 3072 :                                    Irp,
; 3073 :                                    NumberOfPages * sizeof(KSSCATTER_GATHER),
; 3074 :                                    NumberOfBuffers * sizeof(PVOID));

  000f7	8b 45 f4	 mov	 eax, DWORD PTR _NumberOfBuffers$[ebp]
  000fa	c1 e0 02	 shl	 eax, 2
  000fd	50		 push	 eax
  000fe	8b 45 f8	 mov	 eax, DWORD PTR _NumberOfPages$[ebp]
  00101	c1 e0 04	 shl	 eax, 4
  00104	50		 push	 eax
  00105	53		 push	 ebx
  00106	ff 75 08	 push	 DWORD PTR _DeviceExtension$[ebp]
  00109	e8 00 00 00 00	 call	 _SCBuildRequestPacket@16
  0010e	8b f0		 mov	 esi, eax

; 3075 : 
; 3076 :     if (Request == NULL) {

  00110	85 f6		 test	 esi, esi
  00112	75 0a		 jne	 SHORT $L13738
$L15243:

; 3077 : 
; 3078 :         return (STATUS_INSUFFICIENT_RESOURCES);

  00114	b8 9a 00 00 c0	 mov	 eax, -1073741670	; c000009aH
  00119	e9 ae 00 00 00	 jmp	 $L13704
$L13738:

; 3079 :     }
; 3080 : 
; 3081 :         //
; 3082 :         // do more addtional processing on the data buffers.
; 3083 :         //
; 3084 :         if (StreamObject->HwStreamObject.Pio) {     // a small optimization

  0011e	80 bf cd 00 00
	00 00		 cmp	 BYTE PTR [edi+205], 0
  00125	74 2c		 je	 SHORT $L13740

; 3085 :             Request->bMemPtrValid = SCProcessPioDataBuffers(OutputBuffer,
; 3086 :                                     NumberOfBuffers,
; 3087 :                                     StreamObject,
; 3088 :                                     Irp->MdlAddress,
; 3089 :                                     HeaderSize + ExtraSize,
; 3090 :                                     Request->pMemPtrArray,
; 3091 :                                     (BOOLEAN) (Command == SRB_WRITE_DATA));

  00127	83 7d 10 01	 cmp	 DWORD PTR _Command$[ebp], 1
  0012b	8b 4d f0	 mov	 ecx, DWORD PTR _HeaderSize$[ebp]
  0012e	0f 94 c0	 sete	 al
  00131	50		 push	 eax
  00132	ff b6 a4 00 00
	00		 push	 DWORD PTR [esi+164]
  00138	8b 45 fc	 mov	 eax, DWORD PTR _ExtraSize$[ebp]
  0013b	03 c1		 add	 eax, ecx
  0013d	50		 push	 eax
  0013e	ff 73 04	 push	 DWORD PTR [ebx+4]
  00141	57		 push	 edi
  00142	ff 75 f4	 push	 DWORD PTR _NumberOfBuffers$[ebp]
  00145	ff 75 0c	 push	 DWORD PTR _OutputBuffer$[ebp]
  00148	e8 00 00 00 00	 call	 _SCProcessPioDataBuffers@28
  0014d	88 86 a0 00 00
	00		 mov	 BYTE PTR [esi+160], al
$L13740:

; 3092 :             }
; 3093 :     //
; 3094 :     // set # of physical pages
; 3095 :     //
; 3096 : 
; 3097 :     Request->HwSRB.NumberOfPhysicalPages = NumberOfPages;

  00153	8b 45 f8	 mov	 eax, DWORD PTR _NumberOfPages$[ebp]

; 3098 : 
; 3099 :     //
; 3100 :     // set # of data buffers
; 3101 :     //
; 3102 : 
; 3103 :     Request->HwSRB.NumberOfBuffers = NumberOfBuffers;
; 3104 : 
; 3105 :     //
; 3106 :     // set the command code in the packet.
; 3107 :     //
; 3108 : 
; 3109 :     Request->HwSRB.Command = Command;
; 3110 : 
; 3111 :     //
; 3112 :     // set the input and output buffers
; 3113 :     //
; 3114 : 
; 3115 :     Request->HwSRB.CommandData.DataBufferArray = OutputBuffer;
; 3116 :     Request->HwSRB.HwDeviceExtension = DeviceExtension->HwDeviceExtension;

  00156	8b 4d 08	 mov	 ecx, DWORD PTR _DeviceExtension$[ebp]

; 3117 :     Request->Callback = SCProcessCompletedDataRequest;
; 3118 :     Request->HwSRB.StreamObject = &StreamObject->HwStreamObject;
; 3119 :     Request->StreamHeaderSize = HeaderSize + ExtraSize;

  00159	8b 55 f0	 mov	 edx, DWORD PTR _HeaderSize$[ebp]
  0015c	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0015f	8b 45 f4	 mov	 eax, DWORD PTR _NumberOfBuffers$[ebp]
  00162	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00165	8b 45 10	 mov	 eax, DWORD PTR _Command$[ebp]
  00168	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0016b	8b 45 0c	 mov	 eax, DWORD PTR _OutputBuffer$[ebp]
  0016e	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00171	8b 81 c8 00 00
	00		 mov	 eax, DWORD PTR [ecx+200]

; 3120 :     Request->DoNotCallBack = FALSE;
; 3121 :     Request->HwSRB.Flags |= (SRB_HW_FLAGS_DATA_TRANSFER
; 3122 :                              | SRB_HW_FLAGS_STREAM_REQUEST);

  00177	83 4e 30 03	 or	 DWORD PTR [esi+48], 3
  0017b	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0017e	8d 87 a8 00 00
	00		 lea	 eax, DWORD PTR [edi+168]
  00184	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00187	8b 45 fc	 mov	 eax, DWORD PTR _ExtraSize$[ebp]
  0018a	03 c2		 add	 eax, edx
  0018c	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  00192	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], OFFSET FLAT:_SCProcessCompletedDataRequest@4
  00199	c6 86 8c 00 00
	00 00		 mov	 BYTE PTR [esi+140], 0

; 3123 : 
; 3124 :     ASSERT_FILTER_INSTANCE( StreamObject->FilterInstance );
; 3125 :     Request->HwSRB.HwInstanceExtension = 
; 3126 :         StreamObject->FilterInstance->HwInstanceExtension;

  001a0	8b 87 a4 00 00
	00		 mov	 eax, DWORD PTR [edi+164]
  001a6	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  001a9	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 3127 : 
; 3128 :     //
; 3129 :     // point the IRP workspace to the request
; 3130 :     // packet
; 3131 :     //
; 3132 : 
; 3133 :     Irp->Tail.Overlay.DriverContext[0] = Request;
; 3134 : 
; 3135 :     IoMarkIrpPending(Irp);

  001ac	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]

; 3136 : 
; 3137 : //    ASSERT((IoGetCurrentIrpStackLocation(Irp)->MajorFunction ==
; 3138 : //                       IOCTL_KS_READ_STREAM) ||
; 3139 : //            (IoGetCurrentIrpStackLocation(Irp)->MajorFunction ==
; 3140 : //                        IOCTL_KS_WRITE_STREAM));
; 3141 :     ASSERT((ULONG_PTR) Irp->Tail.Overlay.DriverContext[0] > 0x40000000);
; 3142 : 
; 3143 :     return (SCIssueRequestToDevice(DeviceExtension,
; 3144 :                                    StreamObject,
; 3145 :                                    Request,
; 3146 :                              StreamObject->HwStreamObject.ReceiveDataPacket,
; 3147 :                                    &StreamObject->DataPendingQueue,
; 3148 :                                    Irp));

  001af	53		 push	 ebx
  001b0	89 73 40	 mov	 DWORD PTR [ebx+64], esi
  001b3	80 48 03 01	 or	 BYTE PTR [eax+3], 1
  001b7	8d 87 ec 00 00
	00		 lea	 eax, DWORD PTR [edi+236]
  001bd	50		 push	 eax
  001be	ff b7 b4 00 00
	00		 push	 DWORD PTR [edi+180]
  001c4	56		 push	 esi
  001c5	57		 push	 edi
  001c6	51		 push	 ecx
  001c7	e8 00 00 00 00	 call	 _SCIssueRequestToDevice@24
$L13704:
  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx

; 3149 : 
; 3150 : }

  001cf	c9		 leave
  001d0	c2 0c 00	 ret	 12			; 0000000cH
_SCProcessDataTransfer@12 ENDP
PAGE	ENDS
PUBLIC	_SCMinidriverDevicePropertyHandler@16
; Function compile flags: /Ogsy
;	COMDAT _SCMinidriverDevicePropertyHandler@16
PAGE	SEGMENT
_FilterInstance$ = -4					; size = 4
_Command$ = 8						; size = 4
_Irp$ = 12						; size = 4
_RequestIssued$ = 15					; size = 1
_Property$ = 16						; size = 4
_PropertyInfo$ = 20					; size = 4
_SCMinidriverDevicePropertyHandler@16 PROC NEAR		; COMDAT

; 3696 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3697 :     PIO_STACK_LOCATION IrpStack;
; 3698 :     PDEVICE_EXTENSION DeviceExtension;
; 3699 :     PFILTER_INSTANCE FilterInstance;
; 3700 :     PSTREAM_PROPERTY_DESCRIPTOR PropDescriptor;
; 3701 :     NTSTATUS        Status;
; 3702 :     BOOLEAN         RequestIssued;
; 3703 : 
; 3704 :     PAGED_CODE();
; 3705 : 
; 3706 :     IrpStack = IoGetCurrentIrpStackLocation(Irp);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b 78 60	 mov	 edi, DWORD PTR [eax+96]

; 3707 :     DeviceExtension = (PDEVICE_EXTENSION)
; 3708 :         (IrpStack->DeviceObject)->DeviceExtension;

  0000d	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00010	8b 58 28	 mov	 ebx, DWORD PTR [eax+40]

; 3709 : 
; 3710 :     FilterInstance = IrpStack->FileObject->FsContext;

  00013	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00016	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 3711 : 
; 3712 :     PropDescriptor = ExAllocatePool(NonPagedPool,
; 3713 :                                     sizeof(STREAM_PROPERTY_DESCRIPTOR));

  00019	68 57 64 6d 20	 push	 544040023		; 206d6457H
  0001e	6a 14		 push	 20			; 00000014H
  00020	6a 00		 push	 0
  00022	89 45 fc	 mov	 DWORD PTR _FilterInstance$[ebp], eax
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  0002b	8b f0		 mov	 esi, eax

; 3714 :     if (PropDescriptor == NULL) {

  0002d	85 f6		 test	 esi, esi
  0002f	75 07		 jne	 SHORT $L13886

; 3715 :         DebugPrint((DebugLevelError,
; 3716 :                     "SCDevicePropHandler: No pool for descriptor"));
; 3717 :         return (STATUS_INSUFFICIENT_RESOURCES);

  00031	b8 9a 00 00 c0	 mov	 eax, -1073741670	; c000009aH
  00036	eb 6e		 jmp	 SHORT $L13876
$L13886:

; 3718 :     }
; 3719 :     //
; 3720 :     // compute the index of the property set.
; 3721 :     //
; 3722 :     // this value is calculated by subtracting the base property set
; 3723 :     // pointer from the requested property set pointer.
; 3724 :     //
; 3725 :     // The requested property set is pointed to by Context[0] by
; 3726 :     // KsPropertyHandler.
; 3727 :     //
; 3728 : 
; 3729 :     PropDescriptor->PropertySetID = (ULONG)
; 3730 :         ((ULONG_PTR) Irp->Tail.Overlay.DriverContext[0] -
; 3731 :         IFN_MF( (ULONG_PTR) DeviceExtension->DevicePropertiesArray)
; 3732 :         IF_MF( (ULONG_PTR) FilterInstance->DevicePropertiesArray)
; 3733 :         )/ sizeof(KSPROPERTY_SET);

  00038	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  0003b	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _FilterInstance$[ebp]
  00041	2b 41 4c	 sub	 eax, DWORD PTR [ecx+76]
  00044	6a 14		 push	 20			; 00000014H
  00046	59		 pop	 ecx
  00047	33 d2		 xor	 edx, edx
  00049	f7 f1		 div	 ecx
  0004b	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 3734 : 
; 3735 :     PropDescriptor->Property = Property;

  0004e	8b 45 10	 mov	 eax, DWORD PTR _Property$[ebp]
  00051	89 06		 mov	 DWORD PTR [esi], eax

; 3736 :     PropDescriptor->PropertyInfo = PropertyInfo;

  00053	8b 45 14	 mov	 eax, DWORD PTR _PropertyInfo$[ebp]
  00056	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 3737 :     PropDescriptor->PropertyInputSize =
; 3738 :         IrpStack->Parameters.DeviceIoControl.InputBufferLength;

  00059	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0005c	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 3739 :     PropDescriptor->PropertyOutputSize =
; 3740 :         IrpStack->Parameters.DeviceIoControl.OutputBufferLength;

  0005f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00062	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 3741 : 
; 3742 :     //
; 3743 :     // send a get or set property SRB to the device.
; 3744 :     //
; 3745 : 
; 3746 :     Status = SCSubmitRequest(Command,
; 3747 :                              PropDescriptor,
; 3748 :                              0,
; 3749 :                              SCProcessCompletedPropertyRequest,
; 3750 :                              DeviceExtension,
; 3751 :                              FilterInstance->HwInstanceExtension,
; 3752 :                              NULL,
; 3753 :                              Irp,
; 3754 :                              &RequestIssued,
; 3755 :                              &DeviceExtension->PendingQueue,
; 3756 :                              (PVOID) DeviceExtension->
; 3757 :                              MinidriverData->HwInitData.
; 3758 :                              HwReceivePacket
; 3759 :         );

  00065	8b 83 c0 00 00
	00		 mov	 eax, DWORD PTR [ebx+192]
  0006b	ff 70 08	 push	 DWORD PTR [eax+8]
  0006e	8d 83 f0 00 00
	00		 lea	 eax, DWORD PTR [ebx+240]
  00074	50		 push	 eax
  00075	8d 45 0f	 lea	 eax, DWORD PTR _RequestIssued$[ebp]
  00078	50		 push	 eax
  00079	ff 75 0c	 push	 DWORD PTR _Irp$[ebp]
  0007c	8b 45 fc	 mov	 eax, DWORD PTR _FilterInstance$[ebp]
  0007f	6a 00		 push	 0
  00081	ff 70 18	 push	 DWORD PTR [eax+24]
  00084	53		 push	 ebx
  00085	68 00 00 00 00	 push	 OFFSET FLAT:_SCProcessCompletedPropertyRequest@4
  0008a	6a 00		 push	 0
  0008c	56		 push	 esi
  0008d	ff 75 08	 push	 DWORD PTR _Command$[ebp]
  00090	e8 00 00 00 00	 call	 _SCSubmitRequest@44

; 3760 :     if (!RequestIssued) {

  00095	80 7d 0f 00	 cmp	 BYTE PTR _RequestIssued$[ebp], 0
  00099	8b f8		 mov	 edi, eax
  0009b	75 07		 jne	 SHORT $L13894

; 3761 : 
; 3762 :         ExFreePool(PropDescriptor);

  0009d	56		 push	 esi
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4
$L13894:

; 3763 :     }
; 3764 :     return (Status);

  000a4	8b c7		 mov	 eax, edi
$L13876:
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx

; 3765 : }

  000a9	c9		 leave
  000aa	c2 10 00	 ret	 16			; 00000010H
_SCMinidriverDevicePropertyHandler@16 ENDP
PAGE	ENDS
PUBLIC	_SCMinidriverStreamPropertyHandler@16
; Function compile flags: /Ogsy
;	COMDAT _SCMinidriverStreamPropertyHandler@16
PAGE	SEGMENT
_DeviceExtension$ = -4					; size = 4
_Command$ = 8						; size = 4
_Irp$ = 12						; size = 4
_RequestIssued$ = 15					; size = 1
_Property$ = 16						; size = 4
_PropertyInfo$ = 20					; size = 4
_SCMinidriverStreamPropertyHandler@16 PROC NEAR		; COMDAT

; 3793 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3794 :     PIO_STACK_LOCATION IrpStack;
; 3795 :     PDEVICE_EXTENSION DeviceExtension;
; 3796 :     PSTREAM_OBJECT  StreamObject;
; 3797 :     PSTREAM_PROPERTY_DESCRIPTOR PropDescriptor;
; 3798 :     NTSTATUS        Status;
; 3799 :     BOOLEAN         RequestIssued;
; 3800 : 
; 3801 :     PAGED_CODE();
; 3802 : 
; 3803 :     IrpStack = IoGetCurrentIrpStackLocation(Irp);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  00007	53		 push	 ebx
  00008	8b 58 60	 mov	 ebx, DWORD PTR [eax+96]

; 3804 :     DeviceExtension = (PDEVICE_EXTENSION)
; 3805 :         (IrpStack->DeviceObject)->DeviceExtension;

  0000b	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0000e	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00011	56		 push	 esi
  00012	57		 push	 edi

; 3806 : 
; 3807 :     StreamObject = IrpStack->FileObject->FsContext;
; 3808 : 
; 3809 :     PropDescriptor = ExAllocatePool(NonPagedPool,
; 3810 :                                     sizeof(STREAM_PROPERTY_DESCRIPTOR));

  00013	68 57 64 6d 20	 push	 544040023		; 206d6457H
  00018	89 45 fc	 mov	 DWORD PTR _DeviceExtension$[ebp], eax
  0001b	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  0001e	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  00021	6a 14		 push	 20			; 00000014H
  00023	6a 00		 push	 0
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  0002b	8b f0		 mov	 esi, eax

; 3811 :     if (PropDescriptor == NULL) {

  0002d	85 f6		 test	 esi, esi
  0002f	75 07		 jne	 SHORT $L13913

; 3812 :         DebugPrint((DebugLevelError,
; 3813 :                     "SCDevicePropHandler: No pool for descriptor"));
; 3814 :         return (STATUS_INSUFFICIENT_RESOURCES);

  00031	b8 9a 00 00 c0	 mov	 eax, -1073741670	; c000009aH
  00036	eb 75		 jmp	 SHORT $L13903
$L13913:

; 3815 :     }
; 3816 :     //
; 3817 :     // compute the index of the property set.
; 3818 :     //
; 3819 :     // this value is calculated by subtracting the base property set
; 3820 :     // pointer from the requested property set pointer.
; 3821 :     //
; 3822 :     // The requested property set is pointed to by Context[0] by
; 3823 :     // KsPropertyHandler.
; 3824 :     //
; 3825 : 
; 3826 :     PropDescriptor->PropertySetID = (ULONG)
; 3827 :         ((ULONG_PTR) Irp->Tail.Overlay.DriverContext[0] -
; 3828 :          (ULONG_PTR) StreamObject->PropertyInfo)
; 3829 :         / sizeof(KSPROPERTY_SET);

  00038	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  0003b	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0003e	2b 87 1c 01 00
	00		 sub	 eax, DWORD PTR [edi+284]
  00044	6a 14		 push	 20			; 00000014H
  00046	59		 pop	 ecx
  00047	33 d2		 xor	 edx, edx
  00049	f7 f1		 div	 ecx
  0004b	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 3830 : 
; 3831 :     PropDescriptor->Property = Property;

  0004e	8b 45 10	 mov	 eax, DWORD PTR _Property$[ebp]
  00051	89 06		 mov	 DWORD PTR [esi], eax

; 3832 :     PropDescriptor->PropertyInfo = PropertyInfo;

  00053	8b 45 14	 mov	 eax, DWORD PTR _PropertyInfo$[ebp]
  00056	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 3833 :     PropDescriptor->PropertyInputSize =
; 3834 :         IrpStack->Parameters.DeviceIoControl.InputBufferLength;

  00059	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0005c	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 3835 :     PropDescriptor->PropertyOutputSize =
; 3836 :         IrpStack->Parameters.DeviceIoControl.OutputBufferLength;

  0005f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00062	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 3837 :     //
; 3838 :     // send a get or set property SRB to the stream.
; 3839 :     //
; 3840 : 
; 3841 :     Status = SCSubmitRequest(Command,
; 3842 :                              PropDescriptor,
; 3843 :                              0,
; 3844 :                              SCProcessCompletedPropertyRequest,
; 3845 :                              DeviceExtension,
; 3846 :                           StreamObject->FilterInstance->HwInstanceExtension,
; 3847 :                              &StreamObject->HwStreamObject,
; 3848 :                              Irp,
; 3849 :                              &RequestIssued,
; 3850 :                              &StreamObject->ControlPendingQueue,
; 3851 :                              (PVOID) StreamObject->HwStreamObject.
; 3852 :                              ReceiveControlPacket
; 3853 :         );

  00065	ff b7 b8 00 00
	00		 push	 DWORD PTR [edi+184]
  0006b	8d 87 f4 00 00
	00		 lea	 eax, DWORD PTR [edi+244]
  00071	50		 push	 eax
  00072	8d 45 0f	 lea	 eax, DWORD PTR _RequestIssued$[ebp]
  00075	50		 push	 eax
  00076	ff 75 0c	 push	 DWORD PTR _Irp$[ebp]
  00079	8d 87 a8 00 00
	00		 lea	 eax, DWORD PTR [edi+168]
  0007f	50		 push	 eax
  00080	8b 87 a4 00 00
	00		 mov	 eax, DWORD PTR [edi+164]
  00086	ff 70 18	 push	 DWORD PTR [eax+24]
  00089	ff 75 fc	 push	 DWORD PTR _DeviceExtension$[ebp]
  0008c	68 00 00 00 00	 push	 OFFSET FLAT:_SCProcessCompletedPropertyRequest@4
  00091	6a 00		 push	 0
  00093	56		 push	 esi
  00094	ff 75 08	 push	 DWORD PTR _Command$[ebp]
  00097	e8 00 00 00 00	 call	 _SCSubmitRequest@44

; 3854 : 
; 3855 :     if (!RequestIssued) {

  0009c	80 7d 0f 00	 cmp	 BYTE PTR _RequestIssued$[ebp], 0
  000a0	8b f8		 mov	 edi, eax
  000a2	75 07		 jne	 SHORT $L13920

; 3856 : 
; 3857 :         ExFreePool(PropDescriptor);

  000a4	56		 push	 esi
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4
$L13920:

; 3858 :     }
; 3859 :     return (Status);

  000ab	8b c7		 mov	 eax, edi
$L13903:
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx

; 3860 : }

  000b0	c9		 leave
  000b1	c2 10 00	 ret	 16			; 00000010H
_SCMinidriverStreamPropertyHandler@16 ENDP
PAGE	ENDS
PUBLIC	_SCDereferenceDriver@4
EXTRN	__imp__MmPageEntireDriver@4:NEAR
EXTRN	_StreamClassPnP@8:NEAR
EXTRN	__imp__IoGetDriverObjectExtension@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCDereferenceDriver@4
PAGE	SEGMENT
_Event$ = -36						; size = 16
_IoStatusBlock$ = -20					; size = 8
tv240 = -12						; size = 4
_MinidriverInfo$ = -8					; size = 4
_DeviceObject$ = -4					; size = 4
_DeviceExtension$ = 8					; size = 4
_RequestIssued$ = 11					; size = 1
_SCDereferenceDriver@4 PROC NEAR			; COMDAT

; 4389 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4390 : 
; 4391 :     PMINIDRIVER_INFORMATION MinidriverInfo;
; 4392 :     PDEVICE_EXTENSION CurrentDeviceExtension;
; 4393 :     BOOLEAN         RequestIssued,
; 4394 :                     DontPage = FALSE;
; 4395 :     KEVENT          Event;
; 4396 :     IO_STATUS_BLOCK IoStatusBlock;
; 4397 :     PIRP            Irp;
; 4398 :     PDEVICE_OBJECT  DeviceObject;
; 4399 :     NTSTATUS        Status;
; 4400 : 
; 4401 :     PAGED_CODE();
; 4402 : 
; 4403 :     //
; 4404 :     // if the driver said it was a SWENUM driver, dereference it.
; 4405 :     //
; 4406 : 
; 4407 :     if (DeviceExtension->RegistryFlags & DRIVER_USES_SWENUM_TO_LOAD)

  00009	8b 7d 08	 mov	 edi, DWORD PTR _DeviceExtension$[ebp]
  0000c	33 db		 xor	 ebx, ebx
  0000e	f6 87 a8 00 00
	00 10		 test	 BYTE PTR [edi+168], 16	; 00000010H
  00015	74 07		 je	 SHORT $L14058

; 4408 :     {
; 4409 :         SCReferenceSwEnumDriver(DeviceExtension,FALSE);

  00017	53		 push	 ebx
  00018	57		 push	 edi
  00019	e8 00 00 00 00	 call	 _SCReferenceSwEnumDriver@8
$L14058:

; 4410 :     }
; 4411 : 
; 4412 :     MinidriverInfo = IoGetDriverObjectExtension(DeviceExtension->DeviceObject->DriverObject,
; 4413 :                                                 (PVOID) StreamClassPnP);

  0001e	8b 87 a0 00 00
	00		 mov	 eax, DWORD PTR [edi+160]
  00024	68 00 00 00 00	 push	 OFFSET FLAT:_StreamClassPnP@8
  00029	ff 70 08	 push	 DWORD PTR [eax+8]
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoGetDriverObjectExtension@8
  00032	8b f0		 mov	 esi, eax

; 4414 : 
; 4415 :     DebugPrint(( DebugLevelVerbose, 
; 4416 :                  "DerefernceDriver %x Count %x DriverFlags=%x\n",
; 4417 :                  DeviceExtension->DeviceObject->DriverObject,
; 4418 :                  MinidriverInfo->UseCount, MinidriverInfo->Flags));
; 4419 :                  
; 4420 :     if (!(MinidriverInfo->Flags & DRIVER_FLAGS_NO_PAGEOUT)) {

  00034	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1
  00038	89 75 f8	 mov	 DWORD PTR _MinidriverInfo$[ebp], esi
  0003b	75 41		 jne	 SHORT $L14060

; 4421 : 
; 4422 :         KeWaitForSingleObject(&MinidriverInfo->ControlEvent,
; 4423 :                               Executive,
; 4424 :                               KernelMode,
; 4425 :                               FALSE,    // not alertable
; 4426 :                               NULL);

  0003d	53		 push	 ebx
  0003e	53		 push	 ebx
  0003f	53		 push	 ebx
  00040	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  00043	53		 push	 ebx
  00044	50		 push	 eax
  00045	89 45 f4	 mov	 DWORD PTR tv240[ebp], eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20

; 4427 : 
; 4428 :         //
; 4429 :         // dec the refcount and see if we can page out.
; 4430 :         //
; 4431 :         DebugPrint(( DebugLevelVerbose, 
; 4432 :                     "DerefernceDriver CountDown\n"));
; 4433 : 
; 4434 :         ASSERT((LONG) MinidriverInfo->UseCount > 0);
; 4435 : 
; 4436 :         if (!(--MinidriverInfo->UseCount)) {

  0004e	ff 4e 50	 dec	 DWORD PTR [esi+80]
  00051	75 20		 jne	 SHORT $L15257

; 4437 : 
; 4438 :             //
; 4439 :             // page out the minidriver after alerting it that we are going to.
; 4440 :             // PNP is supposed to be serialized, so there should be
; 4441 :             // no need to protect this list.  I'm worried about this, tho.
; 4442 :             // need to research. 
; 4443 :             // My unstderstanding is that PnP is serialized.
; 4444 :             //
; 4445 :             // This is by-design, not a bug. 
; 4446 :             // This code assumes that the minidriver will bind only
; 4447 :             // with the stream class.   this needs to be doc'ed in the spec
; 4448 :             // that only single binders will be able to use autopage.
; 4449 :             //
; 4450 : 
; 4451 :             //
; 4452 :             // find the first device object chained to the driver object.
; 4453 :             //
; 4454 : 
; 4455 :             DeviceObject = DeviceExtension->DeviceObject->DriverObject->DeviceObject;

  00053	8b 87 a0 00 00
	00		 mov	 eax, DWORD PTR [edi+160]
  00059	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0005c	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 4456 : 
; 4457 :                     
; 4458 :             while (DeviceObject) {

  0005f	3b fb		 cmp	 edi, ebx
  00061	89 7d fc	 mov	 DWORD PTR _DeviceObject$[ebp], edi
  00064	75 22		 jne	 SHORT $L14065
$L15255:

; 4581 :             }                   // while deviceobject
; 4582 : 
; 4583 :             //
; 4584 :             // if we were able to alert each device controlled by the driver
; 4585 :             // that a pageout is emminent, page the driver out.
; 4586 :             //
; 4587 : 
; 4588 :             if (!DontPage) {
; 4589 : 
; 4590 :                 DebugPrint((DebugLevelVerbose, 
; 4591 :                             "mmPageEntireDriver %x\n",
; 4592 :                             DeviceExtension->DeviceObject->DriverObject));
; 4593 :                             
; 4594 :                 MinidriverInfo->Flags |= DRIVER_FLAGS_PAGED_OUT;
; 4595 :                 MmPageEntireDriver(MinidriverInfo->HwInitData.HwReceivePacket);

  00066	ff 76 08	 push	 DWORD PTR [esi+8]
  00069	83 4e 3c 02	 or	 DWORD PTR [esi+60], 2
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmPageEntireDriver@4
$L15257:

; 4596 : 
; 4597 :             }                   // if ! dontpage
; 4598 :         }                       // if !usecount
; 4599 :         //
; 4600 :         // release the control event.
; 4601 :         //
; 4602 : 
; 4603 :         KeSetEvent(&MinidriverInfo->ControlEvent, IO_NO_INCREMENT, FALSE);

  00073	53		 push	 ebx
  00074	53		 push	 ebx
  00075	ff 75 f4	 push	 DWORD PTR tv240[ebp]
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetEvent@12
$L14060:
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx

; 4604 : 
; 4605 :     }                           // if pageable
; 4606 : }

  00081	c9		 leave
  00082	c2 04 00	 ret	 4
$L15256:

; 4456 : 
; 4457 :                     
; 4458 :             while (DeviceObject) {

  00085	8b 7d fc	 mov	 edi, DWORD PTR _DeviceObject$[ebp]
$L14065:

; 4459 : 
; 4460 :                 CurrentDeviceExtension = DeviceObject->DeviceExtension;

  00088	8b 77 28	 mov	 esi, DWORD PTR [edi+40]

; 4461 : 
; 4462 :                 DebugPrint((DebugLevelVerbose, 
; 4463 :                         "DerefernceDriver Checking Device=%x\n",
; 4464 :                         DeviceObject));
; 4465 :                         
; 4466 : 
; 4467 :                 //
; 4468 :                 // if the device is not started, don't call the minidriver
; 4469 :                 // also don't process a child device
; 4470 :                 //
; 4471 : 
; 4472 :                 if ((CurrentDeviceExtension->Flags & DEVICE_FLAGS_PNP_STARTED) &&
; 4473 :                   (!(CurrentDeviceExtension->Flags & DEVICE_FLAGS_CHILD))) {

  0008b	8b 86 9c 00 00
	00		 mov	 eax, DWORD PTR [esi+156]
  00091	a8 01		 test	 al, 1
  00093	0f 84 81 00 00
	00		 je	 $L14079
  00099	a8 02		 test	 al, 2
  0009b	75 7d		 jne	 SHORT $L14079

; 4474 : 
; 4475 :                     KeInitializeEvent(&Event, NotificationEvent, FALSE);

  0009d	53		 push	 ebx
  0009e	53		 push	 ebx
  0009f	8d 45 dc	 lea	 eax, DWORD PTR _Event$[ebp]
  000a2	50		 push	 eax
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeEvent@12

; 4476 : 
; 4477 :                     //
; 4478 :                     // allocate IRP for issuing the pageout.  Since this IRP
; 4479 :                     // should not really be referenced, use dummy IOCTL code.
; 4480 :                     // I chose this one since it will always fail in the KS
; 4481 :                     // property handler if someone is silly enough to try to
; 4482 :                     // process it. Also make the irp internal i/o control.
; 4483 :                     //
; 4484 :                     // IoVerifier.c test code does not check IrpStack bound like
; 4485 :                     // the formal production code. And the owner does not want to
; 4486 :                     // fix it. It's more productive just work around here.
; 4487 : 
; 4488 :                     //Irp = IoBuildDeviceIoControlRequest(
; 4489 :                     //                                    IOCTL_KS_PROPERTY,
; 4490 :                     //                                    DeviceObject,
; 4491 :                     //                                    NULL,
; 4492 :                     //                                    0,
; 4493 :                     //                                    NULL,
; 4494 :                     //                                    0,
; 4495 :                     //                                    TRUE,
; 4496 :                     //                                    &Event,
; 4497 :                     //                                    &IoStatusBlock);
; 4498 :                     
; 4499 :                     Irp = IoAllocateIrp(DeviceObject->StackSize, FALSE);

  000a9	33 c0		 xor	 eax, eax
  000ab	8a 47 30	 mov	 al, BYTE PTR [edi+48]
  000ae	53		 push	 ebx
  000af	50		 push	 eax
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoAllocateIrp@8
  000b6	8b f8		 mov	 edi, eax

; 4500 : 
; 4501 :                     if (!Irp) {

  000b8	3b fb		 cmp	 edi, ebx
  000ba	74 b7		 je	 SHORT $L15257

; 4502 : 
; 4503 :                         //
; 4504 :                         // could not allocate IRP.  don't page out.
; 4505 :                         //
; 4506 : 
; 4507 :                         DontPage = TRUE;
; 4508 : 
; 4509 :                         break;
; 4510 :                     }
; 4511 : 
; 4512 :                     else {
; 4513 :                         PIO_STACK_LOCATION NextStack;
; 4514 :                         //
; 4515 :                         // This is a dummy Irp, the MJ/MN are arbitrary
; 4516 :                         //
; 4517 :                         NextStack = IoGetNextIrpStackLocation(Irp);

  000bc	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  000bf	83 e8 24	 sub	 eax, 36			; 00000024H

; 4518 :                         ASSERT(NextStack != NULL);
; 4519 :                         NextStack->MajorFunction = IRP_MJ_PNP;

  000c2	c6 00 1b	 mov	 BYTE PTR [eax], 27	; 0000001bH

; 4520 :                         NextStack->MinorFunction = IRP_MN_CANCEL_STOP_DEVICE;

  000c5	c6 40 01 06	 mov	 BYTE PTR [eax+1], 6

; 4521 :                         Irp->UserIosb = &IoStatusBlock;

  000c9	8d 45 ec	 lea	 eax, DWORD PTR _IoStatusBlock$[ebp]
  000cc	89 47 28	 mov	 DWORD PTR [edi+40], eax

; 4522 :                         Irp->UserEvent = &Event;                        

  000cf	8d 45 dc	 lea	 eax, DWORD PTR _Event$[ebp]

; 4523 :                     }                                                        
; 4524 : 
; 4525 :                     //
; 4526 :                     // show one more I/O pending on the device.
; 4527 :                     //
; 4528 :                     DebugPrint((DebugLevelVerbose, 
; 4529 :                             "Sending SRB_PAGING_OUT_DRIVER to Device=%x\n",
; 4530 :                             DeviceObject));
; 4531 : 
; 4532 :                     InterlockedIncrement(&CurrentDeviceExtension->OneBasedIoCount);

  000d2	8d 8e 6c 01 00
	00		 lea	 ecx, DWORD PTR [esi+364]
  000d8	89 47 2c	 mov	 DWORD PTR [edi+44], eax
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedIncrement@4

; 4533 : 
; 4534 :                     Status = SCSubmitRequest(SRB_PAGING_OUT_DRIVER,
; 4535 :                                              (PVOID) NULL,
; 4536 :                                              0,
; 4537 :                                              SCProcessCompletedRequest,
; 4538 :                                              CurrentDeviceExtension,
; 4539 :                                              NULL,
; 4540 :                                              NULL,
; 4541 :                                              Irp,
; 4542 :                                              &RequestIssued,
; 4543 :                                       &CurrentDeviceExtension->PendingQueue,
; 4544 :                                              (PVOID) CurrentDeviceExtension->
; 4545 :                                              MinidriverData->HwInitData.
; 4546 :                                              HwReceivePacket
; 4547 :                         );

  000e1	8b 86 c0 00 00
	00		 mov	 eax, DWORD PTR [esi+192]
  000e7	ff 70 08	 push	 DWORD PTR [eax+8]
  000ea	8d 86 f0 00 00
	00		 lea	 eax, DWORD PTR [esi+240]
  000f0	50		 push	 eax
  000f1	8d 45 0b	 lea	 eax, DWORD PTR _RequestIssued$[ebp]
  000f4	50		 push	 eax
  000f5	57		 push	 edi
  000f6	53		 push	 ebx
  000f7	53		 push	 ebx
  000f8	56		 push	 esi
  000f9	68 00 00 00 00	 push	 OFFSET FLAT:_SCProcessCompletedRequest@4
  000fe	53		 push	 ebx
  000ff	53		 push	 ebx
  00100	68 0b 01 00 00	 push	 267			; 0000010bH
  00105	e8 00 00 00 00	 call	 _SCSubmitRequest@44

; 4548 : 
; 4549 :                     if (!RequestIssued) {

  0010a	38 5d 0b	 cmp	 BYTE PTR _RequestIssued$[ebp], bl
  0010d	74 21		 je	 SHORT $L15252

; 4559 : 
; 4560 :                     }           // if ! requestissued
; 4561 :                     //
; 4562 :                     // check status.  note that we do not check for pending,
; 4563 :                     // since the above call is sync and won't return til the
; 4564 :                     // request is complete.
; 4565 :                     //
; 4566 : 
; 4567 :                     if (!NT_SUCCESS(Status)) {

  0010f	3b c3		 cmp	 eax, ebx
  00111	0f 8c 5c ff ff
	ff		 jl	 $L15257
  00117	8b 7d fc	 mov	 edi, DWORD PTR _DeviceObject$[ebp]
$L14079:

; 4568 : 
; 4569 :                         //
; 4570 :                         // if the minidriver did not OK the pageout, don't
; 4571 :                         // page
; 4572 :                         // out.
; 4573 :                         //
; 4574 : 
; 4575 :                         DontPage = TRUE;
; 4576 :                         break;
; 4577 : 
; 4578 :                     }           // if !success
; 4579 :                 }               // if started
; 4580 :                 DeviceObject = DeviceObject->NextDevice;

  0011a	8b 7f 0c	 mov	 edi, DWORD PTR [edi+12]
  0011d	3b fb		 cmp	 edi, ebx
  0011f	89 7d fc	 mov	 DWORD PTR _DeviceObject$[ebp], edi
  00122	0f 85 5d ff ff
	ff		 jne	 $L15256

; 4559 : 
; 4560 :                     }           // if ! requestissued
; 4561 :                     //
; 4562 :                     // check status.  note that we do not check for pending,
; 4563 :                     // since the above call is sync and won't return til the
; 4564 :                     // request is complete.
; 4565 :                     //
; 4566 : 
; 4567 :                     if (!NT_SUCCESS(Status)) {

  00128	8b 75 f8	 mov	 esi, DWORD PTR _MinidriverInfo$[ebp]
  0012b	e9 36 ff ff ff	 jmp	 $L15255
$L15252:

; 4550 : 
; 4551 :                         //
; 4552 :                         // could not issue SRB.  complete IRP and don't page
; 4553 :                         // out.
; 4554 :                         //
; 4555 : 
; 4556 :                         DontPage = TRUE;
; 4557 :                         SCCompleteIrp(Irp, Status, CurrentDeviceExtension);

  00130	56		 push	 esi
  00131	50		 push	 eax
  00132	57		 push	 edi
  00133	e8 00 00 00 00	 call	 _SCCompleteIrp@12

; 4558 :                         break;

  00138	e9 36 ff ff ff	 jmp	 $L15257
_SCDereferenceDriver@4 ENDP
PAGE	ENDS
PUBLIC	_SCSendUnknownCommand@16
; Function compile flags: /Ogsy
;	COMDAT _SCSendUnknownCommand@16
PAGE	SEGMENT
_Irp$ = 8						; size = 4
_DeviceExtension$ = 12					; size = 4
_Callback$ = 16						; size = 4
_RequestIssued$ = 20					; size = 4
_SCSendUnknownCommand@16 PROC NEAR			; COMDAT

; 5780 : 
; 5781 :     PAGED_CODE();
; 5782 : 
; 5783 :     //
; 5784 :     // send an UNKNOWN_COMMAND SRB to the minidriver.
; 5785 :     //
; 5786 : 
; 5787 :     return (SCSubmitRequest(SRB_UNKNOWN_DEVICE_COMMAND,
; 5788 :                             NULL,
; 5789 :                             0,
; 5790 :                             Callback,
; 5791 :                             DeviceExtension,
; 5792 :                             NULL,
; 5793 :                             NULL,
; 5794 :                             Irp,
; 5795 :                             RequestIssued,
; 5796 :                             &DeviceExtension->PendingQueue,
; 5797 :                             (PVOID) DeviceExtension->
; 5798 :                             MinidriverData->HwInitData.
; 5799 :                             HwReceivePacket
; 5800 :                             ));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _DeviceExtension$[esp-4]
  00004	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  0000a	ff 71 08	 push	 DWORD PTR [ecx+8]
  0000d	8d 88 f0 00 00
	00		 lea	 ecx, DWORD PTR [eax+240]
  00013	51		 push	 ecx
  00014	ff 74 24 18	 push	 DWORD PTR _RequestIssued$[esp+4]
  00018	33 c9		 xor	 ecx, ecx
  0001a	ff 74 24 10	 push	 DWORD PTR _Irp$[esp+8]
  0001e	51		 push	 ecx
  0001f	51		 push	 ecx
  00020	50		 push	 eax
  00021	ff 74 24 28	 push	 DWORD PTR _Callback$[esp+24]
  00025	51		 push	 ecx
  00026	51		 push	 ecx
  00027	68 0a 01 00 00	 push	 266			; 0000010aH
  0002c	e8 00 00 00 00	 call	 _SCSubmitRequest@44

; 5801 : 
; 5802 : }

  00031	c2 10 00	 ret	 16			; 00000010H
_SCSendUnknownCommand@16 ENDP
PAGE	ENDS
PUBLIC	_SCRescanStreams@4
EXTRN	__imp__IoBuildDeviceIoControlRequest@36:NEAR
EXTRN	_SCStreamInfoCallback@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCRescanStreams@4
PAGE	SEGMENT
_Event$ = -32						; size = 16
_IoStatusBlock$ = -16					; size = 8
_Status$ = -8						; size = 4
_ConfigInfo$ = -8					; size = 4
_StreamBuffer$ = -4					; size = 4
_DeviceObject$ = 8					; size = 4
_DeviceExtension$ = 8					; size = 4
_RequestIssued$ = 11					; size = 1
_SCRescanStreams@4 PROC NEAR				; COMDAT

; 6527 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 6528 :     PHW_STREAM_DESCRIPTOR StreamBuffer;
; 6529 :     PDEVICE_OBJECT  DeviceObject = DeviceExtension->DeviceObject;

  00008	8b 75 08	 mov	 esi, DWORD PTR _DeviceExtension$[ebp]
  0000b	8b 86 a0 00 00
	00		 mov	 eax, DWORD PTR [esi+160]
  00011	57		 push	 edi

; 6530 :     PPORT_CONFIGURATION_INFORMATION ConfigInfo =
; 6531 :     DeviceExtension->ConfigurationInformation;

  00012	8b be cc 00 00
	00		 mov	 edi, DWORD PTR [esi+204]

; 6532 :     BOOLEAN         RequestIssued;
; 6533 :     KEVENT          Event;
; 6534 :     NTSTATUS        Status;
; 6535 :     IO_STATUS_BLOCK IoStatusBlock;
; 6536 :     PIRP            Irp;
; 6537 : 
; 6538 :     PAGED_CODE();
; 6539 : 
; 6540 :     TRAP;
; 6541 :     DebugPrint((DebugLevelVerbose, "'RescanStreams: enter\n"));
; 6542 : 
; 6543 :     //
; 6544 :     // send an SRB to retrieve the stream information
; 6545 :     //
; 6546 : 
; 6547 :     ASSERT(ConfigInfo->StreamDescriptorSize);
; 6548 : 
; 6549 :     StreamBuffer =
; 6550 :         ExAllocatePool(NonPagedPool,
; 6551 :                        ConfigInfo->StreamDescriptorSize
; 6552 :         );

  00018	68 57 64 6d 20	 push	 544040023		; 206d6457H
  0001d	ff 77 30	 push	 DWORD PTR [edi+48]
  00020	33 db		 xor	 ebx, ebx
  00022	53		 push	 ebx
  00023	89 45 08	 mov	 DWORD PTR _DeviceObject$[ebp], eax
  00026	89 7d f8	 mov	 DWORD PTR _ConfigInfo$[ebp], edi
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12

; 6553 : 
; 6554 :     if (!StreamBuffer) {

  0002f	3b c3		 cmp	 eax, ebx
  00031	89 45 fc	 mov	 DWORD PTR _StreamBuffer$[ebp], eax
  00034	0f 84 ab 00 00
	00		 je	 $L14413

; 6555 : 
; 6556 :         DebugPrint((DebugLevelError, "RescanStreams: couldn't allocate!\n"));
; 6557 :         TRAP;
; 6558 :         return;
; 6559 :     }
; 6560 :     //
; 6561 :     // take the control event to avoid race
; 6562 :     //
; 6563 : 
; 6564 :     KeWaitForSingleObject(&DeviceExtension->ControlEvent,
; 6565 :                           Executive,
; 6566 :                           KernelMode,
; 6567 :                           FALSE,// not alertable
; 6568 :                           NULL);

  0003a	53		 push	 ebx
  0003b	53		 push	 ebx
  0003c	53		 push	 ebx
  0003d	53		 push	 ebx
  0003e	8d 86 38 01 00
	00		 lea	 eax, DWORD PTR [esi+312]
  00044	50		 push	 eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20

; 6569 : 
; 6570 :     //
; 6571 :     // zero-init the buffer
; 6572 :     //
; 6573 : 
; 6574 :     RtlZeroMemory(StreamBuffer, ConfigInfo->StreamDescriptorSize);

  0004b	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  0004e	8b 7d fc	 mov	 edi, DWORD PTR _StreamBuffer$[ebp]
  00051	8b d1		 mov	 edx, ecx
  00053	c1 e9 02	 shr	 ecx, 2
  00056	33 c0		 xor	 eax, eax
  00058	f3 ab		 rep stosd
  0005a	8b ca		 mov	 ecx, edx
  0005c	83 e1 03	 and	 ecx, 3
  0005f	f3 aa		 rep stosb

; 6575 : 
; 6576 :     //
; 6577 :     // allocate IRP for issuing the get stream info.
; 6578 :     // Since this IRP
; 6579 :     // should not really be referenced, use dummy IOCTL code.
; 6580 :     // I chose this one since it will always fail in the KS
; 6581 :     // property handler if someone is silly enough to try to
; 6582 :     // process it. Also make the irp internal i/o control.
; 6583 :     //
; 6584 : 
; 6585 :     Irp = IoBuildDeviceIoControlRequest(
; 6586 :                                         IOCTL_KS_PROPERTY,
; 6587 :                                         DeviceObject,
; 6588 :                                         NULL,
; 6589 :                                         0,
; 6590 :                                         NULL,
; 6591 :                                         0,
; 6592 :                                         TRUE,
; 6593 :                                         &Event,
; 6594 :                                         &IoStatusBlock);

  00061	8d 45 f0	 lea	 eax, DWORD PTR _IoStatusBlock$[ebp]
  00064	50		 push	 eax
  00065	8d 45 e0	 lea	 eax, DWORD PTR _Event$[ebp]
  00068	50		 push	 eax
  00069	6a 01		 push	 1
  0006b	53		 push	 ebx
  0006c	53		 push	 ebx
  0006d	53		 push	 ebx
  0006e	53		 push	 ebx
  0006f	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  00072	68 03 00 2f 00	 push	 3080195			; 002f0003H
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoBuildDeviceIoControlRequest@36
  0007d	8b f8		 mov	 edi, eax

; 6595 : 
; 6596 :     if (!Irp) {

  0007f	3b fb		 cmp	 edi, ebx
  00081	75 0b		 jne	 SHORT $L14409

; 6597 : 
; 6598 :         //
; 6599 :         // could not allocate IRP.  fail.
; 6600 :         //
; 6601 : 		ExFreePool( StreamBuffer );

  00083	ff 75 fc	 push	 DWORD PTR _StreamBuffer$[ebp]
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4

; 6602 :         DebugPrint((DebugLevelError, "RescanStreams: couldn't allocate!\n"));
; 6603 :         TRAP;
; 6604 :         return;

  0008c	eb 57		 jmp	 SHORT $L14413
$L14409:

; 6605 : 
; 6606 :     }                           // if ! irp
; 6607 :     //
; 6608 :     // show one more I/O pending on the device.
; 6609 :     //
; 6610 : 
; 6611 :     InterlockedIncrement(&DeviceExtension->OneBasedIoCount);

  0008e	8d 8e 6c 01 00
	00		 lea	 ecx, DWORD PTR [esi+364]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@InterlockedIncrement@4

; 6612 : 
; 6613 :     //
; 6614 :     // submit the command to retrieve the stream info.
; 6615 :     // additional processing will be done by the callback
; 6616 :     // procedure.
; 6617 :     //
; 6618 : 
; 6619 :     Status = SCSubmitRequest(SRB_GET_STREAM_INFO,
; 6620 :                              StreamBuffer,
; 6621 :                              ConfigInfo->StreamDescriptorSize,
; 6622 :                              SCStreamInfoCallback,
; 6623 :                              DeviceExtension,
; 6624 :                              NULL,
; 6625 :                              NULL,
; 6626 :                              Irp,
; 6627 :                              &RequestIssued,
; 6628 :                              &DeviceExtension->PendingQueue,
; 6629 :                              (PVOID) DeviceExtension->
; 6630 :                              MinidriverData->HwInitData.
; 6631 :                              HwReceivePacket
; 6632 :         );

  0009a	8b 86 c0 00 00
	00		 mov	 eax, DWORD PTR [esi+192]
  000a0	ff 70 08	 push	 DWORD PTR [eax+8]
  000a3	8d 86 f0 00 00
	00		 lea	 eax, DWORD PTR [esi+240]
  000a9	50		 push	 eax
  000aa	8d 45 0b	 lea	 eax, DWORD PTR _RequestIssued$[ebp]
  000ad	50		 push	 eax
  000ae	8b 45 f8	 mov	 eax, DWORD PTR _ConfigInfo$[ebp]
  000b1	57		 push	 edi
  000b2	53		 push	 ebx
  000b3	53		 push	 ebx
  000b4	56		 push	 esi
  000b5	68 00 00 00 00	 push	 OFFSET FLAT:_SCStreamInfoCallback@4
  000ba	ff 70 30	 push	 DWORD PTR [eax+48]
  000bd	ff 75 fc	 push	 DWORD PTR _StreamBuffer$[ebp]
  000c0	68 00 01 00 00	 push	 256			; 00000100H
  000c5	e8 00 00 00 00	 call	 _SCSubmitRequest@44

; 6633 : 
; 6634 :     if (!RequestIssued) {

  000ca	38 5d 0b	 cmp	 BYTE PTR _RequestIssued$[ebp], bl
  000cd	89 45 f8	 mov	 DWORD PTR _Status$[ebp], eax
  000d0	75 13		 jne	 SHORT $L14413

; 6635 : 
; 6636 :         ExFreePool(StreamBuffer);

  000d2	ff 75 fc	 push	 DWORD PTR _StreamBuffer$[ebp]
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4

; 6637 :         DebugPrint((DebugLevelError, "RescanStreams: couldn't issue request!\n"));
; 6638 :         TRAP;
; 6639 :         SCCompleteIrp(Irp, Status, DeviceExtension);

  000db	56		 push	 esi
  000dc	ff 75 f8	 push	 DWORD PTR _Status$[ebp]
  000df	57		 push	 edi
  000e0	e8 00 00 00 00	 call	 _SCCompleteIrp@12
$L14413:
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx

; 6640 :         return;
; 6641 : 
; 6642 :     }
; 6643 :     //
; 6644 :     // processing will continue in callback procedure.
; 6645 :     //
; 6646 : 
; 6647 :     return;
; 6648 : 
; 6649 : }

  000e8	c9		 leave
  000e9	c2 04 00	 ret	 4
_SCRescanStreams@4 ENDP
PAGE	ENDS
PUBLIC	_SCMinidriverDeviceMethodHandler@16
; Function compile flags: /Ogsy
;	COMDAT _SCMinidriverDeviceMethodHandler@16
_TEXT	SEGMENT
_FilterInstance$ = -4					; size = 4
_Command$ = 8						; size = 4
_Irp$ = 12						; size = 4
_RequestIssued$ = 15					; size = 1
_Method$ = 16						; size = 4
_MethodInfo$ = 20					; size = 4
_SCMinidriverDeviceMethodHandler@16 PROC NEAR		; COMDAT

; 7228 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 7229 :     PIO_STACK_LOCATION IrpStack;
; 7230 :     PDEVICE_EXTENSION DeviceExtension;
; 7231 :     PFILTER_INSTANCE FilterInstance;
; 7232 :     PSTREAM_METHOD_DESCRIPTOR MethodDescriptor;
; 7233 :     NTSTATUS        Status;
; 7234 :     BOOLEAN         RequestIssued;
; 7235 : 
; 7236 :     PAGED_CODE();
; 7237 : 
; 7238 :     IrpStack = IoGetCurrentIrpStackLocation(Irp);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b 78 60	 mov	 edi, DWORD PTR [eax+96]

; 7239 :     DeviceExtension = (PDEVICE_EXTENSION)
; 7240 :         (IrpStack->DeviceObject)->DeviceExtension;

  0000d	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00010	8b 58 28	 mov	 ebx, DWORD PTR [eax+40]

; 7241 : 
; 7242 :     FilterInstance = IrpStack->FileObject->FsContext;

  00013	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00016	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 7243 : 
; 7244 :     MethodDescriptor = ExAllocatePool(NonPagedPool,
; 7245 :                                     sizeof(STREAM_METHOD_DESCRIPTOR));

  00019	68 57 64 6d 20	 push	 544040023		; 206d6457H
  0001e	6a 14		 push	 20			; 00000014H
  00020	6a 00		 push	 0
  00022	89 45 fc	 mov	 DWORD PTR _FilterInstance$[ebp], eax
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  0002b	8b f0		 mov	 esi, eax

; 7246 :     if (MethodDescriptor == NULL) {

  0002d	85 f6		 test	 esi, esi
  0002f	75 07		 jne	 SHORT $L14559

; 7247 :         DEBUG_BREAKPOINT();
; 7248 :         DebugPrint((DebugLevelError,
; 7249 :                     "SCDeviceMethodHandler: No pool for descriptor"));
; 7250 :         return (STATUS_INSUFFICIENT_RESOURCES);

  00031	b8 9a 00 00 c0	 mov	 eax, -1073741670	; c000009aH
  00036	eb 6e		 jmp	 SHORT $L14549
$L14559:

; 7251 :     }
; 7252 :     //
; 7253 :     // compute the index of the method set.
; 7254 :     //
; 7255 :     // this value is calculated by subtracting the base method set
; 7256 :     // pointer from the requested method set pointer.
; 7257 :     //
; 7258 :     // The requested method set is pointed to by Context[0] by
; 7259 :     // KsMethodHandler.
; 7260 :     //
; 7261 : 
; 7262 :     MethodDescriptor->MethodSetID = (ULONG)
; 7263 :         ((ULONG_PTR) Irp->Tail.Overlay.DriverContext[0] -
; 7264 :          IFN_MF((ULONG_PTR) DeviceExtension->DeviceMethodsArray)
; 7265 :          IF_MF((ULONG_PTR) FilterInstance->DeviceMethodsArray)
; 7266 :          ) / sizeof(KSMETHOD_SET);

  00038	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  0003b	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _FilterInstance$[ebp]
  00041	2b 41 28	 sub	 eax, DWORD PTR [ecx+40]
  00044	6a 14		 push	 20			; 00000014H
  00046	59		 pop	 ecx
  00047	33 d2		 xor	 edx, edx
  00049	f7 f1		 div	 ecx
  0004b	89 06		 mov	 DWORD PTR [esi], eax

; 7267 : 
; 7268 :     MethodDescriptor->Method = Method;

  0004d	8b 45 10	 mov	 eax, DWORD PTR _Method$[ebp]
  00050	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 7269 :     MethodDescriptor->MethodInfo = MethodInfo;

  00053	8b 45 14	 mov	 eax, DWORD PTR _MethodInfo$[ebp]
  00056	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 7270 :     MethodDescriptor->MethodInputSize =
; 7271 :         IrpStack->Parameters.DeviceIoControl.InputBufferLength;

  00059	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0005c	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 7272 :     MethodDescriptor->MethodOutputSize =
; 7273 :         IrpStack->Parameters.DeviceIoControl.OutputBufferLength;

  0005f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00062	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 7274 : 
; 7275 :     //
; 7276 :     // send a get or set method SRB to the device.
; 7277 :     //
; 7278 : 
; 7279 :     Status = SCSubmitRequest(Command,
; 7280 :                              MethodDescriptor,
; 7281 :                              0,
; 7282 :                              SCProcessCompletedMethodRequest,
; 7283 :                              DeviceExtension,
; 7284 :                              FilterInstance->HwInstanceExtension,
; 7285 :                              NULL,
; 7286 :                              Irp,
; 7287 :                              &RequestIssued,
; 7288 :                              &DeviceExtension->PendingQueue,
; 7289 :                              (PVOID) DeviceExtension->
; 7290 :                              MinidriverData->HwInitData.
; 7291 :                              HwReceivePacket
; 7292 :         );

  00065	8b 83 c0 00 00
	00		 mov	 eax, DWORD PTR [ebx+192]
  0006b	ff 70 08	 push	 DWORD PTR [eax+8]
  0006e	8d 83 f0 00 00
	00		 lea	 eax, DWORD PTR [ebx+240]
  00074	50		 push	 eax
  00075	8d 45 0f	 lea	 eax, DWORD PTR _RequestIssued$[ebp]
  00078	50		 push	 eax
  00079	ff 75 0c	 push	 DWORD PTR _Irp$[ebp]
  0007c	8b 45 fc	 mov	 eax, DWORD PTR _FilterInstance$[ebp]
  0007f	6a 00		 push	 0
  00081	ff 70 18	 push	 DWORD PTR [eax+24]
  00084	53		 push	 ebx
  00085	68 00 00 00 00	 push	 OFFSET FLAT:_SCProcessCompletedMethodRequest@4
  0008a	6a 00		 push	 0
  0008c	56		 push	 esi
  0008d	ff 75 08	 push	 DWORD PTR _Command$[ebp]
  00090	e8 00 00 00 00	 call	 _SCSubmitRequest@44

; 7293 :     if (!RequestIssued) {

  00095	80 7d 0f 00	 cmp	 BYTE PTR _RequestIssued$[ebp], 0
  00099	8b f8		 mov	 edi, eax
  0009b	75 07		 jne	 SHORT $L14567

; 7294 : 
; 7295 :         DEBUG_BREAKPOINT();
; 7296 :         ExFreePool(MethodDescriptor);

  0009d	56		 push	 esi
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4
$L14567:

; 7297 :     }
; 7298 :     return (Status);

  000a4	8b c7		 mov	 eax, edi
$L14549:
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx

; 7299 : }

  000a9	c9		 leave
  000aa	c2 10 00	 ret	 16			; 00000010H
_SCMinidriverDeviceMethodHandler@16 ENDP
_TEXT	ENDS
PUBLIC	_SCMinidriverStreamMethodHandler@16
; Function compile flags: /Ogsy
;	COMDAT _SCMinidriverStreamMethodHandler@16
_TEXT	SEGMENT
_DeviceExtension$ = -4					; size = 4
_Command$ = 8						; size = 4
_Irp$ = 12						; size = 4
_RequestIssued$ = 15					; size = 1
_Method$ = 16						; size = 4
_MethodInfo$ = 20					; size = 4
_SCMinidriverStreamMethodHandler@16 PROC NEAR		; COMDAT

; 7327 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 7328 :     PIO_STACK_LOCATION IrpStack;
; 7329 :     PDEVICE_EXTENSION DeviceExtension;
; 7330 :     PSTREAM_OBJECT  StreamObject;
; 7331 :     PSTREAM_METHOD_DESCRIPTOR MethodDescriptor;
; 7332 :     NTSTATUS        Status;
; 7333 :     BOOLEAN         RequestIssued;
; 7334 : 
; 7335 :     PAGED_CODE();
; 7336 : 
; 7337 :     IrpStack = IoGetCurrentIrpStackLocation(Irp);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  00007	53		 push	 ebx
  00008	8b 58 60	 mov	 ebx, DWORD PTR [eax+96]

; 7338 :     DeviceExtension = (PDEVICE_EXTENSION)
; 7339 :         (IrpStack->DeviceObject)->DeviceExtension;

  0000b	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0000e	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00011	56		 push	 esi
  00012	57		 push	 edi

; 7340 : 
; 7341 :     StreamObject = IrpStack->FileObject->FsContext;
; 7342 : 
; 7343 :     MethodDescriptor = ExAllocatePool(NonPagedPool,
; 7344 :                                     sizeof(STREAM_METHOD_DESCRIPTOR));

  00013	68 57 64 6d 20	 push	 544040023		; 206d6457H
  00018	89 45 fc	 mov	 DWORD PTR _DeviceExtension$[ebp], eax
  0001b	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  0001e	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  00021	6a 14		 push	 20			; 00000014H
  00023	6a 00		 push	 0
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  0002b	8b f0		 mov	 esi, eax

; 7345 :     if (MethodDescriptor == NULL) {

  0002d	85 f6		 test	 esi, esi
  0002f	75 07		 jne	 SHORT $L14586

; 7346 :         DEBUG_BREAKPOINT();
; 7347 :         DebugPrint((DebugLevelError,
; 7348 :                     "SCDeviceMethodHandler: No pool for descriptor"));
; 7349 :         return (STATUS_INSUFFICIENT_RESOURCES);

  00031	b8 9a 00 00 c0	 mov	 eax, -1073741670	; c000009aH
  00036	eb 75		 jmp	 SHORT $L14576
$L14586:

; 7350 :     }
; 7351 :     //
; 7352 :     // compute the index of the method set.
; 7353 :     //
; 7354 :     // this value is calculated by subtracting the base method set
; 7355 :     // pointer from the requested method set pointer.
; 7356 :     //
; 7357 :     // The requested method set is pointed to by Context[0] by
; 7358 :     // KsMethodHandler.
; 7359 :     //
; 7360 : 
; 7361 :     MethodDescriptor->MethodSetID = (ULONG)
; 7362 :         ((ULONG_PTR) Irp->Tail.Overlay.DriverContext[0] -
; 7363 :          (ULONG_PTR) StreamObject->MethodInfo)
; 7364 :         / sizeof(KSMETHOD_SET);

  00038	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  0003b	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0003e	2b 87 ec 01 00
	00		 sub	 eax, DWORD PTR [edi+492]
  00044	6a 14		 push	 20			; 00000014H
  00046	59		 pop	 ecx
  00047	33 d2		 xor	 edx, edx
  00049	f7 f1		 div	 ecx
  0004b	89 06		 mov	 DWORD PTR [esi], eax

; 7365 : 
; 7366 :     MethodDescriptor->Method = Method;

  0004d	8b 45 10	 mov	 eax, DWORD PTR _Method$[ebp]
  00050	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 7367 :     MethodDescriptor->MethodInfo = MethodInfo;

  00053	8b 45 14	 mov	 eax, DWORD PTR _MethodInfo$[ebp]
  00056	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 7368 :     MethodDescriptor->MethodInputSize =
; 7369 :         IrpStack->Parameters.DeviceIoControl.InputBufferLength;

  00059	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0005c	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 7370 :     MethodDescriptor->MethodOutputSize =
; 7371 :         IrpStack->Parameters.DeviceIoControl.OutputBufferLength;

  0005f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00062	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 7372 :     //
; 7373 :     // send a get or set method SRB to the stream.
; 7374 :     //
; 7375 : 
; 7376 :     Status = SCSubmitRequest(Command,
; 7377 :                              MethodDescriptor,
; 7378 :                              0,
; 7379 :                              SCProcessCompletedMethodRequest,
; 7380 :                              DeviceExtension,
; 7381 :                           StreamObject->FilterInstance->HwInstanceExtension,
; 7382 :                              &StreamObject->HwStreamObject,
; 7383 :                              Irp,
; 7384 :                              &RequestIssued,
; 7385 :                              &StreamObject->ControlPendingQueue,
; 7386 :                              (PVOID) StreamObject->HwStreamObject.
; 7387 :                              ReceiveControlPacket
; 7388 :         );

  00065	ff b7 b8 00 00
	00		 push	 DWORD PTR [edi+184]
  0006b	8d 87 f4 00 00
	00		 lea	 eax, DWORD PTR [edi+244]
  00071	50		 push	 eax
  00072	8d 45 0f	 lea	 eax, DWORD PTR _RequestIssued$[ebp]
  00075	50		 push	 eax
  00076	ff 75 0c	 push	 DWORD PTR _Irp$[ebp]
  00079	8d 87 a8 00 00
	00		 lea	 eax, DWORD PTR [edi+168]
  0007f	50		 push	 eax
  00080	8b 87 a4 00 00
	00		 mov	 eax, DWORD PTR [edi+164]
  00086	ff 70 18	 push	 DWORD PTR [eax+24]
  00089	ff 75 fc	 push	 DWORD PTR _DeviceExtension$[ebp]
  0008c	68 00 00 00 00	 push	 OFFSET FLAT:_SCProcessCompletedMethodRequest@4
  00091	6a 00		 push	 0
  00093	56		 push	 esi
  00094	ff 75 08	 push	 DWORD PTR _Command$[ebp]
  00097	e8 00 00 00 00	 call	 _SCSubmitRequest@44

; 7389 : 
; 7390 :     if (!RequestIssued) {

  0009c	80 7d 0f 00	 cmp	 BYTE PTR _RequestIssued$[ebp], 0
  000a0	8b f8		 mov	 edi, eax
  000a2	75 07		 jne	 SHORT $L14593

; 7391 : 
; 7392 :         DEBUG_BREAKPOINT();
; 7393 :         ExFreePool(MethodDescriptor);

  000a4	56		 push	 esi
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4
$L14593:

; 7394 :     }
; 7395 :     return (Status);

  000ab	8b c7		 mov	 eax, edi
$L14576:
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx

; 7396 : }

  000b0	c9		 leave
  000b1	c2 10 00	 ret	 16			; 00000010H
_SCMinidriverStreamMethodHandler@16 ENDP
_TEXT	ENDS
PUBLIC	_SCOpenMinidriverInstance@16
EXTRN	_FilterDispatchTable:BYTE
EXTRN	__imp__KsAllocateObjectHeader@20:NEAR
EXTRN	__imp__KsFreeObjectHeader@4:NEAR
EXTRN	__imp__KsRegisterWorker@8:NEAR
EXTRN	__imp__KsUnregisterWorker@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SCOpenMinidriverInstance@16
PAGE	SEGMENT
_NumberOfPins$ = -12					; size = 4
_FilterTypeIndex$ = -8					; size = 4
_FilterExtensionSize$ = -4				; size = 4
_Status$ = 8						; size = 4
_DeviceExtension$ = 8					; size = 4
_ReturnedFilterInstance$ = 12				; size = 4
_SCGlobalInstanceCallback$ = 16				; size = 4
_Irp$ = 20						; size = 4
_RequestIssued$ = 23					; size = 1
_SCOpenMinidriverInstance@16 PROC NEAR			; COMDAT

; 2493 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 2494 :     ULONG                   FilterExtensionSize;
; 2495 :     PFILTER_INSTANCE        FilterInstance;
; 2496 :     PHW_STREAM_INFORMATION  CurrentInfo;
; 2497 :     PADDITIONAL_PIN_INFO    CurrentAdditionalInfo;
; 2498 :     ULONG                   i;
; 2499 :     BOOLEAN                 RequestIssued;
; 2500 :    	PKSOBJECT_CREATE_ITEM   CreateItem;
; 2501 : 	ULONG                   FilterTypeIndex;
; 2502 : 	ULONG                   NumberOfPins;
; 2503 :     NTSTATUS                Status = STATUS_SUCCESS;
; 2504 : 
; 2505 :     PAGED_CODE();
; 2506 : 
; 2507 :    	//
; 2508 :    	// The CreateItem is in Irp->Tail.Overlay.DriverContext[0] from KS
; 2509 :    	//
; 2510 :     CreateItem = (PKSOBJECT_CREATE_ITEM)Irp->Tail.Overlay.DriverContext[0];
; 2511 : 	ASSERT( CreateItem != NULL );
; 2512 :     FilterTypeIndex = (ULONG)(ULONG_PTR)CreateItem->Context;

  00006	8b 45 14	 mov	 eax, DWORD PTR _Irp$[ebp]
  00009	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	53		 push	 ebx

; 2513 :     
; 2514 :     ASSERT( FilterTypeIndex == 0 ||
; 2515 :             FilterTypeIndex < 
; 2516 :             DeviceExtension->MinidriverData->HwInitData.NumNameExtensions);
; 2517 :             
; 2518 :     FilterExtensionSize = DeviceExtension->FilterExtensionSize;

  00010	8b 5d 08	 mov	 ebx, DWORD PTR _DeviceExtension$[ebp]

; 2519 : 
; 2520 :     ASSERT( DeviceExtension->FilterExtensionSize ==
; 2521 :         	DeviceExtension->MinidriverData->
; 2522 :         	    HwInitData.FilterInstanceExtensionSize);
; 2523 :         	    
; 2524 :     FilterInstance = NULL;
; 2525 : 
; 2526 :     NumberOfPins = DeviceExtension->FilterTypeInfos[FilterTypeIndex].
; 2527 :                         StreamDescriptor->StreamHeader.NumberOfStreams;

  00013	8b 93 f4 01 00
	00		 mov	 edx, DWORD PTR [ebx+500]
  00019	8b 8b fc 01 00
	00		 mov	 ecx, DWORD PTR [ebx+508]
  0001f	89 45 f8	 mov	 DWORD PTR _FilterTypeIndex$[ebp], eax
  00022	c1 e0 04	 shl	 eax, 4

; 2528 : 
; 2529 :     //
; 2530 :     // don't call the minidriver to open the filter instance if 1x1 for backward
; 2531 :     // compat. We do this so that minidrivers that don't support
; 2532 :     // instancing (the vast majority) don't have to respond to this call.
; 2533 :     // 
; 2534 : 
; 2535 :     if ( DeviceExtension->NumberOfOpenInstances > 0 && 
; 2536 :          0 == FilterExtensionSize ) {

  00025	83 bb 2c 01 00
	00 00		 cmp	 DWORD PTR [ebx+300], 0
  0002c	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	89 4d fc	 mov	 DWORD PTR _FilterExtensionSize$[ebp], ecx
  00035	89 45 f4	 mov	 DWORD PTR _NumberOfPins$[ebp], eax
  00038	76 19		 jbe	 SHORT $L13608
  0003a	85 c9		 test	 ecx, ecx
  0003c	75 15		 jne	 SHORT $L13608

; 2537 :    		//
; 2538 :    		// Legacy 1x1 and non-1st open. assign the same
; 2539 :    		// FilterInstance and succeed it.
; 2540 :    		//
; 2541 : 
; 2542 :    		PLIST_ENTRY node;
; 2543 :    		ASSERT( !IsListEmpty( &DeviceExtension->FilterInstanceList));
; 2544 :    		node = DeviceExtension->FilterInstanceList.Flink;
; 2545 :         FilterInstance = CONTAINING_RECORD(node,
; 2546 :                                            FILTER_INSTANCE,
; 2547 :                                            NextFilterInstance);

  0003e	8b 83 24 01 00
	00		 mov	 eax, DWORD PTR [ebx+292]

; 2548 :         ASSERT_FILTER_INSTANCE( FilterInstance );
; 2549 :         *ReturnedFilterInstance = FilterInstance;

  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _ReturnedFilterInstance$[ebp]
  00047	83 e8 08	 sub	 eax, 8
  0004a	89 01		 mov	 DWORD PTR [ecx], eax

; 2550 :    		Status = STATUS_SUCCESS;
; 2551 :    		return Status; // can't goto Exit, it will insert FI again.

  0004c	33 c0		 xor	 eax, eax
  0004e	e9 65 01 00 00	 jmp	 $L13589
$L13608:
  00053	56		 push	 esi
  00054	57		 push	 edi

; 2552 :     }
; 2553 : 
; 2554 :     FilterInstance =
; 2555 :         ExAllocatePool(NonPagedPool, sizeof(FILTER_INSTANCE) + 
; 2556 :         							     FilterExtensionSize +
; 2557 : 			            	             sizeof(ADDITIONAL_PIN_INFO) *
; 2558 :         				    	         NumberOfPins);

  00055	8d 44 40 1b	 lea	 eax, DWORD PTR [eax+eax*2+27]
  00059	68 57 64 6d 20	 push	 544040023		; 206d6457H
  0005e	8d 3c 81	 lea	 edi, DWORD PTR [ecx+eax*4]
  00061	57		 push	 edi
  00062	6a 00		 push	 0
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  0006a	8b f0		 mov	 esi, eax

; 2559 : 
; 2560 :     if (!FilterInstance) {

  0006c	85 f6		 test	 esi, esi
  0006e	75 0c		 jne	 SHORT $L13619

; 2561 :         Status = STATUS_INSUFFICIENT_RESOURCES;

  00070	c7 45 08 9a 00
	00 c0		 mov	 DWORD PTR _Status$[ebp], -1073741670 ; c000009aH

; 2562 :         goto Exit;

  00077	e9 32 01 00 00	 jmp	 $L13656
$L13619:

; 2563 :     }
; 2564 : 
; 2565 :     RtlZeroMemory(FilterInstance, sizeof(FILTER_INSTANCE) + 
; 2566 :                                     FilterExtensionSize +
; 2567 :         	            	        sizeof(ADDITIONAL_PIN_INFO) *
; 2568 :                                     NumberOfPins);

  0007c	33 c0		 xor	 eax, eax
  0007e	8b cf		 mov	 ecx, edi
  00080	8b d1		 mov	 edx, ecx
  00082	c1 e9 02	 shr	 ecx, 2
  00085	8b fe		 mov	 edi, esi
  00087	f3 ab		 rep stosd
  00089	8b ca		 mov	 ecx, edx
  0008b	83 e1 03	 and	 ecx, 3
  0008e	f3 aa		 rep stosb

; 2569 : 
; 2570 :     FilterInstance->Signature = SIGN_FILTER_INSTANCE;
; 2571 :     FilterInstance->DeviceExtension = DeviceExtension; // keep this handy    
; 2572 :     //
; 2573 : 	// To get FilterInstance from HwInstanceExtension we need
; 2574 : 	// to arrange the memory layout 
; 2575 : 	// [FilterInstnace][HwInstanceExtension][AddionalPinInfo...]
; 2576 : 	// as opposed to 
; 2577 : 	// [FilterInstance][AdditionalPinInfo...][HwInstanceExtension]
; 2578 : 	//
; 2579 : 
; 2580 :     FilterInstance->HwInstanceExtension = FilterInstance + 1;
; 2581 :     
; 2582 : 	FilterInstance->PinInstanceInfo = 
; 2583 : 		(PADDITIONAL_PIN_INFO) ((PBYTE)(FilterInstance+1) + FilterExtensionSize);
; 2584 : 
; 2585 :    	FilterInstance->FilterTypeIndex = FilterTypeIndex;
; 2586 : 	
; 2587 :     //
; 2588 :     // initialize the filter instance list
; 2589 :     //
; 2590 : 
; 2591 :     InitializeListHead(&FilterInstance->FirstStream);
; 2592 :     InitializeListHead(&FilterInstance->NextFilterInstance);
; 2593 :     InitializeListHead(&FilterInstance->NotifyList);
; 2594 : 
; 2595 : 	#ifdef ENABLE_STREAM_CLASS_AS_ALLOCATOR
; 2596 :         Status = KsRegisterWorker( CriticalWorkQueue, &FilterInstance->WorkerRead );

  00090	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__KsRegisterWorker@8
  00096	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
  00099	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0009c	8b 45 fc	 mov	 eax, DWORD PTR _FilterExtensionSize$[ebp]
  0009f	8d 44 06 6c	 lea	 eax, DWORD PTR [esi+eax+108]
  000a3	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  000a6	8b 45 f8	 mov	 eax, DWORD PTR _FilterTypeIndex$[ebp]
  000a9	89 46 68	 mov	 DWORD PTR [esi+104], eax
  000ac	c7 46 2c 53 74
	72 46		 mov	 DWORD PTR [esi+44], 1181906003 ; 46727453H
  000b3	89 5e 60	 mov	 DWORD PTR [esi+96], ebx
  000b6	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  000b9	89 40 04	 mov	 DWORD PTR [eax+4], eax
  000bc	89 00		 mov	 DWORD PTR [eax], eax
  000be	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  000c1	89 40 04	 mov	 DWORD PTR [eax+4], eax
  000c4	89 00		 mov	 DWORD PTR [eax], eax
  000c6	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  000c9	89 40 04	 mov	 DWORD PTR [eax+4], eax
  000cc	89 00		 mov	 DWORD PTR [eax], eax
  000ce	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  000d1	50		 push	 eax
  000d2	6a 00		 push	 0
  000d4	ff d7		 call	 edi

; 2597 :         if (!NT_SUCCESS( Status )) {            

  000d6	85 c0		 test	 eax, eax

; 2598 :             ExFreePool(FilterInstance);
; 2599 :             FilterInstance = NULL;
; 2600 :             Status = STATUS_INSUFFICIENT_RESOURCES;            
; 2601 :             ASSERT( 0 );
; 2602 :             goto Exit;

  000d8	7c 18		 jl	 SHORT $L15286

; 2603 :         }
; 2604 : 
; 2605 :         Status = KsRegisterWorker( CriticalWorkQueue, &FilterInstance->WorkerWrite );

  000da	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  000dd	50		 push	 eax
  000de	6a 00		 push	 0
  000e0	ff d7		 call	 edi

; 2606 :         if (!NT_SUCCESS( Status )) {

  000e2	85 c0		 test	 eax, eax
  000e4	89 45 08	 mov	 DWORD PTR _Status$[ebp], eax
  000e7	7d 1c		 jge	 SHORT $L13632

; 2607 :             KsUnregisterWorker( FilterInstance->WorkerRead );

  000e9	ff 76 20	 push	 DWORD PTR [esi+32]
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsUnregisterWorker@4
$L15286:

; 2608 :             ExFreePool(FilterInstance);

  000f2	56		 push	 esi
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4

; 2609 :             FilterInstance = NULL;
; 2610 :             Status = STATUS_INSUFFICIENT_RESOURCES;

  000f9	c7 45 08 9a 00
	00 c0		 mov	 DWORD PTR _Status$[ebp], -1073741670 ; c000009aH

; 2611 :             ASSERT( 0 );
; 2612 :             goto Exit;

  00100	e9 a7 00 00 00	 jmp	 $L15285
$L13632:

; 2613 :         }
; 2614 :         DebugPrint((DebugLevelVerbose,
; 2615 :                    "RegisterReadWorker %x WriteWorker %x\n",
; 2616 :                    FilterInstance->WorkerRead,
; 2617 :                    FilterInstance->WorkerWrite));
; 2618 : 	#endif
; 2619 : 	
; 2620 :     //
; 2621 :     // initialize the current and max instances
; 2622 :     //
; 2623 : 
; 2624 : 	
; 2625 :     CurrentAdditionalInfo = FilterInstance->PinInstanceInfo;
; 2626 :     CurrentInfo = &DeviceExtension->StreamDescriptor->StreamInfo;

  00105	8b 83 34 01 00
	00		 mov	 eax, DWORD PTR [ebx+308]

; 2627 : 
; 2628 :     for (i = 0; i < NumberOfPins; i++) {

  0010b	8b 55 f4	 mov	 edx, DWORD PTR _NumberOfPins$[ebp]
  0010e	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00111	83 c0 28	 add	 eax, 40			; 00000028H
  00114	85 d2		 test	 edx, edx
  00116	76 11		 jbe	 SHORT $L13638
$L15284:

; 2629 : 
; 2630 :         CurrentAdditionalInfo[i].CurrentInstances = 0;

  00118	83 21 00	 and	 DWORD PTR [ecx], 0

; 2631 :         CurrentAdditionalInfo[i].MaxInstances =
; 2632 :             CurrentInfo->NumberOfPossibleInstances;

  0011b	8b 38		 mov	 edi, DWORD PTR [eax]
  0011d	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 2633 : 
; 2634 :         //
; 2635 :    	    // index to next streaminfo and additional info structures.
; 2636 :        	//
; 2637 : 
; 2638 :         CurrentInfo++;

  00120	83 c0 50	 add	 eax, 80			; 00000050H
  00123	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00126	4a		 dec	 edx
  00127	75 ef		 jne	 SHORT $L15284
$L13638:

; 2639 :    	}
; 2640 : 
; 2641 :     //
; 2642 :     // fill in the filter dispatch table pointer
; 2643 :     //
; 2644 : 
; 2645 :     KsAllocateObjectHeader(&FilterInstance->DeviceHeader,
; 2646 :                            SIZEOF_ARRAY(CreateHandlers),
; 2647 :                            (PKSOBJECT_CREATE_ITEM) CreateHandlers,
; 2648 :                            Irp,
; 2649 :                            (PKSDISPATCH_TABLE) & FilterDispatchTable);

  00129	68 00 00 00 00	 push	 OFFSET FLAT:_FilterDispatchTable
  0012e	ff 75 14	 push	 DWORD PTR _Irp$[ebp]
  00131	68 00 00 00 00	 push	 OFFSET FLAT:_CreateHandlers
  00136	6a 01		 push	 1
  00138	56		 push	 esi
  00139	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsAllocateObjectHeader@20

; 2650 : 
; 2651 :     if (FilterExtensionSize) {

  0013f	33 c0		 xor	 eax, eax
  00141	39 45 fc	 cmp	 DWORD PTR _FilterExtensionSize$[ebp], eax
  00144	74 50		 je	 SHORT $Exit$13621

; 2652 : 
; 2653 :         //
; 2654 :         // call the minidriver to open the instance if the call is supported.
; 2655 :         // final status will be processed in the callback procedure.
; 2656 :         //
; 2657 : 
; 2658 :         //
; 2659 :         // C4312 fix: This union corresponds to the _CommandData union within
; 2660 :         // HW_STREAM_REQUEST_BLOCK.  This is done to correctly align
; 2661 :         // FilterTypeIndex for assignment on 64-bit such that it doesn't
; 2662 :         // break on big endian machines.  I don't want to waste stack
; 2663 :         // space with an entire HW_STREAM_REQUEST_BLOCK for a 64-bit safe
; 2664 :         // cast.
; 2665 :         //
; 2666 :         union {
; 2667 :             PVOID Buffer;
; 2668 :             LONG FilterTypeIndex;
; 2669 :         } u;
; 2670 : 
; 2671 :         u.Buffer = NULL;
; 2672 :         u.FilterTypeIndex = (LONG)FilterTypeIndex;
; 2673 : 
; 2674 :         Status = SCSubmitRequest(
; 2675 :         			SRB_OPEN_DEVICE_INSTANCE,
; 2676 :                     u.Buffer,
; 2677 :                     0,
; 2678 :                     SCDequeueAndDeleteSrb, //SCGlobalInstanceCallback,
; 2679 :                     DeviceExtension,
; 2680 :                     FilterInstance->HwInstanceExtension,
; 2681 :                     NULL,
; 2682 :                     Irp,
; 2683 :                     &RequestIssued,
; 2684 :                     &DeviceExtension->PendingQueue,
; 2685 :                     (PVOID) DeviceExtension->MinidriverData->HwInitData.HwReceivePacket
; 2686 :             	 );

  00146	8b 8b c0 00 00
	00		 mov	 ecx, DWORD PTR [ebx+192]
  0014c	ff 71 08	 push	 DWORD PTR [ecx+8]
  0014f	8d 8b f0 00 00
	00		 lea	 ecx, DWORD PTR [ebx+240]
  00155	51		 push	 ecx
  00156	8d 4d 17	 lea	 ecx, DWORD PTR _RequestIssued$[ebp]
  00159	51		 push	 ecx
  0015a	ff 75 14	 push	 DWORD PTR _Irp$[ebp]
  0015d	50		 push	 eax
  0015e	ff 76 18	 push	 DWORD PTR [esi+24]
  00161	53		 push	 ebx
  00162	68 00 00 00 00	 push	 OFFSET FLAT:_SCDequeueAndDeleteSrb@4
  00167	50		 push	 eax
  00168	ff 75 f8	 push	 DWORD PTR _FilterTypeIndex$[ebp]
  0016b	68 03 01 00 00	 push	 259			; 00000103H
  00170	e8 00 00 00 00	 call	 _SCSubmitRequest@44

; 2687 : 
; 2688 :         if (!RequestIssued) {

  00175	80 7d 17 00	 cmp	 BYTE PTR _RequestIssued$[ebp], 0
  00179	89 45 08	 mov	 DWORD PTR _Status$[ebp], eax
  0017c	75 18		 jne	 SHORT $Exit$13621

; 2689 : 
; 2690 :             //
; 2691 :             // if request not issued, fail the request as we could not send
; 2692 :             // it down.
; 2693 :             //
; 2694 : 
; 2695 :             ASSERT(Status != STATUS_SUCCESS);
; 2696 : 
; 2697 :             KsFreeObjectHeader(FilterInstance->DeviceHeader);

  0017e	ff 36		 push	 DWORD PTR [esi]
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsFreeObjectHeader@4

; 2698 : 			#ifdef ENABLE_STREAM_CLASS_AS_ALLOCATOR
; 2699 :             KsUnregisterWorker( FilterInstance->WorkerRead );

  00186	ff 76 20	 push	 DWORD PTR [esi+32]
  00189	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__KsUnregisterWorker@4
  0018f	ff d7		 call	 edi

; 2700 :             KsUnregisterWorker( FilterInstance->WorkerWrite );

  00191	ff 76 24	 push	 DWORD PTR [esi+36]
  00194	ff d7		 call	 edi
$Exit$13621:

; 2701 : 			#endif
; 2702 :             //ExFreePool(FilterInstance);
; 2703 :         }        
; 2704 :     } // if minidriver supports multiple filter
; 2705 : 	
; 2706 :     Exit: {
; 2707 :         if ( NT_SUCCESS( Status ) ) {

  00196	83 7d 08 00	 cmp	 DWORD PTR _Status$[ebp], 0
  0019a	7c 09		 jl	 SHORT $L13653

; 2708 :             DebugPrint((DebugLevelInfo,
; 2709 :                        "Inserting FilterInstance %x\n",
; 2710 :                        FilterInstance));
; 2711 :                        
; 2712 :    			SCInsertFiltersInDevice( FilterInstance, DeviceExtension );

  0019c	53		 push	 ebx
  0019d	56		 push	 esi
  0019e	e8 00 00 00 00	 call	 _SCInsertFiltersInDevice@8

; 2713 :    		}
; 2714 :    		else if ( NULL != FilterInstance) {

  001a3	eb 09		 jmp	 SHORT $L13656
$L13653:

; 2715 :             ExFreePool( FilterInstance );

  001a5	56		 push	 esi
  001a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4
$L15285:

; 2716 :             FilterInstance = NULL;

  001ac	33 f6		 xor	 esi, esi
$L13656:

; 2717 :         }
; 2718 :         
; 2719 :         *ReturnedFilterInstance = FilterInstance;        

  001ae	8b 45 0c	 mov	 eax, DWORD PTR _ReturnedFilterInstance$[ebp]
  001b1	89 30		 mov	 DWORD PTR [eax], esi

; 2720 :         return (Status);

  001b3	8b 45 08	 mov	 eax, DWORD PTR _Status$[ebp]
  001b6	5f		 pop	 edi
  001b7	5e		 pop	 esi
$L13589:
  001b8	5b		 pop	 ebx

; 2721 :     }
; 2722 : }

  001b9	c9		 leave
  001ba	c2 10 00	 ret	 16			; 00000010H
_SCOpenMinidriverInstance@16 ENDP
PAGE	ENDS
END
