; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.2190 

	TITLE	..\swenum.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
INIT	SEGMENT PARA USE32 PUBLIC ''
INIT	ENDS
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _KsGateTurnInputOn@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateTurnInputOff@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateGetStateUnsafe@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateInitialize@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateRemoveOnInputFromAnd@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateRemoveOffInputFromAnd@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateRemoveOnInputFromOr@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateRemoveOffInputFromOr@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CompleteIrp@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DriverEntry@8
INIT	SEGMENT PARA USE32 PUBLIC ''
INIT	ENDS
;	COMDAT _DriverUnload@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _AddDevice@8
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _DispatchPnP@8
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _DispatchSystemControl@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DispatchPower@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DispatchCreate@8
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _DispatchIoControl@8
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
;	COMDAT _DispatchClose@8
PAGE	SEGMENT PARA USE32 PUBLIC ''
PAGE	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_CompleteIrp@12
EXTRN	__imp_@IofCompleteRequest@8:NEAR
; Function compile flags: /Ogsy
; File d:\srv03rtm\drivers\ksfilter\swenum\private.h
;	COMDAT _CompleteIrp@12
_TEXT	SEGMENT
_Irp$ = 8						; size = 4
_Status$ = 12						; size = 4
_PriorityBoost$ = 16					; size = 1
_CompleteIrp@12 PROC NEAR				; COMDAT

; 45   :     Irp->IoStatus.Status = Status;

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _Irp$[esp-4]

; 46   :     IoCompleteRequest( Irp, PriorityBoost );

  00004	8a 54 24 0c	 mov	 dl, BYTE PTR _PriorityBoost$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 0c	 mov	 esi, DWORD PTR _Status$[esp]
  0000d	89 71 18	 mov	 DWORD PTR [ecx+24], esi
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8

; 47   :     return Status;

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 48   : }

  00019	c2 0c 00	 ret	 12			; 0000000cH
_CompleteIrp@12 ENDP
_TEXT	ENDS
PUBLIC	_DriverUnload@4
; Function compile flags: /Ogsy
; File d:\srv03rtm\drivers\ksfilter\swenum\swenum.c
;	COMDAT _DriverUnload@4
_TEXT	SEGMENT
_DriverObject$ = 8					; size = 4
_DriverUnload@4 PROC NEAR				; COMDAT

; 124  :     return;
; 125  : }

  00000	c2 04 00	 ret	 4
_DriverUnload@4 ENDP
_TEXT	ENDS
PUBLIC	_AddDevice@8
EXTRN	__imp__KsCreateBusEnumObject@24:NEAR
EXTRN	__imp__IoCreateDevice@28:NEAR
EXTRN	__imp__IoDeleteDevice@4:NEAR
EXTRN	_KSMEDIUMSETID_Standard:BYTE
;	COMDAT _AddDevice@8
PAGE	SEGMENT
$SG10586 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H
$SG10587 DB	'S', 00H, 'W', 00H, 00H, 00H
; Function compile flags: /Ogsy
_FunctionalDeviceObject$ = 8				; size = 4
_DriverObject$ = 8					; size = 4
_PhysicalDeviceObject$ = 12				; size = 4
_AddDevice@8 PROC NEAR					; COMDAT

; 151  : {

  00016	55		 push	 ebp
  00017	8b ec		 mov	 ebp, esp
  00019	56		 push	 esi

; 152  :     PDEVICE_OBJECT      FunctionalDeviceObject;
; 153  :     NTSTATUS            Status;
; 154  : 
; 155  :     PAGED_CODE();
; 156  : 
; 157  :     //
; 158  :     // On AddDevice, we are given the physical device object (PDO)
; 159  :     // for the bus.  Create the associcated functional device object (FDO).
; 160  :     //
; 161  : 
; 162  :     _DbgPrintF( DEBUGLVL_VERBOSE, ("AddDevice") );
; 163  : 
; 164  :     //
; 165  :     // Note, there is only one instance of this device allowed.  The
; 166  :     // static device name will guarantee an object name collision if
; 167  :     // another instance is already installed.
; 168  :     //
; 169  : 
; 170  :     Status = IoCreateDevice(
; 171  :                 DriverObject,               // our driver object
; 172  :                 sizeof( PVOID ),            // size of our extension
; 173  :                 NULL,                       // our name for the FDO
; 174  :                 FILE_DEVICE_BUS_EXTENDER,   // device type
; 175  :                 0,                          // device characteristics
; 176  :                 FALSE,                      // not exclusive
; 177  :                 &FunctionalDeviceObject     // store new device object here
; 178  :                 );

  0001a	8d 45 08	 lea	 eax, DWORD PTR _FunctionalDeviceObject$[ebp]
  0001d	50		 push	 eax
  0001e	33 f6		 xor	 esi, esi
  00020	56		 push	 esi
  00021	56		 push	 esi
  00022	6a 2a		 push	 42			; 0000002aH
  00024	56		 push	 esi
  00025	6a 04		 push	 4
  00027	ff 75 08	 push	 DWORD PTR _DriverObject$[ebp]
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoCreateDevice@28

; 179  : 
; 180  :     if(!NT_SUCCESS( Status )) {

  00030	3b c6		 cmp	 eax, esi

; 181  :         _DbgPrintF(
; 182  :             DEBUGLVL_ERROR,
; 183  :             ("failed to create FDO, status = %x.", Status) );
; 184  : 
; 185  :         return Status;

  00032	7c 49		 jl	 SHORT $L10576

; 186  :     }
; 187  : 
; 188  :     //
; 189  :     // Clear the device extension
; 190  :     //
; 191  :     *(PVOID *)FunctionalDeviceObject->DeviceExtension = NULL;

  00034	8b 45 08	 mov	 eax, DWORD PTR _FunctionalDeviceObject$[ebp]
  00037	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0003a	57		 push	 edi

; 192  : 
; 193  :     //
; 194  :     // Create the bus enumerator object
; 195  :     //
; 196  : 
; 197  :     Status =
; 198  :         KsCreateBusEnumObject(
; 199  :             L"SW",
; 200  :             FunctionalDeviceObject,
; 201  :             PhysicalDeviceObject,
; 202  :             NULL, // PDEVICE_OBJECT PnpDeviceObject
; 203  :             &BUSID_SoftwareDeviceEnumerator,
; 204  :             L"Devices" );

  0003b	68 00 00 00 00	 push	 OFFSET FLAT:$SG10586
  00040	68 00 00 00 00	 push	 OFFSET FLAT:_KSMEDIUMSETID_Standard
  00045	56		 push	 esi
  00046	ff 75 0c	 push	 DWORD PTR _PhysicalDeviceObject$[ebp]
  00049	89 30		 mov	 DWORD PTR [eax], esi
  0004b	ff 75 08	 push	 DWORD PTR _FunctionalDeviceObject$[ebp]
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:$SG10587
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsCreateBusEnumObject@24
  00059	8b f8		 mov	 edi, eax

; 205  : 
; 206  :     if (!NT_SUCCESS( Status )) {

  0005b	3b fe		 cmp	 edi, esi
  0005d	7d 0d		 jge	 SHORT $L10589

; 207  :         _DbgPrintF(
; 208  :             DEBUGLVL_ERROR,
; 209  :             ("failed KsCreateBusEnumObject: %08x", Status) );
; 210  :         IoDeleteDevice( FunctionalDeviceObject );

  0005f	ff 75 08	 push	 DWORD PTR _FunctionalDeviceObject$[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoDeleteDevice@4

; 211  :         return Status;

  00068	8b c7		 mov	 eax, edi
  0006a	eb 10		 jmp	 SHORT $L10782
$L10589:

; 212  :     }
; 213  : 
; 214  :     FunctionalDeviceObject->Flags |= DO_POWER_PAGABLE;

  0006c	8b 45 08	 mov	 eax, DWORD PTR _FunctionalDeviceObject$[ebp]
  0006f	80 48 1d 20	 or	 BYTE PTR [eax+29], 32	; 00000020H

; 215  :     FunctionalDeviceObject->Flags &= ~DO_DEVICE_INITIALIZING;

  00073	8b 45 08	 mov	 eax, DWORD PTR _FunctionalDeviceObject$[ebp]
  00076	80 60 1c 7f	 and	 BYTE PTR [eax+28], 127	; 0000007fH

; 216  : 
; 217  :     return STATUS_SUCCESS;

  0007a	33 c0		 xor	 eax, eax
$L10782:
  0007c	5f		 pop	 edi
$L10576:
  0007d	5e		 pop	 esi

; 218  : }

  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
_AddDevice@8 ENDP
PAGE	ENDS
PUBLIC	_DispatchPnP@8
EXTRN	__imp__KsGetBusEnumPnpDeviceObject@8:NEAR
EXTRN	__imp__KsIsBusEnumChildDevice@8:NEAR
EXTRN	__imp__KsServiceBusEnumPnpRequest@8:NEAR
EXTRN	__imp_@IofCallDriver@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DispatchPnP@8
PAGE	SEGMENT
_PnpDeviceObject$ = -4					; size = 4
_DeviceObject$ = 8					; size = 4
_Irp$ = 12						; size = 4
_ChildDevice$ = 15					; size = 1
_DispatchPnP@8 PROC NEAR				; COMDAT

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 245  :     BOOLEAN                 ChildDevice;
; 246  :     PIO_STACK_LOCATION      irpSp;
; 247  :     NTSTATUS                Status;
; 248  :     PDEVICE_OBJECT          PnpDeviceObject;
; 249  : 
; 250  :     irpSp = IoGetCurrentIrpStackLocation( Irp );

  00006	8b 75 0c	 mov	 esi, DWORD PTR _Irp$[ebp]
  00009	8b 5e 60	 mov	 ebx, DWORD PTR [esi+96]

; 251  : 
; 252  :     //
; 253  :     // Get the PnpDeviceObject and determine FDO/PDO.
; 254  :     //
; 255  : 
; 256  :     Status = KsIsBusEnumChildDevice( DeviceObject, &ChildDevice );

  0000c	8d 45 0f	 lea	 eax, DWORD PTR _ChildDevice$[ebp]
  0000f	50		 push	 eax
  00010	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsIsBusEnumChildDevice@8

; 257  : 
; 258  :     //
; 259  :     // If we're unable to obtain any of this information, fail now.
; 260  :     //
; 261  : 
; 262  :     if (!NT_SUCCESS( Status )) {

  00019	85 c0		 test	 eax, eax
  0001b	7d 0e		 jge	 SHORT $L10601

; 263  :         return CompleteIrp( Irp, Status, IO_NO_INCREMENT );

  0001d	6a 00		 push	 0
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 _CompleteIrp@12
  00026	e9 a0 00 00 00	 jmp	 $L10595
$L10601:
  0002b	57		 push	 edi

; 264  :     }
; 265  : 
; 266  :     Status = KsServiceBusEnumPnpRequest( DeviceObject, Irp );

  0002c	56		 push	 esi
  0002d	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsServiceBusEnumPnpRequest@8

; 267  : 
; 268  :     //
; 269  :     // FDO processing may return STATUS_NOT_SUPPORTED or may require
; 270  :     // overrides.
; 271  :     //
; 272  : 
; 273  :     if (!ChildDevice) {

  00036	80 7d 0f 00	 cmp	 BYTE PTR _ChildDevice$[ebp], 0
  0003a	8b f8		 mov	 edi, eax
  0003c	75 70		 jne	 SHORT $L10625

; 274  :         NTSTATUS tempStatus;
; 275  : 
; 276  :         //
; 277  :         // FDO case
; 278  :         //
; 279  :         // First retrieve the DO we will forward everything to...
; 280  :         //
; 281  :         tempStatus = KsGetBusEnumPnpDeviceObject( DeviceObject, &PnpDeviceObject );

  0003e	8d 45 fc	 lea	 eax, DWORD PTR _PnpDeviceObject$[ebp]
  00041	50		 push	 eax
  00042	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsGetBusEnumPnpDeviceObject@8

; 282  : 
; 283  :         if (!NT_SUCCESS( tempStatus )) {

  0004b	85 c0		 test	 eax, eax
  0004d	7d 0b		 jge	 SHORT $L10605

; 284  :             //
; 285  :             // No DO to forward to. Actually a fatal error, but just complete
; 286  :             // with an error status.
; 287  :             //
; 288  :             return CompleteIrp( Irp, tempStatus, IO_NO_INCREMENT );

  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 _CompleteIrp@12
  00058	eb 70		 jmp	 SHORT $L10788
$L10605:

; 289  :         }
; 290  : 
; 291  :         switch (irpSp->MinorFunction) {

  0005a	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  0005d	3c 02		 cmp	 al, 2
  0005f	bb bb 00 00 c0	 mov	 ebx, -1073741637	; c00000bbH
  00064	74 1a		 je	 SHORT $L10619
  00066	3c 09		 cmp	 al, 9
  00068	76 21		 jbe	 SHORT $L10607
  0006a	3c 0b		 cmp	 al, 11			; 0000000bH
  0006c	76 0a		 jbe	 SHORT $L10610
  0006e	3c 14		 cmp	 al, 20			; 00000014H
  00070	75 19		 jne	 SHORT $L10607

; 302  : 
; 303  :         case IRP_MN_QUERY_PNP_DEVICE_STATE:
; 304  :             {
; 305  :                 //
; 306  :                 // Mark the device as not disableable.
; 307  :                 //
; 308  :                 PPNP_DEVICE_STATE DeviceState;
; 309  : 
; 310  :                 DeviceState = (PPNP_DEVICE_STATE) &Irp->IoStatus.Information;
; 311  :                 *DeviceState |= PNP_DEVICE_NOT_DISABLEABLE;

  00072	83 4e 1c 20	 or	 DWORD PTR [esi+28], 32	; 00000020H

; 312  :                 Status = STATUS_SUCCESS;
; 313  :             }
; 314  :             break;

  00076	eb 04		 jmp	 SHORT $L10789
$L10610:

; 292  : 
; 293  :         case IRP_MN_QUERY_RESOURCES:
; 294  :         case IRP_MN_QUERY_RESOURCE_REQUIREMENTS:
; 295  :             //
; 296  :             // This is normally passed on to the PDO, but since this is a
; 297  :             // software only device, resources are not required.
; 298  :             //
; 299  :             Irp->IoStatus.Information = (ULONG_PTR)NULL;

  00078	83 66 1c 00	 and	 DWORD PTR [esi+28], 0
$L10789:

; 300  :             Status = STATUS_SUCCESS;

  0007c	33 ff		 xor	 edi, edi

; 301  :             break;

  0007e	eb 0f		 jmp	 SHORT $L10786
$L10619:

; 315  : 
; 316  :         case IRP_MN_QUERY_DEVICE_RELATIONS:
; 317  : 
; 318  :             //
; 319  :             // Forward everything...
; 320  :             //
; 321  :             break;
; 322  : 
; 323  :         case IRP_MN_REMOVE_DEVICE:
; 324  :             //
; 325  :             // The KsBusEnum services cleaned up attachments, etc. However,
; 326  :             // we must remove our own FDO.
; 327  :             //
; 328  :             Status = STATUS_SUCCESS;
; 329  :             IoDeleteDevice( DeviceObject );

  00080	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  00083	33 ff		 xor	 edi, edi
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoDeleteDevice@4
$L10607:

; 330  :             break;
; 331  :         }
; 332  : 
; 333  :         if (Status != STATUS_NOT_SUPPORTED) {

  0008b	3b fb		 cmp	 edi, ebx
  0008d	74 03		 je	 SHORT $L10787
$L10786:

; 334  : 
; 335  :             //
; 336  :             // Set the Irp status only if we have something to add.
; 337  :             //
; 338  :             Irp->IoStatus.Status = Status;

  0008f	89 7e 18	 mov	 DWORD PTR [esi+24], edi
$L10787:

; 339  :         }
; 340  : 
; 341  : 
; 342  :         //
; 343  :         // Forward this IRP down the stack only if we are successful or
; 344  :         // we don't know how to handle this Irp.
; 345  :         //
; 346  :         if (NT_SUCCESS( Status ) || (Status == STATUS_NOT_SUPPORTED)) {

  00092	85 ff		 test	 edi, edi
  00094	7d 04		 jge	 SHORT $L10626
  00096	3b fb		 cmp	 edi, ebx
  00098	75 1c		 jne	 SHORT $L10785
$L10626:

; 347  : 
; 348  :             IoSkipCurrentIrpStackLocation(Irp);
; 349  :             return IoCallDriver( PnpDeviceObject, Irp );

  0009a	8b 4d fc	 mov	 ecx, DWORD PTR _PnpDeviceObject$[ebp]
  0009d	fe 46 23	 inc	 BYTE PTR [esi+35]
  000a0	83 46 60 24	 add	 DWORD PTR [esi+96], 36	; 00000024H
  000a4	8b d6		 mov	 edx, esi
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCallDriver@8
  000ac	eb 1c		 jmp	 SHORT $L10788
$L10625:

; 350  :         }
; 351  : 
; 352  :         //
; 353  :         // On error, fall through and complete the IRP with the status.
; 354  :         //
; 355  :     }
; 356  : 
; 357  : 
; 358  :     //
; 359  :     // KsServiceBusEnumPnpRequest() handles all other child PDO requests.
; 360  :     //
; 361  : 
; 362  :     if (Status != STATUS_NOT_SUPPORTED) {

  000ae	81 ff bb 00 00
	c0		 cmp	 edi, -1073741637	; c00000bbH
  000b4	74 05		 je	 SHORT $L10628
$L10785:

; 363  :         Irp->IoStatus.Status = Status;

  000b6	89 7e 18	 mov	 DWORD PTR [esi+24], edi

; 364  :     } else {

  000b9	eb 03		 jmp	 SHORT $L10629
$L10628:

; 365  :         Status = Irp->IoStatus.Status;

  000bb	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
$L10629:

; 366  :     }
; 367  :     IoCompleteRequest( Irp, IO_NO_INCREMENT );

  000be	32 d2		 xor	 dl, dl
  000c0	8b ce		 mov	 ecx, esi
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8

; 368  :     return Status;

  000c8	8b c7		 mov	 eax, edi
$L10788:
  000ca	5f		 pop	 edi
$L10595:
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 369  : }

  000cd	c9		 leave
  000ce	c2 08 00	 ret	 8
_DispatchPnP@8 ENDP
PAGE	ENDS
PUBLIC	_DispatchSystemControl@8
; Function compile flags: /Ogsy
;	COMDAT _DispatchSystemControl@8
_TEXT	SEGMENT
_PnpDeviceObject$ = -8					; size = 4
_ChildDevice$ = -1					; size = 1
_DeviceObject$ = 8					; size = 4
_Irp$ = 12						; size = 4
_DispatchSystemControl@8 PROC NEAR			; COMDAT

; 395  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 396  :     BOOLEAN                 ChildDevice;
; 397  :     PIO_STACK_LOCATION      irpSp;
; 398  :     NTSTATUS                Status;
; 399  :     PDEVICE_OBJECT          PnpDeviceObject;
; 400  : 
; 401  :     //
; 402  :     // Get the PnpDeviceObject and determine FDO/PDO.
; 403  :     //
; 404  : 
; 405  :     Status = KsIsBusEnumChildDevice( DeviceObject, &ChildDevice );

  00005	8d 45 ff	 lea	 eax, DWORD PTR _ChildDevice$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsIsBusEnumChildDevice@8

; 406  : 
; 407  :     //
; 408  :     // If we're unable to obtain any of this information, fail now.
; 409  :     //
; 410  : 
; 411  :     if (!NT_SUCCESS( Status )) {

  00012	85 c0		 test	 eax, eax

; 412  :         return CompleteIrp( Irp, Status, IO_NO_INCREMENT );

  00014	7c 17		 jl	 SHORT $L10793

; 413  :     }
; 414  : 
; 415  :     if (!ChildDevice) {

  00016	80 7d ff 00	 cmp	 BYTE PTR _ChildDevice$[ebp], 0
  0001a	75 2e		 jne	 SHORT $L10641

; 416  : 
; 417  :         //
; 418  :         // FDO case
; 419  :         //
; 420  :         // We will need the DO we will forward everything to...
; 421  :         //
; 422  :         Status = KsGetBusEnumPnpDeviceObject( DeviceObject, &PnpDeviceObject );

  0001c	8d 45 f8	 lea	 eax, DWORD PTR _PnpDeviceObject$[ebp]
  0001f	50		 push	 eax
  00020	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsGetBusEnumPnpDeviceObject@8

; 423  : 
; 424  :         if (!NT_SUCCESS( Status )) {

  00029	85 c0		 test	 eax, eax
  0002b	7d 08		 jge	 SHORT $L10643
$L10793:

; 425  :             //
; 426  :             // No DO to forward to. Actually a fatal error, but just complete
; 427  :             // with an error status.
; 428  :             //
; 429  :             return CompleteIrp( Irp, Status, IO_NO_INCREMENT );

  0002d	6a 00		 push	 0
  0002f	50		 push	 eax
  00030	ff 75 0c	 push	 DWORD PTR _Irp$[ebp]
  00033	eb 1f		 jmp	 SHORT $L10792
$L10643:

; 430  :         }
; 431  : 
; 432  :         //
; 433  :         // Forward this IRP down the stack.
; 434  :         //
; 435  :         IoSkipCurrentIrpStackLocation(Irp);

  00035	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]

; 436  :         return IoCallDriver( PnpDeviceObject, Irp );

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _PnpDeviceObject$[ebp]
  0003b	fe 42 23	 inc	 BYTE PTR [edx+35]
  0003e	83 42 60 24	 add	 DWORD PTR [edx+96], 36	; 00000024H
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCallDriver@8
  00048	eb 0f		 jmp	 SHORT $L10634
$L10641:

; 437  :     }
; 438  : 
; 439  :     Status = Irp->IoStatus.Status;

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  0004d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]

; 440  :     return CompleteIrp( Irp, Status, IO_NO_INCREMENT );

  00050	6a 00		 push	 0
  00052	51		 push	 ecx
  00053	50		 push	 eax
$L10792:
  00054	e8 00 00 00 00	 call	 _CompleteIrp@12
$L10634:

; 441  : }

  00059	c9		 leave
  0005a	c2 08 00	 ret	 8
_DispatchSystemControl@8 ENDP
_TEXT	ENDS
PUBLIC	_DispatchPower@8
EXTRN	__imp__PoCallDriver@8:NEAR
EXTRN	__imp__PoStartNextPowerIrp@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DispatchPower@8
_TEXT	SEGMENT
_PnpDeviceObject$ = -4					; size = 4
_DeviceObject$ = 8					; size = 4
_Irp$ = 12						; size = 4
_ChildDevice$ = 15					; size = 1
_DispatchPower@8 PROC NEAR				; COMDAT

; 467  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 468  :     BOOLEAN                 ChildDevice;
; 469  :     PIO_STACK_LOCATION      irpSp;
; 470  :     NTSTATUS                Status;
; 471  :     PDEVICE_OBJECT          PnpDeviceObject;
; 472  : 
; 473  :     irpSp = IoGetCurrentIrpStackLocation( Irp );

  00006	8b 75 0c	 mov	 esi, DWORD PTR _Irp$[ebp]
  00009	57		 push	 edi
  0000a	8b 7e 60	 mov	 edi, DWORD PTR [esi+96]

; 474  : 
; 475  :     //
; 476  :     // Get the PnpDeviceObject and determine FDO/PDO.
; 477  :     //
; 478  : 
; 479  :     Status = KsIsBusEnumChildDevice( DeviceObject, &ChildDevice );

  0000d	8d 45 0f	 lea	 eax, DWORD PTR _ChildDevice$[ebp]
  00010	50		 push	 eax
  00011	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsIsBusEnumChildDevice@8
  0001a	8b d8		 mov	 ebx, eax

; 480  : 
; 481  :     //
; 482  :     // If we're unable to obtain any of this information, fail now.
; 483  :     //
; 484  : 
; 485  :     if (!NT_SUCCESS( Status )) {

  0001c	85 db		 test	 ebx, ebx

; 486  :         PoStartNextPowerIrp(Irp);
; 487  :         return CompleteIrp( Irp, Status, IO_NO_INCREMENT );

  0001e	7c 19		 jl	 SHORT $L10799

; 488  :     }
; 489  : 
; 490  :     if (!ChildDevice) {

  00020	80 7d 0f 00	 cmp	 BYTE PTR _ChildDevice$[ebp], 0
  00024	75 1f		 jne	 SHORT $L10797

; 491  : 
; 492  :         NTSTATUS tempStatus;
; 493  : 
; 494  :         //
; 495  :         // FDO case
; 496  :         //
; 497  :         // We will need the DO we will forward everything to...
; 498  :         //
; 499  :         tempStatus = KsGetBusEnumPnpDeviceObject( DeviceObject, &PnpDeviceObject );

  00026	8d 45 fc	 lea	 eax, DWORD PTR _PnpDeviceObject$[ebp]
  00029	50		 push	 eax
  0002a	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsGetBusEnumPnpDeviceObject@8
  00033	8b d8		 mov	 ebx, eax

; 500  : 
; 501  :         if (!NT_SUCCESS( tempStatus )) {

  00035	85 db		 test	 ebx, ebx
  00037	7d 0c		 jge	 SHORT $L10797
$L10799:

; 502  :             //
; 503  :             // No DO to forward to. Actually a fatal error, but just complete
; 504  :             // with an error status.
; 505  :             //
; 506  :             PoStartNextPowerIrp(Irp);

  00039	56		 push	 esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PoStartNextPowerIrp@4

; 507  :             return CompleteIrp( Irp, tempStatus, IO_NO_INCREMENT );

  00040	6a 00		 push	 0
  00042	53		 push	 ebx
  00043	eb 5a		 jmp	 SHORT $L10798
$L10797:

; 508  :         }
; 509  :     }
; 510  : 
; 511  :     switch (irpSp->MinorFunction) {

  00045	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00048	3c 02		 cmp	 al, 2
  0004a	b9 bb 00 00 c0	 mov	 ecx, -1073741637	; c00000bbH
  0004f	72 12		 jb	 SHORT $L10670
  00051	3c 03		 cmp	 al, 3
  00053	77 0e		 ja	 SHORT $L10670

; 512  : 
; 513  :     case IRP_MN_QUERY_POWER:
; 514  :     case IRP_MN_SET_POWER:
; 515  : 
; 516  :         switch (irpSp->Parameters.Power.Type) {

  00055	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]
  00058	33 c0		 xor	 eax, eax
  0005a	3b f8		 cmp	 edi, eax
  0005c	7c 05		 jl	 SHORT $L10670
  0005e	83 ff 01	 cmp	 edi, 1

; 517  : 
; 518  :         case DevicePowerState:
; 519  :         case SystemPowerState:
; 520  : 
; 521  :             Status = STATUS_SUCCESS;
; 522  :             break;

  00061	7e 04		 jle	 SHORT $L10796
$L10670:

; 523  : 
; 524  :         default:
; 525  :             Status = STATUS_NOT_SUPPORTED;

  00063	8b c1		 mov	 eax, ecx

; 526  :             break;
; 527  : 
; 528  :         }
; 529  :         break;

  00065	eb 03		 jmp	 SHORT $L10675
$L10796:

; 530  : 
; 531  :     default:
; 532  :         Status = STATUS_NOT_SUPPORTED;
; 533  :         break;
; 534  :     }
; 535  : 
; 536  :     if (Status != STATUS_NOT_SUPPORTED) {
; 537  : 
; 538  :         Irp->IoStatus.Status = Status;

  00067	89 46 18	 mov	 DWORD PTR [esi+24], eax
$L10675:

; 539  :     }
; 540  : 
; 541  :     if ((!ChildDevice) && (NT_SUCCESS(Status) || (Status == STATUS_NOT_SUPPORTED))) {

  0006a	80 7d 0f 00	 cmp	 BYTE PTR _ChildDevice$[ebp], 0
  0006e	75 22		 jne	 SHORT $L10678
  00070	85 c0		 test	 eax, eax
  00072	7d 04		 jge	 SHORT $L10679
  00074	3b c1		 cmp	 eax, ecx
  00076	75 1a		 jne	 SHORT $L10678
$L10679:

; 542  : 
; 543  :         PoStartNextPowerIrp(Irp);

  00078	56		 push	 esi
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PoStartNextPowerIrp@4

; 544  :         IoSkipCurrentIrpStackLocation(Irp);

  0007f	fe 46 23	 inc	 BYTE PTR [esi+35]
  00082	83 46 60 24	 add	 DWORD PTR [esi+96], 36	; 00000024H

; 545  :         return PoCallDriver( PnpDeviceObject, Irp );

  00086	56		 push	 esi
  00087	ff 75 fc	 push	 DWORD PTR _PnpDeviceObject$[ebp]
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PoCallDriver@8
  00090	eb 13		 jmp	 SHORT $L10680
$L10678:

; 546  : 
; 547  :     } else {
; 548  :         Status = Irp->IoStatus.Status;

  00092	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]

; 549  :         PoStartNextPowerIrp( Irp );

  00095	56		 push	 esi
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PoStartNextPowerIrp@4

; 550  :         return CompleteIrp( Irp, Status, IO_NO_INCREMENT );

  0009c	6a 00		 push	 0
  0009e	57		 push	 edi
$L10798:
  0009f	56		 push	 esi
  000a0	e8 00 00 00 00	 call	 _CompleteIrp@12
$L10680:
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 551  :     }
; 552  : }

  000a8	c9		 leave
  000a9	c2 08 00	 ret	 8
_DispatchPower@8 ENDP
_TEXT	ENDS
PUBLIC	_DispatchCreate@8
EXTRN	__imp__KsServiceBusEnumCreateRequest@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DispatchCreate@8
PAGE	SEGMENT
_ChildDevice$ = -1					; size = 1
_DeviceObject$ = 8					; size = 4
_Irp$ = 12						; size = 4
_DispatchCreate@8 PROC NEAR				; COMDAT

; 577  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 578  :     BOOLEAN             ChildDevice;
; 579  :     NTSTATUS            Status;
; 580  :     PIO_STACK_LOCATION  irpSp;
; 581  : 
; 582  :     PAGED_CODE();
; 583  : 
; 584  :     Status = KsIsBusEnumChildDevice( DeviceObject, &ChildDevice );

  00006	8d 45 ff	 lea	 eax, DWORD PTR _ChildDevice$[ebp]
  00009	50		 push	 eax
  0000a	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsIsBusEnumChildDevice@8

; 585  :     if (NT_SUCCESS( Status )) {

  00013	8b 7d 0c	 mov	 edi, DWORD PTR _Irp$[ebp]
  00016	8b f0		 mov	 esi, eax
  00018	85 f6		 test	 esi, esi
  0001a	7c 2a		 jl	 SHORT $L10695

; 586  : 
; 587  :         irpSp = IoGetCurrentIrpStackLocation( Irp );
; 588  : 
; 589  :         if (!ChildDevice) {

  0001c	80 7d ff 00	 cmp	 BYTE PTR _ChildDevice$[ebp], 0
  00020	75 1f		 jne	 SHORT $L10691

; 590  :             if (!irpSp->FileObject->FileName.Length) {

  00022	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  00025	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00028	66 83 78 30 00	 cmp	 WORD PTR [eax+48], 0
  0002d	75 04		 jne	 SHORT $L10692

; 591  :                 //
; 592  :                 // This is a request for the bus, if and only if there
; 593  :                 // is no filename specified.
; 594  :                 //
; 595  :                 Status = STATUS_SUCCESS;

  0002f	33 f6		 xor	 esi, esi

; 596  :             } else {

  00031	eb 1b		 jmp	 SHORT $L10802
$L10692:

; 597  :                 //
; 598  :                 // Redirection to the child PDO.
; 599  :                 //
; 600  :                 Status = KsServiceBusEnumCreateRequest( DeviceObject, Irp );

  00033	57		 push	 edi
  00034	ff 75 08	 push	 DWORD PTR _DeviceObject$[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsServiceBusEnumCreateRequest@8
  0003d	8b f0		 mov	 esi, eax

; 601  :             }
; 602  :         } else {

  0003f	eb 05		 jmp	 SHORT $L10695
$L10691:

; 603  :             Status = STATUS_OBJECT_NAME_NOT_FOUND;

  00041	be 34 00 00 c0	 mov	 esi, -1073741772	; c0000034H
$L10695:

; 604  :         }
; 605  :     }
; 606  : 
; 607  :     if (Status != STATUS_PENDING) {

  00046	81 fe 03 01 00
	00		 cmp	 esi, 259		; 00000103H
  0004c	74 0d		 je	 SHORT $L10698
$L10802:

; 608  :         Irp->IoStatus.Status = Status;
; 609  :         IoCompleteRequest( Irp, IO_NO_INCREMENT );

  0004e	32 d2		 xor	 dl, dl
  00050	8b cf		 mov	 ecx, edi
  00052	89 77 18	 mov	 DWORD PTR [edi+24], esi
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
$L10698:
  0005b	5f		 pop	 edi

; 610  :     }
; 611  :     return Status;

  0005c	8b c6		 mov	 eax, esi
  0005e	5e		 pop	 esi

; 612  : }

  0005f	c9		 leave
  00060	c2 08 00	 ret	 8
_DispatchCreate@8 ENDP
PAGE	ENDS
PUBLIC	_DispatchIoControl@8
EXTRN	__imp__KsGetBusEnumIdentifier@4:NEAR
EXTRN	__imp__KsInstallBusEnumInterface@4:NEAR
EXTRN	__imp__KsRemoveBusEnumInterface@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DispatchIoControl@8
PAGE	SEGMENT
_DeviceObject$ = 8					; size = 4
_Irp$ = 12						; size = 4
_DispatchIoControl@8 PROC NEAR				; COMDAT

; 638  : {

  00000	56		 push	 esi

; 639  :     NTSTATUS            Status;
; 640  :     PIO_STACK_LOCATION  irpSp;
; 641  : 
; 642  :     PAGED_CODE();
; 643  : 
; 644  :     irpSp = IoGetCurrentIrpStackLocation( Irp );
; 645  : 
; 646  :     _DbgPrintF( DEBUGLVL_BLAB, ("DispatchIoControl") );
; 647  : 
; 648  :     switch (irpSp->Parameters.DeviceIoControl.IoControlCode) {

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _Irp$[esp]
  00005	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00008	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0000b	2d 00 00 2a 00	 sub	 eax, 2752512		; 002a0000H
  00010	74 25		 je	 SHORT $L10710
  00012	83 e8 04	 sub	 eax, 4
  00015	74 17		 je	 SHORT $L10712
  00017	2d 07 40 00 00	 sub	 eax, 16391		; 00004007H
  0001c	74 07		 je	 SHORT $L10711

; 661  : 
; 662  :     default:
; 663  :         Status = STATUS_INVALID_DEVICE_REQUEST;

  0001e	b8 10 00 00 c0	 mov	 eax, -1073741808	; c0000010H

; 664  :         break;

  00023	eb 19		 jmp	 SHORT $L10707
$L10711:

; 652  :         break;
; 653  : 
; 654  :     case IOCTL_SWENUM_GET_BUS_ID:
; 655  :         Status = KsGetBusEnumIdentifier( Irp );

  00025	56		 push	 esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsGetBusEnumIdentifier@4

; 656  :         break;

  0002c	eb 10		 jmp	 SHORT $L10707
$L10712:

; 657  : 
; 658  :     case IOCTL_SWENUM_REMOVE_INTERFACE:
; 659  :         Status = KsRemoveBusEnumInterface( Irp );

  0002e	56		 push	 esi
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsRemoveBusEnumInterface@4

; 660  :         break;

  00035	eb 07		 jmp	 SHORT $L10707
$L10710:

; 649  : 
; 650  :     case IOCTL_SWENUM_INSTALL_INTERFACE:
; 651  :         Status = KsInstallBusEnumInterface( Irp );

  00037	56		 push	 esi
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KsInstallBusEnumInterface@4
$L10707:

; 665  : 
; 666  :     }
; 667  : 
; 668  :     return CompleteIrp( Irp, Status, IO_NO_INCREMENT );

  0003e	6a 00		 push	 0
  00040	50		 push	 eax
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 _CompleteIrp@12
  00047	5e		 pop	 esi

; 669  : }

  00048	c2 08 00	 ret	 8
_DispatchIoControl@8 ENDP
PAGE	ENDS
PUBLIC	_DispatchClose@8
; Function compile flags: /Ogsy
;	COMDAT _DispatchClose@8
PAGE	SEGMENT
_DeviceObject$ = 8					; size = 4
_Irp$ = 12						; size = 4
_DispatchClose@8 PROC NEAR				; COMDAT

; 696  :     PAGED_CODE();
; 697  : 
; 698  :     _DbgPrintF( DEBUGLVL_BLAB, ("DispatchClose") );
; 699  : 
; 700  :     return CompleteIrp( Irp, STATUS_SUCCESS, IO_NO_INCREMENT );

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _Irp$[esp-4]
  00004	83 61 18 00	 and	 DWORD PTR [ecx+24], 0
  00008	32 d2		 xor	 dl, dl
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
  00010	33 c0		 xor	 eax, eax

; 701  : }

  00012	c2 08 00	 ret	 8
_DispatchClose@8 ENDP
PAGE	ENDS
PUBLIC	_DriverEntry@8
; Function compile flags: /Ogsy
;	COMDAT _DriverEntry@8
INIT	SEGMENT
_DriverObject$ = 8					; size = 4
_RegistryPath$ = 12					; size = 4
_DriverEntry@8 PROC NEAR				; COMDAT

; 58   : 
; 59   :     //
; 60   :     // win98gold ntkern does not fill in the Service name in our
; 61   :     // driver extension. but we depend on the name to have correct
; 62   :     // KsCreateBusEnumObject. Try to add the Service name here.
; 63   :     // Since we are statically loaded, freeing the memory is rarely
; 64   :     // necessary.
; 65   :     //
; 66   :     #ifdef WIN98GOLD
; 67   :     if ( NULL == DriverObject->DriverExtension->ServiceKeyName.Buffer ) {
; 68   :         UNICODE_STRING ServiceNameU;
; 69   :         ULONG          cb;
; 70   : 
; 71   :         cb = RegistryPath->Length;
; 72   :         ServiceNameU.Buffer = ExAllocatePool( NonPagedPool, cb );
; 73   :         if ( NULL == ServiceNameU.Buffer ) {
; 74   :             return STATUS_INSUFFICIENT_RESOURCES;
; 75   :         }
; 76   :         RtlCopyMemory( ServiceNameU.Buffer, RegistryPath->Buffer, cb );
; 77   :         ServiceNameU.MaximumLength = ServiceNameU.Length = (USHORT)cb;
; 78   :         DriverObject->DriverExtension->ServiceKeyName = ServiceNameU;
; 79   :     }
; 80   :     #endif
; 81   :     
; 82   :     _DbgPrintF(
; 83   :         DEBUGLVL_VERBOSE,
; 84   :         ("DriverEntry, registry path = %S", RegistryPath->Buffer) );
; 85   : 
; 86   :     //
; 87   :     // Fill in the driver object
; 88   :     //
; 89   : 
; 90   :     DriverObject->MajorFunction[ IRP_MJ_PNP ] = DispatchPnP;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _DriverObject$[esp-4]

; 91   :     DriverObject->MajorFunction[ IRP_MJ_POWER ] = DispatchPower;
; 92   :     DriverObject->MajorFunction[ IRP_MJ_CREATE ] = DispatchCreate;
; 93   :     DriverObject->MajorFunction[ IRP_MJ_DEVICE_CONTROL ] = DispatchIoControl;
; 94   :     DriverObject->MajorFunction[ IRP_MJ_SYSTEM_CONTROL ] = DispatchSystemControl;
; 95   :     DriverObject->MajorFunction[ IRP_MJ_CLOSE ] = DispatchClose;
; 96   :     DriverObject->DriverExtension->AddDevice = AddDevice;

  00004	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00007	c7 80 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+164], OFFSET FLAT:_DispatchPnP@8
  00011	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+144], OFFSET FLAT:_DispatchPower@8
  0001b	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], OFFSET FLAT:_DispatchCreate@8
  00022	c7 40 70 00 00
	00 00		 mov	 DWORD PTR [eax+112], OFFSET FLAT:_DispatchIoControl@8
  00029	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], OFFSET FLAT:_DispatchSystemControl@8
  00033	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], OFFSET FLAT:_DispatchClose@8
  0003a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:_AddDevice@8

; 97   :     DriverObject->DriverUnload = DriverUnload;

  00041	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], OFFSET FLAT:_DriverUnload@4

; 98   : 
; 99   :     return STATUS_SUCCESS;

  00048	33 c0		 xor	 eax, eax

; 100  : }

  0004a	c2 08 00	 ret	 8
_DriverEntry@8 ENDP
INIT	ENDS
END
