; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.2190 

	TITLE	..\device.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
INIT	SEGMENT PARA USE32 PUBLIC ''
INIT	ENDS
;	COMDAT _KsGateTurnInputOn@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateTurnInputOff@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateGetStateUnsafe@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateInitialize@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateRemoveOnInputFromAnd@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateRemoveOffInputFromAnd@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateRemoveOnInputFromOr@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KsGateRemoveOffInputFromOr@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DriverEntry@8
INIT	SEGMENT PARA USE32 PUBLIC ''
INIT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_DriverEntry@8
EXTRN	__imp__KsNullDriverUnload@4:NEAR
EXTRN	__imp__KsSetMajorFunctionHandler@8:NEAR
EXTRN	_PnpAddDevice@8:NEAR
EXTRN	__imp__KsDefaultDispatchPnp@8:NEAR
EXTRN	__imp__KsDefaultDispatchPower@8:NEAR
EXTRN	__imp__KsDefaultForwardIrp@8:NEAR
; Function compile flags: /Ogsy
; File d:\srv03rtm\drivers\ksfilter\mspclock\device.c
;	COMDAT _DriverEntry@8
INIT	SEGMENT
_DriverObject$ = 8					; size = 4
_RegistryPathName$ = 12					; size = 4
_DriverEntry@8 PROC NEAR				; COMDAT

; 55   :     DriverObject->MajorFunction[IRP_MJ_PNP] = KsDefaultDispatchPnp;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__KsDefaultDispatchPnp@8
  00005	56		 push	 esi
  00006	8b 74 24 08	 mov	 esi, DWORD PTR _DriverObject$[esp]
  0000a	89 86 a4 00 00
	00		 mov	 DWORD PTR [esi+164], eax

; 56   :     DriverObject->MajorFunction[IRP_MJ_POWER] = KsDefaultDispatchPower;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__KsDefaultDispatchPower@8
  00015	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 57   :     DriverObject->MajorFunction[IRP_MJ_SYSTEM_CONTROL] = KsDefaultForwardIrp;

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__KsDefaultForwardIrp@8
  00020	89 86 94 00 00
	00		 mov	 DWORD PTR [esi+148], eax

; 58   :     DriverObject->DriverExtension->AddDevice = PnpAddDevice;

  00026	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00029	57		 push	 edi

; 59   :     DriverObject->DriverUnload = KsNullDriverUnload;
; 60   :     KsSetMajorFunctionHandler(DriverObject, IRP_MJ_CREATE);

  0002a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__KsSetMajorFunctionHandler@8
  00030	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET FLAT:_PnpAddDevice@8
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__KsNullDriverUnload@4
  0003c	6a 00		 push	 0
  0003e	56		 push	 esi
  0003f	89 46 34	 mov	 DWORD PTR [esi+52], eax
  00042	ff d7		 call	 edi

; 61   :     KsSetMajorFunctionHandler(DriverObject, IRP_MJ_CLOSE);

  00044	6a 02		 push	 2
  00046	56		 push	 esi
  00047	ff d7		 call	 edi

; 62   :     KsSetMajorFunctionHandler(DriverObject, IRP_MJ_DEVICE_CONTROL);

  00049	6a 0e		 push	 14			; 0000000eH
  0004b	56		 push	 esi
  0004c	ff d7		 call	 edi
  0004e	5f		 pop	 edi

; 63   :     return STATUS_SUCCESS;

  0004f	33 c0		 xor	 eax, eax
  00051	5e		 pop	 esi

; 64   : }

  00052	c2 08 00	 ret	 8
_DriverEntry@8 ENDP
INIT	ENDS
END
